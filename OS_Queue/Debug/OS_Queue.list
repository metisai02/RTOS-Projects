
OS_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005048  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800529c  0800529c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800529c  0800529c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800529c  0800529c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080052a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000120c  20000074  08005318  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001280  08005318  00021280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb0c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283a  00000000  00000000  0002fba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00033048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a0  00000000  00000000  00033bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e385  00000000  00000000  0004bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1d6  00000000  00000000  0005a0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e42bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000346c  00000000  00000000  000e430c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005140 	.word	0x08005140

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005140 	.word	0x08005140

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b0a4      	sub	sp, #144	; 0x90
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fcd9 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f8c3 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f9ab 	bl	80004e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f983 	bl	800049c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f903 	bl	80003a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800019a:	f000 f92b 	bl	80003f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800019e:	f000 f953 	bl	8000448 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80001a2:	2300      	movs	r3, #0
 80001a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80001a8:	2300      	movs	r3, #0
 80001aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80001ae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80001b2:	2101      	movs	r1, #1
 80001b4:	4618      	mov	r0, r3
 80001b6:	f002 fa9b 	bl	80026f0 <osSemaphoreCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a43      	ldr	r2, [pc, #268]	; (80002cc <main+0x14c>)
 80001be:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 80001c0:	2300      	movs	r3, #0
 80001c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80001c6:	2300      	movs	r3, #0
 80001c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 80001cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80001d0:	2101      	movs	r1, #1
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 fa8c 	bl	80026f0 <osSemaphoreCreate>
 80001d8:	4603      	mov	r3, r0
 80001da:	4a3d      	ldr	r2, [pc, #244]	; (80002d0 <main+0x150>)
 80001dc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 10, sizeof(f_recei_1));
 80001de:	4b3d      	ldr	r3, [pc, #244]	; (80002d4 <main+0x154>)
 80001e0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80001e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80001ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 faaf 	bl	8002754 <osMessageCreate>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a37      	ldr	r2, [pc, #220]	; (80002d8 <main+0x158>)
 80001fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001fc:	4b37      	ldr	r3, [pc, #220]	; (80002dc <main+0x15c>)
 80001fe:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000202:	461d      	mov	r5, r3
 8000204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000210:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fa0a 	bl	8002630 <osThreadCreate>
 800021c:	4603      	mov	r3, r0
 800021e:	4a30      	ldr	r2, [pc, #192]	; (80002e0 <main+0x160>)
 8000220:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000222:	4b30      	ldr	r3, [pc, #192]	; (80002e4 <main+0x164>)
 8000224:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000228:	461d      	mov	r5, r3
 800022a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000236:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f002 f9f7 	bl	8002630 <osThreadCreate>
 8000242:	4603      	mov	r3, r0
 8000244:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <main+0x168>)
 8000246:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000248:	4b28      	ldr	r3, [pc, #160]	; (80002ec <main+0x16c>)
 800024a:	f107 041c 	add.w	r4, r7, #28
 800024e:	461d      	mov	r5, r3
 8000250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000254:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800025c:	f107 031c 	add.w	r3, r7, #28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f002 f9e4 	bl	8002630 <osThreadCreate>
 8000268:	4603      	mov	r3, r0
 800026a:	4a21      	ldr	r2, [pc, #132]	; (80002f0 <main+0x170>)
 800026c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityBelowNormal, 0, 128);
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <main+0x174>)
 8000270:	463c      	mov	r4, r7
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000280:	463b      	mov	r3, r7
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f002 f9d3 	bl	8002630 <osThreadCreate>
 800028a:	4603      	mov	r3, r0
 800028c:	4a1a      	ldr	r2, [pc, #104]	; (80002f8 <main+0x178>)
 800028e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, 50);
 8000290:	2232      	movs	r2, #50	; 0x32
 8000292:	491a      	ldr	r1, [pc, #104]	; (80002fc <main+0x17c>)
 8000294:	481a      	ldr	r0, [pc, #104]	; (8000300 <main+0x180>)
 8000296:	f001 fe16 	bl	8001ec6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <main+0x184>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <main+0x184>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f022 0204 	bic.w	r2, r2, #4
 80002a8:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, 50);
 80002aa:	2232      	movs	r2, #50	; 0x32
 80002ac:	4916      	ldr	r1, [pc, #88]	; (8000308 <main+0x188>)
 80002ae:	4817      	ldr	r0, [pc, #92]	; (800030c <main+0x18c>)
 80002b0:	f001 fe09 	bl	8001ec6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <main+0x190>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <main+0x190>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f022 0204 	bic.w	r2, r2, #4
 80002c2:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002c4:	f002 f9ad 	bl	8002622 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <main+0x148>
 80002ca:	bf00      	nop
 80002cc:	20000520 	.word	0x20000520
 80002d0:	20000524 	.word	0x20000524
 80002d4:	08005188 	.word	0x08005188
 80002d8:	2000051c 	.word	0x2000051c
 80002dc:	08005198 	.word	0x08005198
 80002e0:	2000050c 	.word	0x2000050c
 80002e4:	080051b4 	.word	0x080051b4
 80002e8:	20000510 	.word	0x20000510
 80002ec:	080051d0 	.word	0x080051d0
 80002f0:	20000514 	.word	0x20000514
 80002f4:	080051ec 	.word	0x080051ec
 80002f8:	20000518 	.word	0x20000518
 80002fc:	20000344 	.word	0x20000344
 8000300:	200003ac 	.word	0x200003ac
 8000304:	20000484 	.word	0x20000484
 8000308:	20000378 	.word	0x20000378
 800030c:	200003f4 	.word	0x200003f4
 8000310:	200004c8 	.word	0x200004c8

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f004 fe46 	bl	8004fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	2302      	movs	r3, #2
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000352:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f001 f8cf 	bl	8001500 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000368:	f000 fa44 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fb3c 	bl	8001a04 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000392:	f000 fa2f 	bl	80007f4 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	; 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <MX_USART1_UART_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d8:	f001 fca2 	bl	8001d20 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e2:	f000 fa07 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200003ac 	.word	0x200003ac
 80003f0:	40013800 	.word	0x40013800

080003f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <MX_USART2_UART_Init+0x50>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_USART2_UART_Init+0x4c>)
 800042c:	f001 fc78 	bl	8001d20 <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000436:	f000 f9dd 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200003f4 	.word	0x200003f4
 8000444:	40004400 	.word	0x40004400

08000448 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <MX_USART3_UART_Init+0x50>)
 8000450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 8000454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 800046e:	220c      	movs	r2, #12
 8000470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_USART3_UART_Init+0x4c>)
 8000480:	f001 fc4e 	bl	8001d20 <HAL_UART_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800048a:	f000 f9b3 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000043c 	.word	0x2000043c
 8000498:	40004800 	.word	0x40004800

0800049c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <MX_DMA_Init+0x48>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <MX_DMA_Init+0x48>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_DMA_Init+0x48>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2105      	movs	r1, #5
 80004be:	200f      	movs	r0, #15
 80004c0:	f000 fc75 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004c4:	200f      	movs	r0, #15
 80004c6:	f000 fc8e 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2105      	movs	r1, #5
 80004ce:	2010      	movs	r0, #16
 80004d0:	f000 fc6d 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004d4:	2010      	movs	r0, #16
 80004d6:	f000 fc86 	bl	8000de6 <HAL_NVIC_EnableIRQ>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <MX_GPIO_Init+0x58>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a13      	ldr	r2, [pc, #76]	; (8000540 <MX_GPIO_Init+0x58>)
 80004f4:	f043 0320 	orr.w	r3, r3, #32
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_GPIO_Init+0x58>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_GPIO_Init+0x58>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <MX_GPIO_Init+0x58>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_GPIO_Init+0x58>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_GPIO_Init+0x58>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <MX_GPIO_Init+0x58>)
 8000524:	f043 0308 	orr.w	r3, r3, #8
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <MX_GPIO_Init+0x58>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0308 	and.w	r3, r3, #8
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
	if(huart->Instance == USART1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <HAL_UARTEx_RxEventCallback+0x64>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d108      	bne.n	8000570 <HAL_UARTEx_RxEventCallback+0x2c>
		xSemaphoreGiveFromISR(myBinarySem01Handle, &xHigherPriorityTaskWoken);
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <HAL_UARTEx_RxEventCallback+0x68>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f107 020c 	add.w	r2, r7, #12
 8000566:	4611      	mov	r1, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f002 fc05 	bl	8002d78 <xQueueGiveFromISR>
 800056e:	e00c      	b.n	800058a <HAL_UARTEx_RxEventCallback+0x46>
	else if (huart->Instance == USART2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d107      	bne.n	800058a <HAL_UARTEx_RxEventCallback+0x46>
		xSemaphoreGiveFromISR(myBinarySem02Handle, &xHigherPriorityTaskWoken);
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x70>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f107 020c 	add.w	r2, r7, #12
 8000582:	4611      	mov	r1, r2
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fbf7 	bl	8002d78 <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d007      	beq.n	80005a0 <HAL_UARTEx_RxEventCallback+0x5c>
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_UARTEx_RxEventCallback+0x74>)
 8000592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	f3bf 8f4f 	dsb	sy
 800059c:	f3bf 8f6f 	isb	sy
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40013800 	.word	0x40013800
 80005ac:	20000520 	.word	0x20000520
 80005b0:	40004400 	.word	0x40004400
 80005b4:	20000524 	.word	0x20000524
 80005b8:	e000ed04 	.word	0xe000ed04

080005bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	uint32_t timeStart;
	uint8_t count;
  /* Infinite loop */
  for(;;)
  {
		  switch(state)
 80005c4:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <StartDefaultTask+0xbc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d02a      	beq.n	8000622 <StartDefaultTask+0x66>
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	dc4e      	bgt.n	800066e <StartDefaultTask+0xb2>
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <StartDefaultTask+0x1e>
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d010      	beq.n	80005fa <StartDefaultTask+0x3e>
 80005d8:	e049      	b.n	800066e <StartDefaultTask+0xb2>
		  {
		  case overflow:
			  timeStart = HAL_GetTick();
 80005da:	f000 fb07 	bl	8000bec <HAL_GetTick>
 80005de:	60f8      	str	r0, [r7, #12]
			  vTaskSuspend(myTask02Handle);
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <StartDefaultTask+0xc0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 f95b 	bl	80038a0 <vTaskSuspend>
			  vTaskSuspend(myTask03Handle);
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <StartDefaultTask+0xc4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f956 	bl	80038a0 <vTaskSuspend>
			  state = wait;
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <StartDefaultTask+0xbc>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
		  case wait:
			  if(HAL_GetTick() - timeStart > 1000)
 80005fa:	f000 faf7 	bl	8000bec <HAL_GetTick>
 80005fe:	4602      	mov	r2, r0
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000608:	d90b      	bls.n	8000622 <StartDefaultTask+0x66>
			  {
				  //toggle_led
				  timeStart  = HAL_GetTick();
 800060a:	f000 faef 	bl	8000bec <HAL_GetTick>
 800060e:	60f8      	str	r0, [r7, #12]
				  count++;
 8000610:	7afb      	ldrb	r3, [r7, #11]
 8000612:	3301      	adds	r3, #1
 8000614:	72fb      	strb	r3, [r7, #11]
				  if(count == 10)
 8000616:	7afb      	ldrb	r3, [r7, #11]
 8000618:	2b0a      	cmp	r3, #10
 800061a:	d102      	bne.n	8000622 <StartDefaultTask+0x66>
					  state = trans;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <StartDefaultTask+0xbc>)
 800061e:	2202      	movs	r2, #2
 8000620:	701a      	strb	r2, [r3, #0]
			  }
		  case trans:
			  count = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	72fb      	strb	r3, [r7, #11]
			  vTaskResume(myTask02Handle);
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <StartDefaultTask+0xc0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fa04 	bl	8003a38 <vTaskResume>
			  vTaskResume(myTask03Handle);
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <StartDefaultTask+0xc4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f003 f9ff 	bl	8003a38 <vTaskResume>
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, 50);
 800063a:	2232      	movs	r2, #50	; 0x32
 800063c:	4911      	ldr	r1, [pc, #68]	; (8000684 <StartDefaultTask+0xc8>)
 800063e:	4812      	ldr	r0, [pc, #72]	; (8000688 <StartDefaultTask+0xcc>)
 8000640:	f001 fc41 	bl	8001ec6 <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <StartDefaultTask+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <StartDefaultTask+0xd0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f022 0204 	bic.w	r2, r2, #4
 8000652:	601a      	str	r2, [r3, #0]

			  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, 50);
 8000654:	2232      	movs	r2, #50	; 0x32
 8000656:	490e      	ldr	r1, [pc, #56]	; (8000690 <StartDefaultTask+0xd4>)
 8000658:	480e      	ldr	r0, [pc, #56]	; (8000694 <StartDefaultTask+0xd8>)
 800065a:	f001 fc34 	bl	8001ec6 <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <StartDefaultTask+0xdc>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <StartDefaultTask+0xdc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f022 0204 	bic.w	r2, r2, #4
 800066c:	601a      	str	r2, [r3, #0]
		  }
    osDelay(1);
 800066e:	2001      	movs	r0, #1
 8000670:	f002 f82a 	bl	80026c8 <osDelay>
		  switch(state)
 8000674:	e7a6      	b.n	80005c4 <StartDefaultTask+0x8>
 8000676:	bf00      	nop
 8000678:	200003aa 	.word	0x200003aa
 800067c:	20000510 	.word	0x20000510
 8000680:	20000514 	.word	0x20000514
 8000684:	20000344 	.word	0x20000344
 8000688:	200003ac 	.word	0x200003ac
 800068c:	20000484 	.word	0x20000484
 8000690:	20000378 	.word	0x20000378
 8000694:	200003f4 	.word	0x200003f4
 8000698:	200004c8 	.word	0x200004c8

0800069c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem01Handle,2000) == pdTRUE)
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <StartTask02+0x74>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fcd1 	bl	8003054 <xQueueSemaphoreTake>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d127      	bne.n	8000708 <StartTask02+0x6c>
	  {
		  if(uxQueueMessagesWaiting(myQueue01Handle) != 0)
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <StartTask02+0x78>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fdd5 	bl	800326c <uxQueueMessagesWaiting>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <StartTask02+0x56>
		  {
			  xQueueSend(myQueue01Handle,f_recei_1,0);
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <StartTask02+0x78>)
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	2200      	movs	r2, #0
 80006d0:	4911      	ldr	r1, [pc, #68]	; (8000718 <StartTask02+0x7c>)
 80006d2:	f002 fa53 	bl	8002b7c <xQueueGenericSend>
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, 50);
 80006d6:	2232      	movs	r2, #50	; 0x32
 80006d8:	490f      	ldr	r1, [pc, #60]	; (8000718 <StartTask02+0x7c>)
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <StartTask02+0x80>)
 80006dc:	f001 fbf3 	bl	8001ec6 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <StartTask02+0x84>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <StartTask02+0x84>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f022 0204 	bic.w	r2, r2, #4
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	e00a      	b.n	8000708 <StartTask02+0x6c>
		  }
		  else
		  {
			  __HAL_DMA_DISABLE(&hdma_usart1_rx);
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <StartTask02+0x84>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <StartTask02+0x84>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f022 0201 	bic.w	r2, r2, #1
 8000700:	601a      	str	r2, [r3, #0]
			  state = overflow;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <StartTask02+0x88>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	  else
	  {

	  }

    osDelay(10);
 8000708:	200a      	movs	r0, #10
 800070a:	f001 ffdd 	bl	80026c8 <osDelay>
	  if(xSemaphoreTake(myBinarySem01Handle,2000) == pdTRUE)
 800070e:	e7c9      	b.n	80006a4 <StartTask02+0x8>
 8000710:	20000520 	.word	0x20000520
 8000714:	2000051c 	.word	0x2000051c
 8000718:	20000344 	.word	0x20000344
 800071c:	200003ac 	.word	0x200003ac
 8000720:	20000484 	.word	0x20000484
 8000724:	200003aa 	.word	0x200003aa

08000728 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem02Handle,2000) == pdTRUE)
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <StartTask03+0x74>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fc8b 	bl	8003054 <xQueueSemaphoreTake>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d127      	bne.n	8000794 <StartTask03+0x6c>
	  {
		  if(uxQueueMessagesWaiting(myQueue01Handle) != 0)
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <StartTask03+0x78>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fd8f 	bl	800326c <uxQueueMessagesWaiting>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d014      	beq.n	800077e <StartTask03+0x56>
		  {
			  xQueueSend(myQueue01Handle,f_recei_2,0);
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <StartTask03+0x78>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	2300      	movs	r3, #0
 800075a:	2200      	movs	r2, #0
 800075c:	4911      	ldr	r1, [pc, #68]	; (80007a4 <StartTask03+0x7c>)
 800075e:	f002 fa0d 	bl	8002b7c <xQueueGenericSend>
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, 50);
 8000762:	2232      	movs	r2, #50	; 0x32
 8000764:	490f      	ldr	r1, [pc, #60]	; (80007a4 <StartTask03+0x7c>)
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <StartTask03+0x80>)
 8000768:	f001 fbad 	bl	8001ec6 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <StartTask03+0x84>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <StartTask03+0x84>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0204 	bic.w	r2, r2, #4
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	e00a      	b.n	8000794 <StartTask03+0x6c>
		  }
		  else
		  {
			  __HAL_DMA_DISABLE(&hdma_usart2_rx);
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <StartTask03+0x84>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <StartTask03+0x84>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0201 	bic.w	r2, r2, #1
 800078c:	601a      	str	r2, [r3, #0]
			  state = overflow;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <StartTask03+0x88>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {

	  }
	  osDelay(10);
 8000794:	200a      	movs	r0, #10
 8000796:	f001 ff97 	bl	80026c8 <osDelay>
	  if(xSemaphoreTake(myBinarySem02Handle,2000) == pdTRUE)
 800079a:	e7c9      	b.n	8000730 <StartTask03+0x8>
 800079c:	20000524 	.word	0x20000524
 80007a0:	2000051c 	.word	0x2000051c
 80007a4:	20000378 	.word	0x20000378
 80007a8:	200003f4 	.word	0x200003f4
 80007ac:	200004c8 	.word	0x200004c8
 80007b0:	200003aa 	.word	0x200003aa

080007b4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b090      	sub	sp, #64	; 0x40
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	uint8_t data[50];
  /* Infinite loop */
  for(;;)
  {
	if(xQueueReceive(myQueue01Handle, data, 2000) == pdTRUE)
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <StartTask04+0x38>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f107 010c 	add.w	r1, r7, #12
 80007c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 fb63 	bl	8002e94 <xQueueReceive>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d107      	bne.n	80007e4 <StartTask04+0x30>
	{
		HAL_UART_Transmit(&huart3, data, 50, 1000);
 80007d4:	f107 010c 	add.w	r1, r7, #12
 80007d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007dc:	2232      	movs	r2, #50	; 0x32
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <StartTask04+0x3c>)
 80007e0:	f001 faee 	bl	8001dc0 <HAL_UART_Transmit>
	}
	osDelay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f001 ff6f 	bl	80026c8 <osDelay>
	if(xQueueReceive(myQueue01Handle, data, 2000) == pdTRUE)
 80007ea:	e7e7      	b.n	80007bc <StartTask04+0x8>
 80007ec:	2000051c 	.word	0x2000051c
 80007f0:	2000043c 	.word	0x2000043c

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_MspInit+0x4c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_MspInit+0x4c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_MspInit+0x4c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 fab6 	bl	8000dae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a79      	ldr	r2, [pc, #484]	; (8000a50 <HAL_UART_MspInit+0x200>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d158      	bne.n	8000922 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000870:	4b78      	ldr	r3, [pc, #480]	; (8000a54 <HAL_UART_MspInit+0x204>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a77      	ldr	r2, [pc, #476]	; (8000a54 <HAL_UART_MspInit+0x204>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b75      	ldr	r3, [pc, #468]	; (8000a54 <HAL_UART_MspInit+0x204>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000884:	61fb      	str	r3, [r7, #28]
 8000886:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b72      	ldr	r3, [pc, #456]	; (8000a54 <HAL_UART_MspInit+0x204>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a71      	ldr	r2, [pc, #452]	; (8000a54 <HAL_UART_MspInit+0x204>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b6f      	ldr	r3, [pc, #444]	; (8000a54 <HAL_UART_MspInit+0x204>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	4619      	mov	r1, r3
 80008b4:	4868      	ldr	r0, [pc, #416]	; (8000a58 <HAL_UART_MspInit+0x208>)
 80008b6:	f000 fc9f 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4619      	mov	r1, r3
 80008ce:	4862      	ldr	r0, [pc, #392]	; (8000a58 <HAL_UART_MspInit+0x208>)
 80008d0:	f000 fc92 	bl	80011f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008d4:	4b61      	ldr	r3, [pc, #388]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 80008d6:	4a62      	ldr	r2, [pc, #392]	; (8000a60 <HAL_UART_MspInit+0x210>)
 80008d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008da:	4b60      	ldr	r3, [pc, #384]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e0:	4b5e      	ldr	r3, [pc, #376]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e6:	4b5d      	ldr	r3, [pc, #372]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ec:	4b5b      	ldr	r3, [pc, #364]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f2:	4b5a      	ldr	r3, [pc, #360]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008f8:	4b58      	ldr	r3, [pc, #352]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008fe:	4b57      	ldr	r3, [pc, #348]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000904:	4855      	ldr	r0, [pc, #340]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 8000906:	f000 fa89 	bl	8000e1c <HAL_DMA_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000910:	f7ff ff70 	bl	80007f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a51      	ldr	r2, [pc, #324]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 8000918:	63da      	str	r2, [r3, #60]	; 0x3c
 800091a:	4a50      	ldr	r2, [pc, #320]	; (8000a5c <HAL_UART_MspInit+0x20c>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000920:	e092      	b.n	8000a48 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a4f      	ldr	r2, [pc, #316]	; (8000a64 <HAL_UART_MspInit+0x214>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d156      	bne.n	80009da <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800092c:	4b49      	ldr	r3, [pc, #292]	; (8000a54 <HAL_UART_MspInit+0x204>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	4a48      	ldr	r2, [pc, #288]	; (8000a54 <HAL_UART_MspInit+0x204>)
 8000932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000936:	61d3      	str	r3, [r2, #28]
 8000938:	4b46      	ldr	r3, [pc, #280]	; (8000a54 <HAL_UART_MspInit+0x204>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <HAL_UART_MspInit+0x204>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <HAL_UART_MspInit+0x204>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b40      	ldr	r3, [pc, #256]	; (8000a54 <HAL_UART_MspInit+0x204>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800095c:	2304      	movs	r3, #4
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4619      	mov	r1, r3
 800096e:	483a      	ldr	r0, [pc, #232]	; (8000a58 <HAL_UART_MspInit+0x208>)
 8000970:	f000 fc42 	bl	80011f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000974:	2308      	movs	r3, #8
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4619      	mov	r1, r3
 8000986:	4834      	ldr	r0, [pc, #208]	; (8000a58 <HAL_UART_MspInit+0x208>)
 8000988:	f000 fc36 	bl	80011f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800098c:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <HAL_UART_MspInit+0x218>)
 800098e:	4a37      	ldr	r2, [pc, #220]	; (8000a6c <HAL_UART_MspInit+0x21c>)
 8000990:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <HAL_UART_MspInit+0x218>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_UART_MspInit+0x218>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <HAL_UART_MspInit+0x218>)
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a4:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <HAL_UART_MspInit+0x218>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <HAL_UART_MspInit+0x218>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <HAL_UART_MspInit+0x218>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <HAL_UART_MspInit+0x218>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009bc:	482a      	ldr	r0, [pc, #168]	; (8000a68 <HAL_UART_MspInit+0x218>)
 80009be:	f000 fa2d 	bl	8000e1c <HAL_DMA_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_UART_MspInit+0x17c>
      Error_Handler();
 80009c8:	f7ff ff14 	bl	80007f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <HAL_UART_MspInit+0x218>)
 80009d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80009d2:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <HAL_UART_MspInit+0x218>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80009d8:	e036      	b.n	8000a48 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <HAL_UART_MspInit+0x220>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d131      	bne.n	8000a48 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_UART_MspInit+0x204>)
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	4a1a      	ldr	r2, [pc, #104]	; (8000a54 <HAL_UART_MspInit+0x204>)
 80009ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ee:	61d3      	str	r3, [r2, #28]
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_UART_MspInit+0x204>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_UART_MspInit+0x204>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <HAL_UART_MspInit+0x204>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_UART_MspInit+0x204>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	4619      	mov	r1, r3
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <HAL_UART_MspInit+0x224>)
 8000a2a:	f000 fbe5 	bl	80011f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4619      	mov	r1, r3
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <HAL_UART_MspInit+0x224>)
 8000a44:	f000 fbd8 	bl	80011f8 <HAL_GPIO_Init>
}
 8000a48:	bf00      	nop
 8000a4a:	3730      	adds	r7, #48	; 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40013800 	.word	0x40013800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	20000484 	.word	0x20000484
 8000a60:	40020058 	.word	0x40020058
 8000a64:	40004400 	.word	0x40004400
 8000a68:	200004c8 	.word	0x200004c8
 8000a6c:	4002006c 	.word	0x4002006c
 8000a70:	40004800 	.word	0x40004800
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa6:	f000 f88f 	bl	8000bc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000aaa:	f003 fc3f 	bl	800432c <xTaskGetSchedulerState>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d001      	beq.n	8000ab8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ab4:	f003 fff0 	bl	8004a98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <DMA1_Channel5_IRQHandler+0x10>)
 8000ac2:	f000 fa65 	bl	8000f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000484 	.word	0x20000484

08000ad0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <DMA1_Channel6_IRQHandler+0x10>)
 8000ad6:	f000 fa5b 	bl	8000f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200004c8 	.word	0x200004c8

08000ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af0:	f7ff fff8 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000af6:	490c      	ldr	r1, [pc, #48]	; (8000b28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b0c:	4c09      	ldr	r4, [pc, #36]	; (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f004 fa17 	bl	8004f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fb2f 	bl	8000180 <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b2c:	080052a4 	.word	0x080052a4
  ldr r2, =_sbss
 8000b30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b34:	20001280 	.word	0x20001280

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f923 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe52 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f93b 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f903 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000528 	.word	0x20000528

08000bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000528 	.word	0x20000528

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4906      	ldr	r1, [pc, #24]	; (8000c98 <__NVIC_EnableIRQ+0x34>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff90 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff2d 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff42 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff90 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5f 	bl	8000c9c <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff35 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffa2 	bl	8000d54 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e043      	b.n	8000eba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <HAL_DMA_Init+0xa8>)
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <HAL_DMA_Init+0xac>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	009a      	lsls	r2, r3, #2
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_DMA_Init+0xb0>)
 8000e4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	bffdfff8 	.word	0xbffdfff8
 8000ec8:	cccccccd 	.word	0xcccccccd
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_DMA_Start_IT+0x20>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e04b      	b.n	8000f88 <HAL_DMA_Start_IT+0xb8>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d13a      	bne.n	8000f7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2202      	movs	r2, #2
 8000f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f000 f937 	bl	800119c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d008      	beq.n	8000f48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 020e 	orr.w	r2, r2, #14
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e00f      	b.n	8000f68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0204 	bic.w	r2, r2, #4
 8000f56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 020a 	orr.w	r2, r2, #10
 8000f66:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0201 	orr.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e005      	b.n	8000f86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f82:	2302      	movs	r3, #2
 8000f84:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	2204      	movs	r2, #4
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d04f      	beq.n	8001058 <HAL_DMA_IRQHandler+0xc8>
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d04a      	beq.n	8001058 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0320 	and.w	r3, r3, #32
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d107      	bne.n	8000fe0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0204 	bic.w	r2, r2, #4
 8000fde:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a66      	ldr	r2, [pc, #408]	; (8001180 <HAL_DMA_IRQHandler+0x1f0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d029      	beq.n	800103e <HAL_DMA_IRQHandler+0xae>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a65      	ldr	r2, [pc, #404]	; (8001184 <HAL_DMA_IRQHandler+0x1f4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d022      	beq.n	800103a <HAL_DMA_IRQHandler+0xaa>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a63      	ldr	r2, [pc, #396]	; (8001188 <HAL_DMA_IRQHandler+0x1f8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01a      	beq.n	8001034 <HAL_DMA_IRQHandler+0xa4>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a62      	ldr	r2, [pc, #392]	; (800118c <HAL_DMA_IRQHandler+0x1fc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d012      	beq.n	800102e <HAL_DMA_IRQHandler+0x9e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a60      	ldr	r2, [pc, #384]	; (8001190 <HAL_DMA_IRQHandler+0x200>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00a      	beq.n	8001028 <HAL_DMA_IRQHandler+0x98>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5f      	ldr	r2, [pc, #380]	; (8001194 <HAL_DMA_IRQHandler+0x204>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d102      	bne.n	8001022 <HAL_DMA_IRQHandler+0x92>
 800101c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001020:	e00e      	b.n	8001040 <HAL_DMA_IRQHandler+0xb0>
 8001022:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001026:	e00b      	b.n	8001040 <HAL_DMA_IRQHandler+0xb0>
 8001028:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800102c:	e008      	b.n	8001040 <HAL_DMA_IRQHandler+0xb0>
 800102e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001032:	e005      	b.n	8001040 <HAL_DMA_IRQHandler+0xb0>
 8001034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001038:	e002      	b.n	8001040 <HAL_DMA_IRQHandler+0xb0>
 800103a:	2340      	movs	r3, #64	; 0x40
 800103c:	e000      	b.n	8001040 <HAL_DMA_IRQHandler+0xb0>
 800103e:	2304      	movs	r3, #4
 8001040:	4a55      	ldr	r2, [pc, #340]	; (8001198 <HAL_DMA_IRQHandler+0x208>)
 8001042:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 8094 	beq.w	8001176 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001056:	e08e      	b.n	8001176 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	2202      	movs	r2, #2
 800105e:	409a      	lsls	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d056      	beq.n	8001116 <HAL_DMA_IRQHandler+0x186>
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d051      	beq.n	8001116 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10b      	bne.n	8001098 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 020a 	bic.w	r2, r2, #10
 800108e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a38      	ldr	r2, [pc, #224]	; (8001180 <HAL_DMA_IRQHandler+0x1f0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d029      	beq.n	80010f6 <HAL_DMA_IRQHandler+0x166>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a37      	ldr	r2, [pc, #220]	; (8001184 <HAL_DMA_IRQHandler+0x1f4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d022      	beq.n	80010f2 <HAL_DMA_IRQHandler+0x162>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a35      	ldr	r2, [pc, #212]	; (8001188 <HAL_DMA_IRQHandler+0x1f8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01a      	beq.n	80010ec <HAL_DMA_IRQHandler+0x15c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <HAL_DMA_IRQHandler+0x1fc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d012      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x156>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a32      	ldr	r2, [pc, #200]	; (8001190 <HAL_DMA_IRQHandler+0x200>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00a      	beq.n	80010e0 <HAL_DMA_IRQHandler+0x150>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a31      	ldr	r2, [pc, #196]	; (8001194 <HAL_DMA_IRQHandler+0x204>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d102      	bne.n	80010da <HAL_DMA_IRQHandler+0x14a>
 80010d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010d8:	e00e      	b.n	80010f8 <HAL_DMA_IRQHandler+0x168>
 80010da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010de:	e00b      	b.n	80010f8 <HAL_DMA_IRQHandler+0x168>
 80010e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e4:	e008      	b.n	80010f8 <HAL_DMA_IRQHandler+0x168>
 80010e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ea:	e005      	b.n	80010f8 <HAL_DMA_IRQHandler+0x168>
 80010ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f0:	e002      	b.n	80010f8 <HAL_DMA_IRQHandler+0x168>
 80010f2:	2320      	movs	r3, #32
 80010f4:	e000      	b.n	80010f8 <HAL_DMA_IRQHandler+0x168>
 80010f6:	2302      	movs	r3, #2
 80010f8:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_DMA_IRQHandler+0x208>)
 80010fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	2b00      	cmp	r3, #0
 800110a:	d034      	beq.n	8001176 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001114:	e02f      	b.n	8001176 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	2208      	movs	r2, #8
 800111c:	409a      	lsls	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d028      	beq.n	8001178 <HAL_DMA_IRQHandler+0x1e8>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d023      	beq.n	8001178 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 020e 	bic.w	r2, r2, #14
 800113e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	4798      	blx	r3
    }
  }
  return;
 8001176:	bf00      	nop
 8001178:	bf00      	nop
}
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40020008 	.word	0x40020008
 8001184:	4002001c 	.word	0x4002001c
 8001188:	40020030 	.word	0x40020030
 800118c:	40020044 	.word	0x40020044
 8001190:	40020058 	.word	0x40020058
 8001194:	4002006c 	.word	0x4002006c
 8001198:	40020000 	.word	0x40020000

0800119c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d108      	bne.n	80011dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011da:	e007      	b.n	80011ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b08b      	sub	sp, #44	; 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120a:	e169      	b.n	80014e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800120c:	2201      	movs	r2, #1
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 8158 	bne.w	80014da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a9a      	ldr	r2, [pc, #616]	; (8001498 <HAL_GPIO_Init+0x2a0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d05e      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001234:	4a98      	ldr	r2, [pc, #608]	; (8001498 <HAL_GPIO_Init+0x2a0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d875      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800123a:	4a98      	ldr	r2, [pc, #608]	; (800149c <HAL_GPIO_Init+0x2a4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d058      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001240:	4a96      	ldr	r2, [pc, #600]	; (800149c <HAL_GPIO_Init+0x2a4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d86f      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001246:	4a96      	ldr	r2, [pc, #600]	; (80014a0 <HAL_GPIO_Init+0x2a8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d052      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 800124c:	4a94      	ldr	r2, [pc, #592]	; (80014a0 <HAL_GPIO_Init+0x2a8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d869      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001252:	4a94      	ldr	r2, [pc, #592]	; (80014a4 <HAL_GPIO_Init+0x2ac>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d04c      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001258:	4a92      	ldr	r2, [pc, #584]	; (80014a4 <HAL_GPIO_Init+0x2ac>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d863      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800125e:	4a92      	ldr	r2, [pc, #584]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d046      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001264:	4a90      	ldr	r2, [pc, #576]	; (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d85d      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800126a:	2b12      	cmp	r3, #18
 800126c:	d82a      	bhi.n	80012c4 <HAL_GPIO_Init+0xcc>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d859      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001272:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <HAL_GPIO_Init+0x80>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	080012f3 	.word	0x080012f3
 800127c:	080012cd 	.word	0x080012cd
 8001280:	080012df 	.word	0x080012df
 8001284:	08001321 	.word	0x08001321
 8001288:	08001327 	.word	0x08001327
 800128c:	08001327 	.word	0x08001327
 8001290:	08001327 	.word	0x08001327
 8001294:	08001327 	.word	0x08001327
 8001298:	08001327 	.word	0x08001327
 800129c:	08001327 	.word	0x08001327
 80012a0:	08001327 	.word	0x08001327
 80012a4:	08001327 	.word	0x08001327
 80012a8:	08001327 	.word	0x08001327
 80012ac:	08001327 	.word	0x08001327
 80012b0:	08001327 	.word	0x08001327
 80012b4:	08001327 	.word	0x08001327
 80012b8:	08001327 	.word	0x08001327
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012e9 	.word	0x080012e9
 80012c4:	4a79      	ldr	r2, [pc, #484]	; (80014ac <HAL_GPIO_Init+0x2b4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ca:	e02c      	b.n	8001326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e029      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	3304      	adds	r3, #4
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e024      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	3308      	adds	r3, #8
 80012e4:	623b      	str	r3, [r7, #32]
          break;
 80012e6:	e01f      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	330c      	adds	r3, #12
 80012ee:	623b      	str	r3, [r7, #32]
          break;
 80012f0:	e01a      	b.n	8001328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012fa:	2304      	movs	r3, #4
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e013      	b.n	8001328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001308:	2308      	movs	r3, #8
 800130a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	611a      	str	r2, [r3, #16]
          break;
 8001312:	e009      	b.n	8001328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001314:	2308      	movs	r3, #8
 8001316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	615a      	str	r2, [r3, #20]
          break;
 800131e:	e003      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x130>
          break;
 8001326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d801      	bhi.n	8001332 <HAL_GPIO_Init+0x13a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	e001      	b.n	8001336 <HAL_GPIO_Init+0x13e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3304      	adds	r3, #4
 8001336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2bff      	cmp	r3, #255	; 0xff
 800133c:	d802      	bhi.n	8001344 <HAL_GPIO_Init+0x14c>
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	e002      	b.n	800134a <HAL_GPIO_Init+0x152>
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	3b08      	subs	r3, #8
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	210f      	movs	r1, #15
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	6a39      	ldr	r1, [r7, #32]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80b1 	beq.w	80014da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001378:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <HAL_GPIO_Init+0x2b8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001390:	4a48      	ldr	r2, [pc, #288]	; (80014b4 <HAL_GPIO_Init+0x2bc>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a40      	ldr	r2, [pc, #256]	; (80014b8 <HAL_GPIO_Init+0x2c0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d013      	beq.n	80013e4 <HAL_GPIO_Init+0x1ec>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3f      	ldr	r2, [pc, #252]	; (80014bc <HAL_GPIO_Init+0x2c4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00d      	beq.n	80013e0 <HAL_GPIO_Init+0x1e8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a3e      	ldr	r2, [pc, #248]	; (80014c0 <HAL_GPIO_Init+0x2c8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d007      	beq.n	80013dc <HAL_GPIO_Init+0x1e4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3d      	ldr	r2, [pc, #244]	; (80014c4 <HAL_GPIO_Init+0x2cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d101      	bne.n	80013d8 <HAL_GPIO_Init+0x1e0>
 80013d4:	2303      	movs	r3, #3
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013d8:	2304      	movs	r3, #4
 80013da:	e004      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013dc:	2302      	movs	r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013e4:	2300      	movs	r3, #0
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013f6:	492f      	ldr	r1, [pc, #188]	; (80014b4 <HAL_GPIO_Init+0x2bc>)
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001410:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	492c      	ldr	r1, [pc, #176]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4928      	ldr	r1, [pc, #160]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001428:	4013      	ands	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4922      	ldr	r1, [pc, #136]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	491e      	ldr	r1, [pc, #120]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4918      	ldr	r1, [pc, #96]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	4914      	ldr	r1, [pc, #80]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d021      	beq.n	80014cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	490e      	ldr	r1, [pc, #56]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
 8001494:	e021      	b.n	80014da <HAL_GPIO_Init+0x2e2>
 8001496:	bf00      	nop
 8001498:	10320000 	.word	0x10320000
 800149c:	10310000 	.word	0x10310000
 80014a0:	10220000 	.word	0x10220000
 80014a4:	10210000 	.word	0x10210000
 80014a8:	10120000 	.word	0x10120000
 80014ac:	10110000 	.word	0x10110000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	40010800 	.word	0x40010800
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40011400 	.word	0x40011400
 80014c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_GPIO_Init+0x304>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4909      	ldr	r1, [pc, #36]	; (80014fc <HAL_GPIO_Init+0x304>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	3301      	adds	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f47f ae8e 	bne.w	800120c <HAL_GPIO_Init+0x14>
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	372c      	adds	r7, #44	; 0x2c
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e272      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8087 	beq.w	800162e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001520:	4b92      	ldr	r3, [pc, #584]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b04      	cmp	r3, #4
 800152a:	d00c      	beq.n	8001546 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800152c:	4b8f      	ldr	r3, [pc, #572]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b08      	cmp	r3, #8
 8001536:	d112      	bne.n	800155e <HAL_RCC_OscConfig+0x5e>
 8001538:	4b8c      	ldr	r3, [pc, #560]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001544:	d10b      	bne.n	800155e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001546:	4b89      	ldr	r3, [pc, #548]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d06c      	beq.n	800162c <HAL_RCC_OscConfig+0x12c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d168      	bne.n	800162c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e24c      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x76>
 8001568:	4b80      	ldr	r3, [pc, #512]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a7f      	ldr	r2, [pc, #508]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800156e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e02e      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x98>
 800157e:	4b7b      	ldr	r3, [pc, #492]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7a      	ldr	r2, [pc, #488]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b78      	ldr	r3, [pc, #480]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a77      	ldr	r2, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e01d      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0xbc>
 80015a2:	4b72      	ldr	r3, [pc, #456]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a71      	ldr	r2, [pc, #452]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b6f      	ldr	r3, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6e      	ldr	r2, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 80015bc:	4b6b      	ldr	r3, [pc, #428]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b68      	ldr	r3, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a67      	ldr	r2, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb06 	bl	8000bec <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fb02 	bl	8000bec <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e200      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0xe4>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff faf2 	bl	8000bec <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff faee 	bl	8000bec <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1ec      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x10c>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d063      	beq.n	8001702 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163a:	4b4c      	ldr	r3, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d11c      	bne.n	800168c <HAL_RCC_OscConfig+0x18c>
 8001652:	4b46      	ldr	r3, [pc, #280]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d116      	bne.n	800168c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x176>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e1c0      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4939      	ldr	r1, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	e03a      	b.n	8001702 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001694:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_OscConfig+0x270>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff faa7 	bl	8000bec <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff faa3 	bl	8000bec <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1a1      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4927      	ldr	r1, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_OscConfig+0x270>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fa86 	bl	8000bec <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fa82 	bl	8000bec <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e180      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d03a      	beq.n	8001784 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d019      	beq.n	800174a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff fa66 	bl	8000bec <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fa62 	bl	8000bec <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e160      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f000 face 	bl	8001ce4 <RCC_Delay>
 8001748:	e01c      	b.n	8001784 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fa4c 	bl	8000bec <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001756:	e00f      	b.n	8001778 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff fa48 	bl	8000bec <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d908      	bls.n	8001778 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e146      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	42420000 	.word	0x42420000
 8001774:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e9      	bne.n	8001758 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a6 	beq.w	80018de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001796:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10d      	bne.n	80017be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b88      	ldr	r3, [pc, #544]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a87      	ldr	r2, [pc, #540]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b85      	ldr	r3, [pc, #532]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <HAL_RCC_OscConfig+0x4c8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ca:	4b7f      	ldr	r3, [pc, #508]	; (80019c8 <HAL_RCC_OscConfig+0x4c8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7e      	ldr	r2, [pc, #504]	; (80019c8 <HAL_RCC_OscConfig+0x4c8>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa09 	bl	8000bec <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7ff fa05 	bl	8000bec <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e103      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x4c8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x312>
 8001804:	4b6f      	ldr	r3, [pc, #444]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a6e      	ldr	r2, [pc, #440]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	e02d      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x334>
 800181a:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4a69      	ldr	r2, [pc, #420]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a66      	ldr	r2, [pc, #408]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	e01c      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d10c      	bne.n	8001856 <HAL_RCC_OscConfig+0x356>
 800183c:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a60      	ldr	r2, [pc, #384]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4a5d      	ldr	r2, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6213      	str	r3, [r2, #32]
 8001854:	e00b      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001856:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b58      	ldr	r3, [pc, #352]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a57      	ldr	r2, [pc, #348]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d015      	beq.n	80018a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff f9b9 	bl	8000bec <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff f9b5 	bl	8000bec <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0b1      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ee      	beq.n	800187e <HAL_RCC_OscConfig+0x37e>
 80018a0:	e014      	b.n	80018cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7ff f9a3 	bl	8000bec <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff f99f 	bl	8000bec <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e09b      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	4b40      	ldr	r3, [pc, #256]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ee      	bne.n	80018aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d105      	bne.n	80018de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d2:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8087 	beq.w	80019f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d061      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d146      	bne.n	800198a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff f973 	bl	8000bec <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff f96f 	bl	8000bec <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e06d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d108      	bne.n	8001944 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4921      	ldr	r1, [pc, #132]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a19      	ldr	r1, [r3, #32]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	430b      	orrs	r3, r1
 8001956:	491b      	ldr	r1, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff f943 	bl	8000bec <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff f93f 	bl	8000bec <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e03d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x46a>
 8001988:	e035      	b.n	80019f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_RCC_OscConfig+0x4cc>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff f92c 	bl	8000bec <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f928 	bl	8000bec <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e026      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x498>
 80019b6:	e01e      	b.n	80019f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e019      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
 80019cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_OscConfig+0x500>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0d0      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d910      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	4965      	ldr	r1, [pc, #404]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0b8      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	494d      	ldr	r1, [pc, #308]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d040      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e073      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e06b      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4936      	ldr	r1, [pc, #216]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af4:	f7ff f87a 	bl	8000bec <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff f876 	bl	8000bec <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e053      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d210      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0207 	bic.w	r2, r3, #7
 8001b3a:	4922      	ldr	r1, [pc, #136]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e032      	b.n	8001bba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4916      	ldr	r1, [pc, #88]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b92:	f000 f821 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490a      	ldr	r1, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe ffd8 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08005210 	.word	0x08005210
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x30>
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x36>
 8001c06:	e027      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c0a:	613b      	str	r3, [r7, #16]
      break;
 8001c0c:	e027      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	0c9b      	lsrs	r3, r3, #18
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d010      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	0c5b      	lsrs	r3, r3, #17
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c3a:	fb03 f202 	mul.w	r2, r3, r2
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e004      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	613b      	str	r3, [r7, #16]
      break;
 8001c56:	e002      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c5a:	613b      	str	r3, [r7, #16]
      break;
 8001c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5e:	693b      	ldr	r3, [r7, #16]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	007a1200 	.word	0x007a1200
 8001c74:	08005228 	.word	0x08005228
 8001c78:	08005238 	.word	0x08005238
 8001c7c:	003d0900 	.word	0x003d0900

08001c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff2 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	08005220 	.word	0x08005220

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0adb      	lsrs	r3, r3, #11
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08005220 	.word	0x08005220

08001ce4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <RCC_Delay+0x34>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <RCC_Delay+0x38>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0a5b      	lsrs	r3, r3, #9
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d00:	bf00      	nop
  }
  while (Delay --);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	60fa      	str	r2, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f9      	bne.n	8001d00 <RCC_Delay+0x1c>
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	10624dd3 	.word	0x10624dd3

08001d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e042      	b.n	8001db8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe fd82 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	; 0x24
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fbb7 	bl	80024d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d16d      	bne.n	8001ebc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_UART_Transmit+0x2c>
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e066      	b.n	8001ebe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2221      	movs	r2, #33	; 0x21
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dfe:	f7fe fef5 	bl	8000bec <HAL_GetTick>
 8001e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e18:	d108      	bne.n	8001e2c <HAL_UART_Transmit+0x6c>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d104      	bne.n	8001e2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	e003      	b.n	8001e34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e34:	e02a      	b.n	8001e8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f9b6 	bl	80021b2 <UART_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e036      	b.n	8001ebe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10b      	bne.n	8001e6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	3302      	adds	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	e007      	b.n	8001e7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1cf      	bne.n	8001e36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2140      	movs	r1, #64	; 0x40
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f986 	bl	80021b2 <UART_WaitOnFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e006      	b.n	8001ebe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b08c      	sub	sp, #48	; 0x30
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d14a      	bne.n	8001f76 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e043      	b.n	8001f78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f9c4 	bl	8002290 <UART_Start_Receive_DMA>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d12c      	bne.n	8001f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d125      	bne.n	8001f6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	330c      	adds	r3, #12
 8001f3a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	e853 3f00 	ldrex	r3, [r3]
 8001f42:	617b      	str	r3, [r7, #20]
   return(result);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	330c      	adds	r3, #12
 8001f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f54:	627a      	str	r2, [r7, #36]	; 0x24
 8001f56:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f58:	6a39      	ldr	r1, [r7, #32]
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5c:	e841 2300 	strex	r3, r2, [r1]
 8001f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e5      	bne.n	8001f34 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8001f68:	e002      	b.n	8001f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8001f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f74:	e000      	b.n	8001f78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8001f76:	2302      	movs	r3, #2
  }
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b09c      	sub	sp, #112	; 0x70
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d172      	bne.n	80020b8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	e853 3f00 	ldrex	r3, [r3]
 8001fe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ff8:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ffa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ffe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002000:	e841 2300 	strex	r3, r2, [r1]
 8002004:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e5      	bne.n	8001fd8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3314      	adds	r3, #20
 8002012:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	e853 3f00 	ldrex	r3, [r3]
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	667b      	str	r3, [r7, #100]	; 0x64
 8002024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3314      	adds	r3, #20
 800202a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800202c:	647a      	str	r2, [r7, #68]	; 0x44
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002030:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002034:	e841 2300 	strex	r3, r2, [r1]
 8002038:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800203a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e5      	bne.n	800200c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3314      	adds	r3, #20
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	e853 3f00 	ldrex	r3, [r3]
 800204e:	623b      	str	r3, [r7, #32]
   return(result);
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
 8002058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3314      	adds	r3, #20
 800205e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002060:	633a      	str	r2, [r7, #48]	; 0x30
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002068:	e841 2300 	strex	r3, r2, [r1]
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e5      	bne.n	8002040 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800207c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	2b01      	cmp	r3, #1
 8002082:	d119      	bne.n	80020b8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	330c      	adds	r3, #12
 800208a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	e853 3f00 	ldrex	r3, [r3]
 8002092:	60fb      	str	r3, [r7, #12]
   return(result);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0310 	bic.w	r3, r3, #16
 800209a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	330c      	adds	r3, #12
 80020a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80020a4:	61fa      	str	r2, [r7, #28]
 80020a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a8:	69b9      	ldr	r1, [r7, #24]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	e841 2300 	strex	r3, r2, [r1]
 80020b0:	617b      	str	r3, [r7, #20]
   return(result);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e5      	bne.n	8002084 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ba:	2200      	movs	r2, #0
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d106      	bne.n	80020d4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020ca:	4619      	mov	r1, r3
 80020cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020ce:	f7fe fa39 	bl	8000544 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80020d2:	e002      	b.n	80020da <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80020d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020d6:	f7ff ff53 	bl	8001f80 <HAL_UART_RxCpltCallback>
}
 80020da:	bf00      	nop
 80020dc:	3770      	adds	r7, #112	; 0x70
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d108      	bne.n	8002110 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	b29b      	uxth	r3, r3
 8002106:	4619      	mov	r1, r3
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7fe fa1b 	bl	8000544 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800210e:	e002      	b.n	8002116 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7ff ff3e 	bl	8001f92 <HAL_UART_RxHalfCpltCallback>
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf14      	ite	ne
 800213e:	2301      	movne	r3, #1
 8002140:	2300      	moveq	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b21      	cmp	r3, #33	; 0x21
 8002150:	d108      	bne.n	8002164 <UART_DMAError+0x46>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800215e:	68b8      	ldr	r0, [r7, #8]
 8002160:	f000 f930 	bl	80023c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b22      	cmp	r3, #34	; 0x22
 8002184:	d108      	bne.n	8002198 <UART_DMAError+0x7a>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2200      	movs	r2, #0
 8002190:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002192:	68b8      	ldr	r0, [r7, #8]
 8002194:	f000 f93d 	bl	8002412 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	f043 0210 	orr.w	r2, r3, #16
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021a4:	68b8      	ldr	r0, [r7, #8]
 80021a6:	f7ff fefd 	bl	8001fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b090      	sub	sp, #64	; 0x40
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021c2:	e050      	b.n	8002266 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d04c      	beq.n	8002266 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80021d2:	f7fe fd0b 	bl	8000bec <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021de:	429a      	cmp	r2, r3
 80021e0:	d241      	bcs.n	8002266 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	330c      	adds	r3, #12
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	e853 3f00 	ldrex	r3, [r3]
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	330c      	adds	r3, #12
 8002200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002202:	637a      	str	r2, [r7, #52]	; 0x34
 8002204:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800220a:	e841 2300 	strex	r3, r2, [r1]
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1e5      	bne.n	80021e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3314      	adds	r3, #20
 800221c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	613b      	str	r3, [r7, #16]
   return(result);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3314      	adds	r3, #20
 8002234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002236:	623a      	str	r2, [r7, #32]
 8002238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	69f9      	ldr	r1, [r7, #28]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	61bb      	str	r3, [r7, #24]
   return(result);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e5      	bne.n	8002216 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e00f      	b.n	8002286 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4013      	ands	r3, r2
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	429a      	cmp	r2, r3
 8002282:	d09f      	beq.n	80021c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3740      	adds	r7, #64	; 0x40
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b098      	sub	sp, #96	; 0x60
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	4613      	mov	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	88fa      	ldrh	r2, [r7, #6]
 80022a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2222      	movs	r2, #34	; 0x22
 80022b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	4a3e      	ldr	r2, [pc, #248]	; (80023b8 <UART_Start_Receive_DMA+0x128>)
 80022be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <UART_Start_Receive_DMA+0x12c>)
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	4a3c      	ldr	r2, [pc, #240]	; (80023c0 <UART_Start_Receive_DMA+0x130>)
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	2200      	movs	r2, #0
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3304      	adds	r3, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	f7fe fdee 	bl	8000ed0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	330c      	adds	r3, #12
 8002318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800231a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800231c:	e853 3f00 	ldrex	r3, [r3]
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	65bb      	str	r3, [r7, #88]	; 0x58
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002332:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002334:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002336:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800233a:	e841 2300 	strex	r3, r2, [r1]
 800233e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e5      	bne.n	8002312 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3314      	adds	r3, #20
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	657b      	str	r3, [r7, #84]	; 0x54
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3314      	adds	r3, #20
 8002364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002366:	63ba      	str	r2, [r7, #56]	; 0x38
 8002368:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800236c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800236e:	e841 2300 	strex	r3, r2, [r1]
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e5      	bne.n	8002346 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3314      	adds	r3, #20
 8002380:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	e853 3f00 	ldrex	r3, [r3]
 8002388:	617b      	str	r3, [r7, #20]
   return(result);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002390:	653b      	str	r3, [r7, #80]	; 0x50
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3314      	adds	r3, #20
 8002398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800239a:	627a      	str	r2, [r7, #36]	; 0x24
 800239c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239e:	6a39      	ldr	r1, [r7, #32]
 80023a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a2:	e841 2300 	strex	r3, r2, [r1]
 80023a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1e5      	bne.n	800237a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3760      	adds	r7, #96	; 0x60
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	08001fb7 	.word	0x08001fb7
 80023bc:	080020e3 	.word	0x080020e3
 80023c0:	0800211f 	.word	0x0800211f

080023c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	e853 3f00 	ldrex	r3, [r3]
 80023da:	60bb      	str	r3, [r7, #8]
   return(result);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	61ba      	str	r2, [r7, #24]
 80023ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f0:	6979      	ldr	r1, [r7, #20]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	e841 2300 	strex	r3, r2, [r1]
 80023f8:	613b      	str	r3, [r7, #16]
   return(result);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e5      	bne.n	80023cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002408:	bf00      	nop
 800240a:	3724      	adds	r7, #36	; 0x24
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002412:	b480      	push	{r7}
 8002414:	b095      	sub	sp, #84	; 0x54
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	330c      	adds	r3, #12
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	e853 3f00 	ldrex	r3, [r3]
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002430:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	330c      	adds	r3, #12
 8002438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800243a:	643a      	str	r2, [r7, #64]	; 0x40
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002442:	e841 2300 	strex	r3, r2, [r1]
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e5      	bne.n	800241a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3314      	adds	r3, #20
 8002454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	e853 3f00 	ldrex	r3, [r3]
 800245c:	61fb      	str	r3, [r7, #28]
   return(result);
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3314      	adds	r3, #20
 800246c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800246e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e5      	bne.n	800244e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	2b01      	cmp	r3, #1
 8002488:	d119      	bne.n	80024be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	330c      	adds	r3, #12
 8002490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	e853 3f00 	ldrex	r3, [r3]
 8002498:	60bb      	str	r3, [r7, #8]
   return(result);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f023 0310 	bic.w	r3, r3, #16
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	330c      	adds	r3, #12
 80024a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024aa:	61ba      	str	r2, [r7, #24]
 80024ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ae:	6979      	ldr	r1, [r7, #20]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	e841 2300 	strex	r3, r2, [r1]
 80024b6:	613b      	str	r3, [r7, #16]
   return(result);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e5      	bne.n	800248a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024cc:	bf00      	nop
 80024ce:	3754      	adds	r7, #84	; 0x54
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002512:	f023 030c 	bic.w	r3, r3, #12
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <UART_SetConfig+0x114>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d103      	bne.n	8002548 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002540:	f7ff fbbc 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	e002      	b.n	800254e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002548:	f7ff fba4 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 800254c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <UART_SetConfig+0x118>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	0119      	lsls	r1, r3, #4
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009a      	lsls	r2, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fbb2 f2f3 	udiv	r2, r2, r3
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <UART_SetConfig+0x118>)
 8002586:	fba3 0302 	umull	r0, r3, r3, r2
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2064      	movs	r0, #100	; 0x64
 800258e:	fb00 f303 	mul.w	r3, r0, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	3332      	adds	r3, #50	; 0x32
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <UART_SetConfig+0x118>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a4:	4419      	add	r1, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009a      	lsls	r2, r3, #2
 80025b0:	441a      	add	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <UART_SetConfig+0x118>)
 80025be:	fba3 0302 	umull	r0, r3, r3, r2
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2064      	movs	r0, #100	; 0x64
 80025c6:	fb00 f303 	mul.w	r3, r0, r3
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	3332      	adds	r3, #50	; 0x32
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <UART_SetConfig+0x118>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	440a      	add	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40013800 	.word	0x40013800
 80025f0:	51eb851f 	.word	0x51eb851f

080025f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002606:	2b84      	cmp	r3, #132	; 0x84
 8002608:	d005      	beq.n	8002616 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800260a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	3303      	adds	r3, #3
 8002614:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002626:	f001 fa65 	bl	8003af4 <vTaskStartScheduler>
  
  return osOK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}

08002630 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af04      	add	r7, sp, #16
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <osThreadCreate+0x54>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01c      	beq.n	8002684 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685c      	ldr	r4, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681d      	ldr	r5, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691e      	ldr	r6, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ffc9 	bl	80025f4 <makeFreeRtosPriority>
 8002662:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800266c:	9202      	str	r2, [sp, #8]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	9100      	str	r1, [sp, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	4632      	mov	r2, r6
 8002676:	4629      	mov	r1, r5
 8002678:	4620      	mov	r0, r4
 800267a:	f000 ff3c 	bl	80034f6 <xTaskCreateStatic>
 800267e:	4603      	mov	r3, r0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	e01c      	b.n	80026be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685c      	ldr	r4, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002690:	b29e      	uxth	r6, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ffab 	bl	80025f4 <makeFreeRtosPriority>
 800269e:	4602      	mov	r2, r0
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	9200      	str	r2, [sp, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4632      	mov	r2, r6
 80026ac:	4629      	mov	r1, r5
 80026ae:	4620      	mov	r0, r4
 80026b0:	f000 ff7d 	bl	80035ae <xTaskCreate>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d001      	beq.n	80026be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <osDelay+0x16>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	e000      	b.n	80026e0 <osDelay+0x18>
 80026de:	2301      	movs	r3, #1
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 f8a9 	bl	8003838 <vTaskDelay>
  
  return osOK;
 80026e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00f      	beq.n	8002722 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d10a      	bne.n	800271e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2203      	movs	r2, #3
 800270e:	9200      	str	r2, [sp, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	2001      	movs	r0, #1
 8002716:	f000 f95d 	bl	80029d4 <xQueueGenericCreateStatic>
 800271a:	4603      	mov	r3, r0
 800271c:	e016      	b.n	800274c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	e014      	b.n	800274c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d110      	bne.n	800274a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002728:	2203      	movs	r2, #3
 800272a:	2100      	movs	r1, #0
 800272c:	2001      	movs	r0, #1
 800272e:	f000 f9c8 	bl	8002ac2 <xQueueGenericCreate>
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <osSemaphoreCreate+0x56>
 800273a:	2300      	movs	r3, #0
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fa1b 	bl	8002b7c <xQueueGenericSend>
      return sema;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	e000      	b.n	800274c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800274a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b085      	sub	sp, #20
 8002758:	af02      	add	r7, sp, #8
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d011      	beq.n	800278a <osMessageCreate+0x36>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2400      	movs	r4, #0
 8002780:	9400      	str	r4, [sp, #0]
 8002782:	f000 f927 	bl	80029d4 <xQueueGenericCreateStatic>
 8002786:	4603      	mov	r3, r0
 8002788:	e008      	b.n	800279c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	4619      	mov	r1, r3
 8002796:	f000 f994 	bl	8002ac2 <xQueueGenericCreate>
 800279a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd90      	pop	{r4, r7, pc}

080027a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0208 	add.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f103 0208 	add.w	r2, r3, #8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0208 	add.w	r2, r3, #8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	601a      	str	r2, [r3, #0]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d103      	bne.n	8002860 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e00c      	b.n	800287a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3308      	adds	r3, #8
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e002      	b.n	800286e <vListInsert+0x2e>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d2f6      	bcs.n	8002868 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	601a      	str	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6892      	ldr	r2, [r2, #8]
 80028c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6852      	ldr	r2, [r2, #4]
 80028d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d103      	bne.n	80028e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	1e5a      	subs	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
	...

08002904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800292e:	f002 f835 	bl	800499c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	441a      	add	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	3b01      	subs	r3, #1
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	22ff      	movs	r2, #255	; 0xff
 800297a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d114      	bne.n	80029ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01a      	beq.n	80029c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3310      	adds	r3, #16
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fb07 	bl	8003fa4 <xTaskRemoveFromEventList>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d012      	beq.n	80029c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <xQueueGenericReset+0xcc>)
 800299e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	e009      	b.n	80029c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3310      	adds	r3, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fef6 	bl	80027a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3324      	adds	r3, #36	; 0x24
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fef1 	bl	80027a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029c2:	f002 f81b 	bl	80049fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	; 0x38
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <xQueueGenericCreateStatic+0x52>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <xQueueGenericCreateStatic+0x56>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueGenericCreateStatic+0x58>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	623b      	str	r3, [r7, #32]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <xQueueGenericCreateStatic+0x7e>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <xQueueGenericCreateStatic+0x82>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueGenericCreateStatic+0x84>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	61fb      	str	r3, [r7, #28]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a72:	2348      	movs	r3, #72	; 0x48
 8002a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b48      	cmp	r3, #72	; 0x48
 8002a7a:	d00a      	beq.n	8002a92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	61bb      	str	r3, [r7, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aa4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f843 	bl	8002b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3730      	adds	r7, #48	; 0x30
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b08a      	sub	sp, #40	; 0x28
 8002ac6:	af02      	add	r7, sp, #8
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	613b      	str	r3, [r7, #16]
}
 8002ae8:	bf00      	nop
 8002aea:	e7fe      	b.n	8002aea <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e004      	b.n	8002b02 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	fb02 f303 	mul.w	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3348      	adds	r3, #72	; 0x48
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 f848 	bl	8004b9c <pvPortMalloc>
 8002b0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00f      	beq.n	8002b34 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	3348      	adds	r3, #72	; 0x48
 8002b18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b22:	79fa      	ldrb	r2, [r7, #7]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f805 	bl	8002b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b34:	69bb      	ldr	r3, [r7, #24]
	}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e002      	b.n	8002b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	69b8      	ldr	r0, [r7, #24]
 8002b70:	f7ff fec8 	bl	8002904 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	; 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueGenericSend+0x32>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <xQueueGenericSend+0x40>
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <xQueueGenericSend+0x44>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <xQueueGenericSend+0x46>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <xQueueGenericSend+0x60>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bd8:	bf00      	nop
 8002bda:	e7fe      	b.n	8002bda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d103      	bne.n	8002bea <xQueueGenericSend+0x6e>
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <xQueueGenericSend+0x72>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <xQueueGenericSend+0x74>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <xQueueGenericSend+0x8e>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	623b      	str	r3, [r7, #32]
}
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c0a:	f001 fb8f 	bl	800432c <xTaskGetSchedulerState>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <xQueueGenericSend+0x9e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <xQueueGenericSend+0xa2>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <xQueueGenericSend+0xa4>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <xQueueGenericSend+0xbe>
	__asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61fb      	str	r3, [r7, #28]
}
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c3a:	f001 feaf 	bl	800499c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <xQueueGenericSend+0xd4>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d129      	bne.n	8002ca4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c56:	f000 fb3e 	bl	80032d6 <prvCopyDataToQueue>
 8002c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 f99b 	bl	8003fa4 <xTaskRemoveFromEventList>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c74:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <xQueueGenericSend+0x1f8>)
 8002c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	e00a      	b.n	8002c9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c8c:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <xQueueGenericSend+0x1f8>)
 8002c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c9c:	f001 feae 	bl	80049fc <vPortExitCritical>
				return pdPASS;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e063      	b.n	8002d6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002caa:	f001 fea7 	bl	80049fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e05c      	b.n	8002d6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 f9d3 	bl	8004068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cc6:	f001 fe99 	bl	80049fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cca:	f000 ff7d 	bl	8003bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cce:	f001 fe65 	bl	800499c <vPortEnterCritical>
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <xQueueGenericSend+0x16c>
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d103      	bne.n	8002cfe <xQueueGenericSend+0x182>
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cfe:	f001 fe7d 	bl	80049fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d02:	1d3a      	adds	r2, r7, #4
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 f9c2 	bl	8004094 <xTaskCheckForTimeOut>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d124      	bne.n	8002d60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d18:	f000 fbd5 	bl	80034c6 <prvIsQueueFull>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	3310      	adds	r3, #16
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 f916 	bl	8003f5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d32:	f000 fb60 	bl	80033f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d36:	f000 ff55 	bl	8003be4 <xTaskResumeAll>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f af7c 	bne.w	8002c3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <xQueueGenericSend+0x1f8>)
 8002d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	e772      	b.n	8002c3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d56:	f000 fb4e 	bl	80033f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d5a:	f000 ff43 	bl	8003be4 <xTaskResumeAll>
 8002d5e:	e76c      	b.n	8002c3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d62:	f000 fb48 	bl	80033f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d66:	f000 ff3d 	bl	8003be4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d6a:	2300      	movs	r3, #0
		}
	}
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3738      	adds	r7, #56	; 0x38
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	e000ed04 	.word	0xe000ed04

08002d78 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08e      	sub	sp, #56	; 0x38
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	61fb      	str	r3, [r7, #28]
}
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <xQueueGiveFromISR+0x58>
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <xQueueGiveFromISR+0x5c>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <xQueueGiveFromISR+0x5e>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	61bb      	str	r3, [r7, #24]
}
 8002dec:	bf00      	nop
 8002dee:	e7fe      	b.n	8002dee <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002df0:	f001 fe96 	bl	8004b20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002df4:	f3ef 8211 	mrs	r2, BASEPRI
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	617a      	str	r2, [r7, #20]
 8002e0a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e0c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d22b      	bcs.n	8002e78 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d112      	bne.n	8002e62 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d016      	beq.n	8002e72 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	3324      	adds	r3, #36	; 0x24
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f8ab 	bl	8003fa4 <xTaskRemoveFromEventList>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00e      	beq.n	8002e72 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e007      	b.n	8002e72 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e66:	3301      	adds	r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	b25a      	sxtb	r2, r3
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e72:	2301      	movs	r3, #1
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
 8002e76:	e001      	b.n	8002e7c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3738      	adds	r7, #56	; 0x38
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	; 0x30
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10a      	bne.n	8002ec4 <xQueueReceive+0x30>
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	623b      	str	r3, [r7, #32]
}
 8002ec0:	bf00      	nop
 8002ec2:	e7fe      	b.n	8002ec2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <xQueueReceive+0x3e>
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <xQueueReceive+0x42>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <xQueueReceive+0x44>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <xQueueReceive+0x5e>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	61fb      	str	r3, [r7, #28]
}
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ef2:	f001 fa1b 	bl	800432c <xTaskGetSchedulerState>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <xQueueReceive+0x6e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <xQueueReceive+0x72>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <xQueueReceive+0x74>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <xQueueReceive+0x8e>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	61bb      	str	r3, [r7, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f22:	f001 fd3b 	bl	800499c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01f      	beq.n	8002f72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f36:	f000 fa38 	bl	80033aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00f      	beq.n	8002f6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	3310      	adds	r3, #16
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f001 f828 	bl	8003fa4 <xTaskRemoveFromEventList>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <xQueueReceive+0x1bc>)
 8002f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f6a:	f001 fd47 	bl	80049fc <vPortExitCritical>
				return pdPASS;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e069      	b.n	8003046 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d103      	bne.n	8002f80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f78:	f001 fd40 	bl	80049fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e062      	b.n	8003046 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f86:	f107 0310 	add.w	r3, r7, #16
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 f86c 	bl	8004068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f90:	2301      	movs	r3, #1
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f94:	f001 fd32 	bl	80049fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f98:	f000 fe16 	bl	8003bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f9c:	f001 fcfe 	bl	800499c <vPortEnterCritical>
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fa6:	b25b      	sxtb	r3, r3
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d103      	bne.n	8002fb6 <xQueueReceive+0x122>
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc2:	d103      	bne.n	8002fcc <xQueueReceive+0x138>
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fcc:	f001 fd16 	bl	80049fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fd0:	1d3a      	adds	r2, r7, #4
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 f85b 	bl	8004094 <xTaskCheckForTimeOut>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d123      	bne.n	800302c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe6:	f000 fa58 	bl	800349a <prvIsQueueEmpty>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	3324      	adds	r3, #36	; 0x24
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 ffaf 	bl	8003f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003000:	f000 f9f9 	bl	80033f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003004:	f000 fdee 	bl	8003be4 <xTaskResumeAll>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d189      	bne.n	8002f22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <xQueueReceive+0x1bc>)
 8003010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	e780      	b.n	8002f22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003022:	f000 f9e8 	bl	80033f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003026:	f000 fddd 	bl	8003be4 <xTaskResumeAll>
 800302a:	e77a      	b.n	8002f22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800302c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800302e:	f000 f9e2 	bl	80033f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003032:	f000 fdd7 	bl	8003be4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003038:	f000 fa2f 	bl	800349a <prvIsQueueEmpty>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	f43f af6f 	beq.w	8002f22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003044:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003046:	4618      	mov	r0, r3
 8003048:	3730      	adds	r7, #48	; 0x30
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	e000ed04 	.word	0xe000ed04

08003054 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003066:	2300      	movs	r3, #0
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	623b      	str	r3, [r7, #32]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	61fb      	str	r3, [r7, #28]
}
 80030a0:	bf00      	nop
 80030a2:	e7fe      	b.n	80030a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030a4:	f001 f942 	bl	800432c <xTaskGetSchedulerState>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <xQueueSemaphoreTake+0x60>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <xQueueSemaphoreTake+0x64>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <xQueueSemaphoreTake+0x66>
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	61bb      	str	r3, [r7, #24]
}
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80030d4:	f001 fc62 	bl	800499c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d024      	beq.n	800312e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	1e5a      	subs	r2, r3, #1
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80030f4:	f001 fae4 	bl	80046c0 <pvTaskIncrementMutexHeldCount>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00f      	beq.n	8003126 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	3310      	adds	r3, #16
 800310a:	4618      	mov	r0, r3
 800310c:	f000 ff4a 	bl	8003fa4 <xTaskRemoveFromEventList>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003116:	4b54      	ldr	r3, [pc, #336]	; (8003268 <xQueueSemaphoreTake+0x214>)
 8003118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003126:	f001 fc69 	bl	80049fc <vPortExitCritical>
				return pdPASS;
 800312a:	2301      	movs	r3, #1
 800312c:	e097      	b.n	800325e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	617b      	str	r3, [r7, #20]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003150:	f001 fc54 	bl	80049fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003154:	2300      	movs	r3, #0
 8003156:	e082      	b.n	800325e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	4618      	mov	r0, r3
 8003164:	f000 ff80 	bl	8004068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800316c:	f001 fc46 	bl	80049fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003170:	f000 fd2a 	bl	8003bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003174:	f001 fc12 	bl	800499c <vPortEnterCritical>
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800317e:	b25b      	sxtb	r3, r3
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d103      	bne.n	800318e <xQueueSemaphoreTake+0x13a>
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003194:	b25b      	sxtb	r3, r3
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d103      	bne.n	80031a4 <xQueueSemaphoreTake+0x150>
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a4:	f001 fc2a 	bl	80049fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031a8:	463a      	mov	r2, r7
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 ff6f 	bl	8004094 <xTaskCheckForTimeOut>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d132      	bne.n	8003222 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031be:	f000 f96c 	bl	800349a <prvIsQueueEmpty>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d026      	beq.n	8003216 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80031d0:	f001 fbe4 	bl	800499c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f8c5 	bl	8004368 <xTaskPriorityInherit>
 80031de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80031e0:	f001 fc0c 	bl	80049fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	3324      	adds	r3, #36	; 0x24
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 feb5 	bl	8003f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031f4:	f000 f8ff 	bl	80033f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031f8:	f000 fcf4 	bl	8003be4 <xTaskResumeAll>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f47f af68 	bne.w	80030d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <xQueueSemaphoreTake+0x214>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	e75e      	b.n	80030d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003218:	f000 f8ed 	bl	80033f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800321c:	f000 fce2 	bl	8003be4 <xTaskResumeAll>
 8003220:	e758      	b.n	80030d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003224:	f000 f8e7 	bl	80033f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003228:	f000 fcdc 	bl	8003be4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800322c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800322e:	f000 f934 	bl	800349a <prvIsQueueEmpty>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	f43f af4d 	beq.w	80030d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003240:	f001 fbac 	bl	800499c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003246:	f000 f82f 	bl	80032a8 <prvGetDisinheritPriorityAfterTimeout>
 800324a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003252:	4618      	mov	r0, r3
 8003254:	f001 f994 	bl	8004580 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003258:	f001 fbd0 	bl	80049fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800325c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800325e:	4618      	mov	r0, r3
 8003260:	3738      	adds	r7, #56	; 0x38
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60bb      	str	r3, [r7, #8]
}
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003290:	f001 fb84 	bl	800499c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800329a:	f001 fbaf 	bl	80049fc <vPortExitCritical>

	return uxReturn;
 800329e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1c3 0307 	rsb	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e001      	b.n	80032ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80032ca:	68fb      	ldr	r3, [r7, #12]
	}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d14d      	bne.n	8003398 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4618      	mov	r0, r3
 8003302:	f001 f8b7 	bl	8004474 <xTaskPriorityDisinherit>
 8003306:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	e043      	b.n	8003398 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d119      	bne.n	800334a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6898      	ldr	r0, [r3, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	461a      	mov	r2, r3
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	f001 fe39 	bl	8004f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	441a      	add	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d32b      	bcc.n	8003398 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	e026      	b.n	8003398 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	68d8      	ldr	r0, [r3, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	461a      	mov	r2, r3
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	f001 fe1f 	bl	8004f98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	425b      	negs	r3, r3
 8003364:	441a      	add	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d207      	bcs.n	8003386 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	425b      	negs	r3, r3
 8003380:	441a      	add	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d105      	bne.n	8003398 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	3b01      	subs	r3, #1
 8003396:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033a0:	697b      	ldr	r3, [r7, #20]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d018      	beq.n	80033ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d303      	bcc.n	80033de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68d9      	ldr	r1, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	461a      	mov	r2, r3
 80033e8:	6838      	ldr	r0, [r7, #0]
 80033ea:	f001 fdd5 	bl	8004f98 <memcpy>
	}
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033fe:	f001 facd 	bl	800499c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003408:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800340a:	e011      	b.n	8003430 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b00      	cmp	r3, #0
 8003412:	d012      	beq.n	800343a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3324      	adds	r3, #36	; 0x24
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fdc3 	bl	8003fa4 <xTaskRemoveFromEventList>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003424:	f000 fe98 	bl	8004158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	3b01      	subs	r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	dce9      	bgt.n	800340c <prvUnlockQueue+0x16>
 8003438:	e000      	b.n	800343c <prvUnlockQueue+0x46>
					break;
 800343a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	22ff      	movs	r2, #255	; 0xff
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003444:	f001 fada 	bl	80049fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003448:	f001 faa8 	bl	800499c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003452:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003454:	e011      	b.n	800347a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d012      	beq.n	8003484 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3310      	adds	r3, #16
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fd9e 	bl	8003fa4 <xTaskRemoveFromEventList>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800346e:	f000 fe73 	bl	8004158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003472:	7bbb      	ldrb	r3, [r7, #14]
 8003474:	3b01      	subs	r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800347a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800347e:	2b00      	cmp	r3, #0
 8003480:	dce9      	bgt.n	8003456 <prvUnlockQueue+0x60>
 8003482:	e000      	b.n	8003486 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003484:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	22ff      	movs	r2, #255	; 0xff
 800348a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800348e:	f001 fab5 	bl	80049fc <vPortExitCritical>
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034a2:	f001 fa7b 	bl	800499c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e001      	b.n	80034b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034b8:	f001 faa0 	bl	80049fc <vPortExitCritical>

	return xReturn;
 80034bc:	68fb      	ldr	r3, [r7, #12]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034ce:	f001 fa65 	bl	800499c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	429a      	cmp	r2, r3
 80034dc:	d102      	bne.n	80034e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034de:	2301      	movs	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e001      	b.n	80034e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034e8:	f001 fa88 	bl	80049fc <vPortExitCritical>

	return xReturn;
 80034ec:	68fb      	ldr	r3, [r7, #12]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b08e      	sub	sp, #56	; 0x38
 80034fa:	af04      	add	r7, sp, #16
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <xTaskCreateStatic+0x2a>
	__asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	623b      	str	r3, [r7, #32]
}
 800351c:	bf00      	nop
 800351e:	e7fe      	b.n	800351e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <xTaskCreateStatic+0x46>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	61fb      	str	r3, [r7, #28]
}
 8003538:	bf00      	nop
 800353a:	e7fe      	b.n	800353a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800353c:	23b4      	movs	r3, #180	; 0xb4
 800353e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2bb4      	cmp	r3, #180	; 0xb4
 8003544:	d00a      	beq.n	800355c <xTaskCreateStatic+0x66>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	61bb      	str	r3, [r7, #24]
}
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01e      	beq.n	80035a0 <xTaskCreateStatic+0xaa>
 8003562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01b      	beq.n	80035a0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003570:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	2202      	movs	r2, #2
 8003576:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800357a:	2300      	movs	r3, #0
 800357c:	9303      	str	r3, [sp, #12]
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	9302      	str	r3, [sp, #8]
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f850 	bl	8003638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800359a:	f000 f8e3 	bl	8003764 <prvAddNewTaskToReadyList>
 800359e:	e001      	b.n	80035a4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035a4:	697b      	ldr	r3, [r7, #20]
	}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3728      	adds	r7, #40	; 0x28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b08c      	sub	sp, #48	; 0x30
 80035b2:	af04      	add	r7, sp, #16
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 faea 	bl	8004b9c <pvPortMalloc>
 80035c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035d0:	20b4      	movs	r0, #180	; 0xb4
 80035d2:	f001 fae3 	bl	8004b9c <pvPortMalloc>
 80035d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
 80035e4:	e005      	b.n	80035f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f001 fb9c 	bl	8004d24 <vPortFree>
 80035ec:	e001      	b.n	80035f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d017      	beq.n	8003628 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	2300      	movs	r3, #0
 8003604:	9303      	str	r3, [sp, #12]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	9302      	str	r3, [sp, #8]
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f80e 	bl	8003638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800361c:	69f8      	ldr	r0, [r7, #28]
 800361e:	f000 f8a1 	bl	8003764 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003622:	2301      	movs	r3, #1
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	e002      	b.n	800362e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
 800362c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800362e:	69bb      	ldr	r3, [r7, #24]
	}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003650:	3b01      	subs	r3, #1
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <prvInitialiseNewTask+0x48>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	617b      	str	r3, [r7, #20]
}
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	e012      	b.n	80036ac <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	7819      	ldrb	r1, [r3, #0]
 800368e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	3334      	adds	r3, #52	; 0x34
 8003696:	460a      	mov	r2, r1
 8003698:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3301      	adds	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	d9e9      	bls.n	8003686 <prvInitialiseNewTask+0x4e>
 80036b2:	e000      	b.n	80036b6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80036b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d901      	bls.n	80036c8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036c4:	2306      	movs	r3, #6
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	3304      	adds	r3, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f87f 	bl	80027e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	3318      	adds	r3, #24
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff f87a 	bl	80027e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	f1c3 0207 	rsb	r2, r3, #7
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	2200      	movs	r2, #0
 8003710:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	334c      	adds	r3, #76	; 0x4c
 8003718:	2260      	movs	r2, #96	; 0x60
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fc49 	bl	8004fb4 <memset>
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <prvInitialiseNewTask+0x120>)
 8003726:	651a      	str	r2, [r3, #80]	; 0x50
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	4a0c      	ldr	r2, [pc, #48]	; (800375c <prvInitialiseNewTask+0x124>)
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <prvInitialiseNewTask+0x128>)
 8003732:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	69b8      	ldr	r0, [r7, #24]
 800373a:	f001 f83b 	bl	80047b4 <pxPortInitialiseStack>
 800373e:	4602      	mov	r2, r0
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003750:	bf00      	nop
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	0800525c 	.word	0x0800525c
 800375c:	0800527c 	.word	0x0800527c
 8003760:	0800523c 	.word	0x0800523c

08003764 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800376c:	f001 f916 	bl	800499c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003770:	4b2a      	ldr	r3, [pc, #168]	; (800381c <prvAddNewTaskToReadyList+0xb8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	4a29      	ldr	r2, [pc, #164]	; (800381c <prvAddNewTaskToReadyList+0xb8>)
 8003778:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <prvAddNewTaskToReadyList+0xbc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003782:	4a27      	ldr	r2, [pc, #156]	; (8003820 <prvAddNewTaskToReadyList+0xbc>)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <prvAddNewTaskToReadyList+0xb8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d110      	bne.n	80037b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003790:	f000 fd06 	bl	80041a0 <prvInitialiseTaskLists>
 8003794:	e00d      	b.n	80037b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003796:	4b23      	ldr	r3, [pc, #140]	; (8003824 <prvAddNewTaskToReadyList+0xc0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <prvAddNewTaskToReadyList+0xbc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d802      	bhi.n	80037b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037ac:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <prvAddNewTaskToReadyList+0xbc>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <prvAddNewTaskToReadyList+0xc4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <prvAddNewTaskToReadyList+0xc4>)
 80037ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	2201      	movs	r2, #1
 80037c2:	409a      	lsls	r2, r3
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <prvAddNewTaskToReadyList+0xc8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	4a18      	ldr	r2, [pc, #96]	; (800382c <prvAddNewTaskToReadyList+0xc8>)
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <prvAddNewTaskToReadyList+0xcc>)
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7ff f808 	bl	80027fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037ea:	f001 f907 	bl	80049fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <prvAddNewTaskToReadyList+0xc0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <prvAddNewTaskToReadyList+0xbc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	429a      	cmp	r2, r3
 8003802:	d207      	bcs.n	8003814 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <prvAddNewTaskToReadyList+0xd0>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	2000062c 	.word	0x2000062c
 8003820:	2000052c 	.word	0x2000052c
 8003824:	20000638 	.word	0x20000638
 8003828:	20000648 	.word	0x20000648
 800382c:	20000634 	.word	0x20000634
 8003830:	20000530 	.word	0x20000530
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d017      	beq.n	800387a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <vTaskDelay+0x60>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <vTaskDelay+0x30>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	60bb      	str	r3, [r7, #8]
}
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003868:	f000 f9ae 	bl	8003bc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800386c:	2100      	movs	r1, #0
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 ff3a 	bl	80046e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003874:	f000 f9b6 	bl	8003be4 <xTaskResumeAll>
 8003878:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <vTaskDelay+0x64>)
 8003882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000654 	.word	0x20000654
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80038a8:	f001 f878 	bl	800499c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <vTaskSuspend+0x18>
 80038b2:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <vTaskSuspend+0x104>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	e000      	b.n	80038ba <vTaskSuspend+0x1a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3304      	adds	r3, #4
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fff5 	bl	80028b0 <uxListRemove>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d115      	bne.n	80038f8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	4935      	ldr	r1, [pc, #212]	; (80039a8 <vTaskSuspend+0x108>)
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <vTaskSuspend+0x58>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	2201      	movs	r2, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43da      	mvns	r2, r3
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <vTaskSuspend+0x10c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4013      	ands	r3, r2
 80038f4:	4a2d      	ldr	r2, [pc, #180]	; (80039ac <vTaskSuspend+0x10c>)
 80038f6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3318      	adds	r3, #24
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe ffd3 	bl	80028b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4827      	ldr	r0, [pc, #156]	; (80039b0 <vTaskSuspend+0x110>)
 8003912:	f7fe ff72 	bl	80027fa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d103      	bne.n	800392a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800392a:	f001 f867 	bl	80049fc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800392e:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <vTaskSuspend+0x114>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003936:	f001 f831 	bl	800499c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800393a:	f000 fcd3 	bl	80042e4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800393e:	f001 f85d 	bl	80049fc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <vTaskSuspend+0x104>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	429a      	cmp	r2, r3
 800394a:	d127      	bne.n	800399c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <vTaskSuspend+0x114>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d017      	beq.n	8003984 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003954:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <vTaskSuspend+0x118>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <vTaskSuspend+0xd2>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	60bb      	str	r3, [r7, #8]
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <vTaskSuspend+0x11c>)
 8003974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003982:	e00b      	b.n	800399c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <vTaskSuspend+0x110>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <vTaskSuspend+0x120>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d103      	bne.n	8003998 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <vTaskSuspend+0x104>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
	}
 8003996:	e001      	b.n	800399c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003998:	f000 fa7e 	bl	8003e98 <vTaskSwitchContext>
	}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	2000052c 	.word	0x2000052c
 80039a8:	20000530 	.word	0x20000530
 80039ac:	20000634 	.word	0x20000634
 80039b0:	20000618 	.word	0x20000618
 80039b4:	20000638 	.word	0x20000638
 80039b8:	20000654 	.word	0x20000654
 80039bc:	e000ed04 	.word	0xe000ed04
 80039c0:	2000062c 	.word	0x2000062c

080039c4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	60fb      	str	r3, [r7, #12]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <prvTaskIsTaskSuspended+0x6c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <prvTaskIsTaskSuspended+0x3a>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <prvTaskIsTaskSuspended+0x3c>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00f      	beq.n	8003a24 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <prvTaskIsTaskSuspended+0x70>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00a      	beq.n	8003a24 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <prvTaskIsTaskSuspended+0x56>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <prvTaskIsTaskSuspended+0x58>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a24:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a26:	4618      	mov	r0, r3
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	20000618 	.word	0x20000618
 8003a34:	200005ec 	.word	0x200005ec

08003a38 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <vTaskResume+0x28>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	60bb      	str	r3, [r7, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d039      	beq.n	8003ada <vTaskResume+0xa2>
 8003a66:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <vTaskResume+0xac>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d034      	beq.n	8003ada <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003a70:	f000 ff94 	bl	800499c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff ffa5 	bl	80039c4 <prvTaskIsTaskSuspended>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02a      	beq.n	8003ad6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe ff13 	bl	80028b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	2201      	movs	r2, #1
 8003a90:	409a      	lsls	r2, r3
 8003a92:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <vTaskResume+0xb0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <vTaskResume+0xb0>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4a10      	ldr	r2, [pc, #64]	; (8003aec <vTaskResume+0xb4>)
 8003aaa:	441a      	add	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7fe fea1 	bl	80027fa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <vTaskResume+0xac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d307      	bcc.n	8003ad6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <vTaskResume+0xb8>)
 8003ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003ad6:	f000 ff91 	bl	80049fc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000052c 	.word	0x2000052c
 8003ae8:	20000634 	.word	0x20000634
 8003aec:	20000530 	.word	0x20000530
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b02:	463a      	mov	r2, r7
 8003b04:	1d39      	adds	r1, r7, #4
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fc fb20 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	9202      	str	r2, [sp, #8]
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	460a      	mov	r2, r1
 8003b22:	4921      	ldr	r1, [pc, #132]	; (8003ba8 <vTaskStartScheduler+0xb4>)
 8003b24:	4821      	ldr	r0, [pc, #132]	; (8003bac <vTaskStartScheduler+0xb8>)
 8003b26:	f7ff fce6 	bl	80034f6 <xTaskCreateStatic>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <vTaskStartScheduler+0xbc>)
 8003b2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <vTaskStartScheduler+0xbc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e001      	b.n	8003b42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d11b      	bne.n	8003b80 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	613b      	str	r3, [r7, #16]
}
 8003b5a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <vTaskStartScheduler+0xc0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	334c      	adds	r3, #76	; 0x4c
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <vTaskStartScheduler+0xc4>)
 8003b64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <vTaskStartScheduler+0xc8>)
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <vTaskStartScheduler+0xcc>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <vTaskStartScheduler+0xd0>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b7a:	f000 fe9d 	bl	80048b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b7e:	e00e      	b.n	8003b9e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d10a      	bne.n	8003b9e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	60fb      	str	r3, [r7, #12]
}
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <vTaskStartScheduler+0xa8>
}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08005208 	.word	0x08005208
 8003bac:	08004171 	.word	0x08004171
 8003bb0:	20000650 	.word	0x20000650
 8003bb4:	2000052c 	.word	0x2000052c
 8003bb8:	20000010 	.word	0x20000010
 8003bbc:	2000064c 	.word	0x2000064c
 8003bc0:	20000638 	.word	0x20000638
 8003bc4:	20000630 	.word	0x20000630

08003bc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <vTaskSuspendAll+0x18>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <vTaskSuspendAll+0x18>)
 8003bd4:	6013      	str	r3, [r2, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000654 	.word	0x20000654

08003be4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <xTaskResumeAll+0x114>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <xTaskResumeAll+0x2c>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c10:	f000 fec4 	bl	800499c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <xTaskResumeAll+0x114>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	4a37      	ldr	r2, [pc, #220]	; (8003cf8 <xTaskResumeAll+0x114>)
 8003c1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1e:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <xTaskResumeAll+0x114>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d161      	bne.n	8003cea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c26:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <xTaskResumeAll+0x118>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d05d      	beq.n	8003cea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c2e:	e02e      	b.n	8003c8e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c30:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <xTaskResumeAll+0x11c>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3318      	adds	r3, #24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fe37 	bl	80028b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fe32 	bl	80028b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <xTaskResumeAll+0x120>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <xTaskResumeAll+0x120>)
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <xTaskResumeAll+0x124>)
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7fe fdc0 	bl	80027fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7e:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <xTaskResumeAll+0x128>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <xTaskResumeAll+0x12c>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <xTaskResumeAll+0x11c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1cc      	bne.n	8003c30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c9c:	f000 fb22 	bl	80042e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <xTaskResumeAll+0x130>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cac:	f000 f836 	bl	8003d1c <xTaskIncrementTick>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <xTaskResumeAll+0x12c>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f1      	bne.n	8003cac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <xTaskResumeAll+0x130>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <xTaskResumeAll+0x12c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <xTaskResumeAll+0x134>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cea:	f000 fe87 	bl	80049fc <vPortExitCritical>

	return xAlreadyYielded;
 8003cee:	68bb      	ldr	r3, [r7, #8]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000654 	.word	0x20000654
 8003cfc:	2000062c 	.word	0x2000062c
 8003d00:	200005ec 	.word	0x200005ec
 8003d04:	20000634 	.word	0x20000634
 8003d08:	20000530 	.word	0x20000530
 8003d0c:	2000052c 	.word	0x2000052c
 8003d10:	20000640 	.word	0x20000640
 8003d14:	2000063c 	.word	0x2000063c
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <xTaskIncrementTick+0x150>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 808d 	bne.w	8003e4a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d30:	4b4f      	ldr	r3, [pc, #316]	; (8003e70 <xTaskIncrementTick+0x154>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d38:	4a4d      	ldr	r2, [pc, #308]	; (8003e70 <xTaskIncrementTick+0x154>)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d120      	bne.n	8003d86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d44:	4b4b      	ldr	r3, [pc, #300]	; (8003e74 <xTaskIncrementTick+0x158>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	603b      	str	r3, [r7, #0]
}
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <xTaskIncrementTick+0x46>
 8003d64:	4b43      	ldr	r3, [pc, #268]	; (8003e74 <xTaskIncrementTick+0x158>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <xTaskIncrementTick+0x15c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a41      	ldr	r2, [pc, #260]	; (8003e74 <xTaskIncrementTick+0x158>)
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4a41      	ldr	r2, [pc, #260]	; (8003e78 <xTaskIncrementTick+0x15c>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <xTaskIncrementTick+0x160>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	4a3f      	ldr	r2, [pc, #252]	; (8003e7c <xTaskIncrementTick+0x160>)
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	f000 faaf 	bl	80042e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <xTaskIncrementTick+0x164>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d34d      	bcc.n	8003e2c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d90:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <xTaskIncrementTick+0x158>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <xTaskIncrementTick+0x82>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <xTaskIncrementTick+0x84>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da4:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <xTaskIncrementTick+0x164>)
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295
 8003daa:	601a      	str	r2, [r3, #0]
					break;
 8003dac:	e03e      	b.n	8003e2c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <xTaskIncrementTick+0x158>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d203      	bcs.n	8003dce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dc6:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <xTaskIncrementTick+0x164>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6013      	str	r3, [r2, #0]
						break;
 8003dcc:	e02e      	b.n	8003e2c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fd6c 	bl	80028b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3318      	adds	r3, #24
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fd63 	bl	80028b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	2201      	movs	r2, #1
 8003df0:	409a      	lsls	r2, r3
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <xTaskIncrementTick+0x168>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <xTaskIncrementTick+0x168>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <xTaskIncrementTick+0x16c>)
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7fe fcf1 	bl	80027fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <xTaskIncrementTick+0x170>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3b4      	bcc.n	8003d90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e26:	2301      	movs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e2a:	e7b1      	b.n	8003d90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <xTaskIncrementTick+0x170>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	4915      	ldr	r1, [pc, #84]	; (8003e88 <xTaskIncrementTick+0x16c>)
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d907      	bls.n	8003e54 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	e004      	b.n	8003e54 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <xTaskIncrementTick+0x174>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <xTaskIncrementTick+0x174>)
 8003e52:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <xTaskIncrementTick+0x178>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e60:	697b      	ldr	r3, [r7, #20]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000654 	.word	0x20000654
 8003e70:	20000630 	.word	0x20000630
 8003e74:	200005e4 	.word	0x200005e4
 8003e78:	200005e8 	.word	0x200005e8
 8003e7c:	20000644 	.word	0x20000644
 8003e80:	2000064c 	.word	0x2000064c
 8003e84:	20000634 	.word	0x20000634
 8003e88:	20000530 	.word	0x20000530
 8003e8c:	2000052c 	.word	0x2000052c
 8003e90:	2000063c 	.word	0x2000063c
 8003e94:	20000640 	.word	0x20000640

08003e98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <vTaskSwitchContext+0xac>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <vTaskSwitchContext+0xb0>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003eac:	e044      	b.n	8003f38 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <vTaskSwitchContext+0xb0>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <vTaskSwitchContext+0xb4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ec2:	7afb      	ldrb	r3, [r7, #11]
 8003ec4:	f1c3 031f 	rsb	r3, r3, #31
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	4921      	ldr	r1, [pc, #132]	; (8003f50 <vTaskSwitchContext+0xb8>)
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	607b      	str	r3, [r7, #4]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <vTaskSwitchContext+0x5a>
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <vTaskSwitchContext+0xb8>)
 8003f00:	4413      	add	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	3308      	adds	r3, #8
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d104      	bne.n	8003f24 <vTaskSwitchContext+0x8c>
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <vTaskSwitchContext+0xbc>)
 8003f2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <vTaskSwitchContext+0xbc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	334c      	adds	r3, #76	; 0x4c
 8003f34:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <vTaskSwitchContext+0xc0>)
 8003f36:	6013      	str	r3, [r2, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000654 	.word	0x20000654
 8003f48:	20000640 	.word	0x20000640
 8003f4c:	20000634 	.word	0x20000634
 8003f50:	20000530 	.word	0x20000530
 8003f54:	2000052c 	.word	0x2000052c
 8003f58:	20000010 	.word	0x20000010

08003f5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	60fb      	str	r3, [r7, #12]
}
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <vTaskPlaceOnEventList+0x44>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3318      	adds	r3, #24
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fe fc58 	bl	8002840 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f90:	2101      	movs	r1, #1
 8003f92:	6838      	ldr	r0, [r7, #0]
 8003f94:	f000 fba8 	bl	80046e8 <prvAddCurrentTaskToDelayedList>
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000052c 	.word	0x2000052c

08003fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60fb      	str	r3, [r7, #12]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fc6b 	bl	80028b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fda:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <xTaskRemoveFromEventList+0xac>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11c      	bne.n	800401c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fc62 	bl	80028b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	4b17      	ldr	r3, [pc, #92]	; (8004054 <xTaskRemoveFromEventList+0xb0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <xTaskRemoveFromEventList+0xb0>)
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <xTaskRemoveFromEventList+0xb4>)
 800400c:	441a      	add	r2, r3
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7fe fbf0 	bl	80027fa <vListInsertEnd>
 800401a:	e005      	b.n	8004028 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	3318      	adds	r3, #24
 8004020:	4619      	mov	r1, r3
 8004022:	480e      	ldr	r0, [pc, #56]	; (800405c <xTaskRemoveFromEventList+0xb8>)
 8004024:	f7fe fbe9 	bl	80027fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <xTaskRemoveFromEventList+0xbc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	429a      	cmp	r2, r3
 8004034:	d905      	bls.n	8004042 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004036:	2301      	movs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <xTaskRemoveFromEventList+0xc0>)
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e001      	b.n	8004046 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004046:	697b      	ldr	r3, [r7, #20]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000654 	.word	0x20000654
 8004054:	20000634 	.word	0x20000634
 8004058:	20000530 	.word	0x20000530
 800405c:	200005ec 	.word	0x200005ec
 8004060:	2000052c 	.word	0x2000052c
 8004064:	20000640 	.word	0x20000640

08004068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <vTaskInternalSetTimeOutState+0x24>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <vTaskInternalSetTimeOutState+0x28>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	605a      	str	r2, [r3, #4]
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000644 	.word	0x20000644
 8004090:	20000630 	.word	0x20000630

08004094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	613b      	str	r3, [r7, #16]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80040d6:	f000 fc61 	bl	800499c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040da:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <xTaskCheckForTimeOut+0xbc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d102      	bne.n	80040fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	e023      	b.n	8004142 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <xTaskCheckForTimeOut+0xc0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d007      	beq.n	8004116 <xTaskCheckForTimeOut+0x82>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d302      	bcc.n	8004116 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004110:	2301      	movs	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	e015      	b.n	8004142 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	429a      	cmp	r2, r3
 800411e:	d20b      	bcs.n	8004138 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff9b 	bl	8004068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	e004      	b.n	8004142 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004142:	f000 fc5b 	bl	80049fc <vPortExitCritical>

	return xReturn;
 8004146:	69fb      	ldr	r3, [r7, #28]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000630 	.word	0x20000630
 8004154:	20000644 	.word	0x20000644

08004158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <vTaskMissedYield+0x14>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
}
 8004162:	bf00      	nop
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000640 	.word	0x20000640

08004170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004178:	f000 f852 	bl	8004220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <prvIdleTask+0x28>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d9f9      	bls.n	8004178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <prvIdleTask+0x2c>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004194:	e7f0      	b.n	8004178 <prvIdleTask+0x8>
 8004196:	bf00      	nop
 8004198:	20000530 	.word	0x20000530
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a6:	2300      	movs	r3, #0
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	e00c      	b.n	80041c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <prvInitialiseTaskLists+0x60>)
 80041b8:	4413      	add	r3, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe faf2 	bl	80027a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3301      	adds	r3, #1
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b06      	cmp	r3, #6
 80041ca:	d9ef      	bls.n	80041ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <prvInitialiseTaskLists+0x64>)
 80041ce:	f7fe fae9 	bl	80027a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041d2:	480d      	ldr	r0, [pc, #52]	; (8004208 <prvInitialiseTaskLists+0x68>)
 80041d4:	f7fe fae6 	bl	80027a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041d8:	480c      	ldr	r0, [pc, #48]	; (800420c <prvInitialiseTaskLists+0x6c>)
 80041da:	f7fe fae3 	bl	80027a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041de:	480c      	ldr	r0, [pc, #48]	; (8004210 <prvInitialiseTaskLists+0x70>)
 80041e0:	f7fe fae0 	bl	80027a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041e4:	480b      	ldr	r0, [pc, #44]	; (8004214 <prvInitialiseTaskLists+0x74>)
 80041e6:	f7fe fadd 	bl	80027a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <prvInitialiseTaskLists+0x78>)
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <prvInitialiseTaskLists+0x64>)
 80041ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <prvInitialiseTaskLists+0x7c>)
 80041f2:	4a05      	ldr	r2, [pc, #20]	; (8004208 <prvInitialiseTaskLists+0x68>)
 80041f4:	601a      	str	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000530 	.word	0x20000530
 8004204:	200005bc 	.word	0x200005bc
 8004208:	200005d0 	.word	0x200005d0
 800420c:	200005ec 	.word	0x200005ec
 8004210:	20000600 	.word	0x20000600
 8004214:	20000618 	.word	0x20000618
 8004218:	200005e4 	.word	0x200005e4
 800421c:	200005e8 	.word	0x200005e8

08004220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004226:	e019      	b.n	800425c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004228:	f000 fbb8 	bl	800499c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <prvCheckTasksWaitingTermination+0x50>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fb39 	bl	80028b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <prvCheckTasksWaitingTermination+0x54>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3b01      	subs	r3, #1
 8004244:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <prvCheckTasksWaitingTermination+0x54>)
 8004246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <prvCheckTasksWaitingTermination+0x58>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3b01      	subs	r3, #1
 800424e:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <prvCheckTasksWaitingTermination+0x58>)
 8004250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004252:	f000 fbd3 	bl	80049fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f810 	bl	800427c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <prvCheckTasksWaitingTermination+0x58>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e1      	bne.n	8004228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000600 	.word	0x20000600
 8004274:	2000062c 	.word	0x2000062c
 8004278:	20000614 	.word	0x20000614

0800427c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	334c      	adds	r3, #76	; 0x4c
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fea9 	bl	8004fe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d108      	bne.n	80042aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fd41 	bl	8004d24 <vPortFree>
				vPortFree( pxTCB );
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fd3e 	bl	8004d24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042a8:	e018      	b.n	80042dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d103      	bne.n	80042bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fd35 	bl	8004d24 <vPortFree>
	}
 80042ba:	e00f      	b.n	80042dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d00a      	beq.n	80042dc <prvDeleteTCB+0x60>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60fb      	str	r3, [r7, #12]
}
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <prvDeleteTCB+0x5e>
	}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <prvResetNextTaskUnblockTime+0x40>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <prvResetNextTaskUnblockTime+0x14>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <prvResetNextTaskUnblockTime+0x16>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <prvResetNextTaskUnblockTime+0x44>)
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004306:	e008      	b.n	800431a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <prvResetNextTaskUnblockTime+0x40>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4a04      	ldr	r2, [pc, #16]	; (8004328 <prvResetNextTaskUnblockTime+0x44>)
 8004318:	6013      	str	r3, [r2, #0]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	200005e4 	.word	0x200005e4
 8004328:	2000064c 	.word	0x2000064c

0800432c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <xTaskGetSchedulerState+0x34>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800433a:	2301      	movs	r3, #1
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	e008      	b.n	8004352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <xTaskGetSchedulerState+0x38>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004348:	2302      	movs	r3, #2
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e001      	b.n	8004352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004352:	687b      	ldr	r3, [r7, #4]
	}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000638 	.word	0x20000638
 8004364:	20000654 	.word	0x20000654

08004368 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d06e      	beq.n	800445c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004382:	4b39      	ldr	r3, [pc, #228]	; (8004468 <xTaskPriorityInherit+0x100>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	429a      	cmp	r2, r3
 800438a:	d25e      	bcs.n	800444a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	db06      	blt.n	80043a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004394:	4b34      	ldr	r3, [pc, #208]	; (8004468 <xTaskPriorityInherit+0x100>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f1c3 0207 	rsb	r2, r3, #7
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6959      	ldr	r1, [r3, #20]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4a2e      	ldr	r2, [pc, #184]	; (800446c <xTaskPriorityInherit+0x104>)
 80043b4:	4413      	add	r3, r2
 80043b6:	4299      	cmp	r1, r3
 80043b8:	d101      	bne.n	80043be <xTaskPriorityInherit+0x56>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xTaskPriorityInherit+0x58>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d03a      	beq.n	800443a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fa71 	bl	80028b0 <uxListRemove>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d115      	bne.n	8004400 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4924      	ldr	r1, [pc, #144]	; (800446c <xTaskPriorityInherit+0x104>)
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <xTaskPriorityInherit+0x98>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	2201      	movs	r2, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43da      	mvns	r2, r3
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <xTaskPriorityInherit+0x108>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4013      	ands	r3, r2
 80043fc:	4a1c      	ldr	r2, [pc, #112]	; (8004470 <xTaskPriorityInherit+0x108>)
 80043fe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004400:	4b19      	ldr	r3, [pc, #100]	; (8004468 <xTaskPriorityInherit+0x100>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	2201      	movs	r2, #1
 8004410:	409a      	lsls	r2, r3
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <xTaskPriorityInherit+0x108>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4313      	orrs	r3, r2
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <xTaskPriorityInherit+0x108>)
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4a10      	ldr	r2, [pc, #64]	; (800446c <xTaskPriorityInherit+0x104>)
 800442a:	441a      	add	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe f9e1 	bl	80027fa <vListInsertEnd>
 8004438:	e004      	b.n	8004444 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <xTaskPriorityInherit+0x100>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e008      	b.n	800445c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <xTaskPriorityInherit+0x100>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	429a      	cmp	r2, r3
 8004456:	d201      	bcs.n	800445c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004458:	2301      	movs	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800445c:	68fb      	ldr	r3, [r7, #12]
	}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	2000052c 	.word	0x2000052c
 800446c:	20000530 	.word	0x20000530
 8004470:	20000634 	.word	0x20000634

08004474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d06e      	beq.n	8004568 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800448a:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <xTaskPriorityDisinherit+0x100>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	429a      	cmp	r2, r3
 8004492:	d00a      	beq.n	80044aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	60fb      	str	r3, [r7, #12]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60bb      	str	r3, [r7, #8]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	429a      	cmp	r2, r3
 80044dc:	d044      	beq.n	8004568 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d140      	bne.n	8004568 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f9e0 	bl	80028b0 <uxListRemove>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	491f      	ldr	r1, [pc, #124]	; (8004578 <xTaskPriorityDisinherit+0x104>)
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xTaskPriorityDisinherit+0xae>
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	2201      	movs	r2, #1
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43da      	mvns	r2, r3
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <xTaskPriorityDisinherit+0x108>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4013      	ands	r3, r2
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <xTaskPriorityDisinherit+0x108>)
 8004520:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	f1c3 0207 	rsb	r2, r3, #7
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	2201      	movs	r2, #1
 800453c:	409a      	lsls	r2, r3
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <xTaskPriorityDisinherit+0x108>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4313      	orrs	r3, r2
 8004544:	4a0d      	ldr	r2, [pc, #52]	; (800457c <xTaskPriorityDisinherit+0x108>)
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4a08      	ldr	r2, [pc, #32]	; (8004578 <xTaskPriorityDisinherit+0x104>)
 8004556:	441a      	add	r2, r3
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f7fe f94b 	bl	80027fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004564:	2301      	movs	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004568:	697b      	ldr	r3, [r7, #20]
	}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	2000052c 	.word	0x2000052c
 8004578:	20000530 	.word	0x20000530
 800457c:	20000634 	.word	0x20000634

08004580 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8088 	beq.w	80046aa <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60fb      	str	r3, [r7, #12]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d902      	bls.n	80045c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	e002      	b.n	80045ce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d068      	beq.n	80046aa <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d163      	bne.n	80046aa <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80045e2:	4b34      	ldr	r3, [pc, #208]	; (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d10a      	bne.n	8004602 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60bb      	str	r3, [r7, #8]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	db04      	blt.n	8004620 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f1c3 0207 	rsb	r2, r3, #7
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	6959      	ldr	r1, [r3, #20]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004630:	4413      	add	r3, r2
 8004632:	4299      	cmp	r1, r3
 8004634:	d101      	bne.n	800463a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d034      	beq.n	80046aa <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	3304      	adds	r3, #4
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe f933 	bl	80028b0 <uxListRemove>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d115      	bne.n	800467c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	4918      	ldr	r1, [pc, #96]	; (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	2201      	movs	r2, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43da      	mvns	r2, r3
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4013      	ands	r3, r2
 8004678:	4a10      	ldr	r2, [pc, #64]	; (80046bc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800467a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	2201      	movs	r2, #1
 8004682:	409a      	lsls	r2, r3
 8004684:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800469c:	441a      	add	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f7fe f8a8 	bl	80027fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046aa:	bf00      	nop
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	2000052c 	.word	0x2000052c
 80046b8:	20000530 	.word	0x20000530
 80046bc:	20000634 	.word	0x20000634

080046c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046d2:	3201      	adds	r2, #1
 80046d4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80046d6:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80046d8:	681b      	ldr	r3, [r3, #0]
	}
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000052c 	.word	0x2000052c

080046e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046f2:	4b29      	ldr	r3, [pc, #164]	; (8004798 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f8:	4b28      	ldr	r3, [pc, #160]	; (800479c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe f8d6 	bl	80028b0 <uxListRemove>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <prvAddCurrentTaskToDelayedList+0xb4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	2201      	movs	r2, #1
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43da      	mvns	r2, r3
 8004718:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4013      	ands	r3, r2
 800471e:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004720:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d10a      	bne.n	8004740 <prvAddCurrentTaskToDelayedList+0x58>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004730:	4b1a      	ldr	r3, [pc, #104]	; (800479c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	481a      	ldr	r0, [pc, #104]	; (80047a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800473a:	f7fe f85e 	bl	80027fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800473e:	e026      	b.n	800478e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004748:	4b14      	ldr	r3, [pc, #80]	; (800479c <prvAddCurrentTaskToDelayedList+0xb4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	429a      	cmp	r2, r3
 8004756:	d209      	bcs.n	800476c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004758:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <prvAddCurrentTaskToDelayedList+0xb4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3304      	adds	r3, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f7fe f86b 	bl	8002840 <vListInsert>
}
 800476a:	e010      	b.n	800478e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3304      	adds	r3, #4
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7fe f861 	bl	8002840 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	d202      	bcs.n	800478e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004788:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6013      	str	r3, [r2, #0]
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000630 	.word	0x20000630
 800479c:	2000052c 	.word	0x2000052c
 80047a0:	20000634 	.word	0x20000634
 80047a4:	20000618 	.word	0x20000618
 80047a8:	200005e8 	.word	0x200005e8
 80047ac:	200005e4 	.word	0x200005e4
 80047b0:	2000064c 	.word	0x2000064c

080047b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b04      	subs	r3, #4
 80047c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3b04      	subs	r3, #4
 80047d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f023 0201 	bic.w	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047e4:	4a08      	ldr	r2, [pc, #32]	; (8004808 <pxPortInitialiseStack+0x54>)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b14      	subs	r3, #20
 80047ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3b20      	subs	r3, #32
 80047fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047fc:	68fb      	ldr	r3, [r7, #12]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	0800480d 	.word	0x0800480d

0800480c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004816:	4b12      	ldr	r3, [pc, #72]	; (8004860 <prvTaskExitError+0x54>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d00a      	beq.n	8004836 <prvTaskExitError+0x2a>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60fb      	str	r3, [r7, #12]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <prvTaskExitError+0x28>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	60bb      	str	r3, [r7, #8]
}
 8004848:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800484a:	bf00      	nop
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0fc      	beq.n	800484c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	2000000c 	.word	0x2000000c
	...

08004870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <pxCurrentTCBConst2>)
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	6808      	ldr	r0, [r1, #0]
 8004876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800487a:	f380 8809 	msr	PSP, r0
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f380 8811 	msr	BASEPRI, r0
 800488a:	f04e 0e0d 	orr.w	lr, lr, #13
 800488e:	4770      	bx	lr

08004890 <pxCurrentTCBConst2>:
 8004890:	2000052c 	.word	0x2000052c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop

08004898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004898:	4806      	ldr	r0, [pc, #24]	; (80048b4 <prvPortStartFirstTask+0x1c>)
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	6800      	ldr	r0, [r0, #0]
 800489e:	f380 8808 	msr	MSP, r0
 80048a2:	b662      	cpsie	i
 80048a4:	b661      	cpsie	f
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	df00      	svc	0
 80048b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048b2:	bf00      	nop
 80048b4:	e000ed08 	.word	0xe000ed08

080048b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048be:	4b32      	ldr	r3, [pc, #200]	; (8004988 <xPortStartScheduler+0xd0>)
 80048c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	22ff      	movs	r2, #255	; 0xff
 80048ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	4b2a      	ldr	r3, [pc, #168]	; (800498c <xPortStartScheduler+0xd4>)
 80048e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048e6:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <xPortStartScheduler+0xd8>)
 80048e8:	2207      	movs	r2, #7
 80048ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ec:	e009      	b.n	8004902 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80048ee:	4b28      	ldr	r3, [pc, #160]	; (8004990 <xPortStartScheduler+0xd8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	4a26      	ldr	r2, [pc, #152]	; (8004990 <xPortStartScheduler+0xd8>)
 80048f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b80      	cmp	r3, #128	; 0x80
 800490c:	d0ef      	beq.n	80048ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800490e:	4b20      	ldr	r3, [pc, #128]	; (8004990 <xPortStartScheduler+0xd8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1c3 0307 	rsb	r3, r3, #7
 8004916:	2b04      	cmp	r3, #4
 8004918:	d00a      	beq.n	8004930 <xPortStartScheduler+0x78>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	60bb      	str	r3, [r7, #8]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004930:	4b17      	ldr	r3, [pc, #92]	; (8004990 <xPortStartScheduler+0xd8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	4a16      	ldr	r2, [pc, #88]	; (8004990 <xPortStartScheduler+0xd8>)
 8004938:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800493a:	4b15      	ldr	r3, [pc, #84]	; (8004990 <xPortStartScheduler+0xd8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004942:	4a13      	ldr	r2, [pc, #76]	; (8004990 <xPortStartScheduler+0xd8>)
 8004944:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800494e:	4b11      	ldr	r3, [pc, #68]	; (8004994 <xPortStartScheduler+0xdc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a10      	ldr	r2, [pc, #64]	; (8004994 <xPortStartScheduler+0xdc>)
 8004954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004958:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800495a:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <xPortStartScheduler+0xdc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a0d      	ldr	r2, [pc, #52]	; (8004994 <xPortStartScheduler+0xdc>)
 8004960:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004964:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004966:	f000 f8b9 	bl	8004adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <xPortStartScheduler+0xe0>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004970:	f7ff ff92 	bl	8004898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004974:	f7ff fa90 	bl	8003e98 <vTaskSwitchContext>
	prvTaskExitError();
 8004978:	f7ff ff48 	bl	800480c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	e000e400 	.word	0xe000e400
 800498c:	20000658 	.word	0x20000658
 8004990:	2000065c 	.word	0x2000065c
 8004994:	e000ed20 	.word	0xe000ed20
 8004998:	2000000c 	.word	0x2000000c

0800499c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	607b      	str	r3, [r7, #4]
}
 80049b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <vPortEnterCritical+0x58>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <vPortEnterCritical+0x58>)
 80049be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <vPortEnterCritical+0x58>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10f      	bne.n	80049e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <vPortEnterCritical+0x5c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	603b      	str	r3, [r7, #0]
}
 80049e4:	bf00      	nop
 80049e6:	e7fe      	b.n	80049e6 <vPortEnterCritical+0x4a>
	}
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	2000000c 	.word	0x2000000c
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a02:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <vPortExitCritical+0x4c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <vPortExitCritical+0x24>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	607b      	str	r3, [r7, #4]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <vPortExitCritical+0x4c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <vPortExitCritical+0x4c>)
 8004a28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <vPortExitCritical+0x4c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d105      	bne.n	8004a3e <vPortExitCritical+0x42>
 8004a32:	2300      	movs	r3, #0
 8004a34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f383 8811 	msr	BASEPRI, r3
}
 8004a3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	2000000c 	.word	0x2000000c
 8004a4c:	00000000 	.word	0x00000000

08004a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a50:	f3ef 8009 	mrs	r0, PSP
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <pxCurrentTCBConst>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a60:	6010      	str	r0, [r2, #0]
 8004a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a6a:	f380 8811 	msr	BASEPRI, r0
 8004a6e:	f7ff fa13 	bl	8003e98 <vTaskSwitchContext>
 8004a72:	f04f 0000 	mov.w	r0, #0
 8004a76:	f380 8811 	msr	BASEPRI, r0
 8004a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	6808      	ldr	r0, [r1, #0]
 8004a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a86:	f380 8809 	msr	PSP, r0
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	4770      	bx	lr

08004a90 <pxCurrentTCBConst>:
 8004a90:	2000052c 	.word	0x2000052c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
}
 8004ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ab2:	f7ff f933 	bl	8003d1c <xTaskIncrementTick>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <xPortSysTickHandler+0x40>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f383 8811 	msr	BASEPRI, r3
}
 8004ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <vPortSetupTimerInterrupt+0x30>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <vPortSetupTimerInterrupt+0x38>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <vPortSetupTimerInterrupt+0x3c>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	4a08      	ldr	r2, [pc, #32]	; (8004b1c <vPortSetupTimerInterrupt+0x40>)
 8004afa:	3b01      	subs	r3, #1
 8004afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004afe:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <vPortSetupTimerInterrupt+0x30>)
 8004b00:	2207      	movs	r2, #7
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	e000e010 	.word	0xe000e010
 8004b10:	e000e018 	.word	0xe000e018
 8004b14:	20000000 	.word	0x20000000
 8004b18:	10624dd3 	.word	0x10624dd3
 8004b1c:	e000e014 	.word	0xe000e014

08004b20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b26:	f3ef 8305 	mrs	r3, IPSR
 8004b2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b0f      	cmp	r3, #15
 8004b30:	d914      	bls.n	8004b5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b32:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <vPortValidateInterruptPriority+0x6c>)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <vPortValidateInterruptPriority+0x70>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	7afa      	ldrb	r2, [r7, #11]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d20a      	bcs.n	8004b5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	607b      	str	r3, [r7, #4]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b5c:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <vPortValidateInterruptPriority+0x74>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <vPortValidateInterruptPriority+0x78>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d90a      	bls.n	8004b82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	603b      	str	r3, [r7, #0]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <vPortValidateInterruptPriority+0x60>
	}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	e000e3f0 	.word	0xe000e3f0
 8004b90:	20000658 	.word	0x20000658
 8004b94:	e000ed0c 	.word	0xe000ed0c
 8004b98:	2000065c 	.word	0x2000065c

08004b9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ba8:	f7ff f80e 	bl	8003bc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bac:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <pvPortMalloc+0x174>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bb4:	f000 f910 	bl	8004dd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bb8:	4b56      	ldr	r3, [pc, #344]	; (8004d14 <pvPortMalloc+0x178>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 808e 	bne.w	8004ce2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01d      	beq.n	8004c08 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004bcc:	2208      	movs	r2, #8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d014      	beq.n	8004c08 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f023 0307 	bic.w	r3, r3, #7
 8004be4:	3308      	adds	r3, #8
 8004be6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <pvPortMalloc+0x6c>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	617b      	str	r3, [r7, #20]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d069      	beq.n	8004ce2 <pvPortMalloc+0x146>
 8004c0e:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <pvPortMalloc+0x17c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d864      	bhi.n	8004ce2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c18:	4b40      	ldr	r3, [pc, #256]	; (8004d1c <pvPortMalloc+0x180>)
 8004c1a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c1c:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <pvPortMalloc+0x180>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c22:	e004      	b.n	8004c2e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d903      	bls.n	8004c40 <pvPortMalloc+0xa4>
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f1      	bne.n	8004c24 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c40:	4b33      	ldr	r3, [pc, #204]	; (8004d10 <pvPortMalloc+0x174>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d04b      	beq.n	8004ce2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2208      	movs	r2, #8
 8004c50:	4413      	add	r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	1ad2      	subs	r2, r2, r3
 8004c64:	2308      	movs	r3, #8
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d91f      	bls.n	8004cac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4413      	add	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <pvPortMalloc+0xf8>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	613b      	str	r3, [r7, #16]
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	1ad2      	subs	r2, r2, r3
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ca6:	69b8      	ldr	r0, [r7, #24]
 8004ca8:	f000 f8f8 	bl	8004e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <pvPortMalloc+0x17c>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <pvPortMalloc+0x17c>)
 8004cb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <pvPortMalloc+0x17c>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <pvPortMalloc+0x184>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d203      	bcs.n	8004cce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <pvPortMalloc+0x17c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <pvPortMalloc+0x184>)
 8004ccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <pvPortMalloc+0x178>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ce2:	f7fe ff7f 	bl	8003be4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <pvPortMalloc+0x16a>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60fb      	str	r3, [r7, #12]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <pvPortMalloc+0x168>
	return pvReturn;
 8004d06:	69fb      	ldr	r3, [r7, #28]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3728      	adds	r7, #40	; 0x28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20001268 	.word	0x20001268
 8004d14:	20001274 	.word	0x20001274
 8004d18:	2000126c 	.word	0x2000126c
 8004d1c:	20001260 	.word	0x20001260
 8004d20:	20001270 	.word	0x20001270

08004d24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d048      	beq.n	8004dc8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d36:	2308      	movs	r3, #8
 8004d38:	425b      	negs	r3, r3
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	4b21      	ldr	r3, [pc, #132]	; (8004dd0 <vPortFree+0xac>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <vPortFree+0x44>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	60fb      	str	r3, [r7, #12]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <vPortFree+0x62>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	60bb      	str	r3, [r7, #8]
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <vPortFree+0xac>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d019      	beq.n	8004dc8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d115      	bne.n	8004dc8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <vPortFree+0xac>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	401a      	ands	r2, r3
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dac:	f7fe ff0c 	bl	8003bc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <vPortFree+0xb0>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <vPortFree+0xb0>)
 8004dbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dbe:	6938      	ldr	r0, [r7, #16]
 8004dc0:	f000 f86c 	bl	8004e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004dc4:	f7fe ff0e 	bl	8003be4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dc8:	bf00      	nop
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20001274 	.word	0x20001274
 8004dd4:	2000126c 	.word	0x2000126c

08004dd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004de2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004de4:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <prvHeapInit+0xac>)
 8004de6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3307      	adds	r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <prvHeapInit+0xac>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <prvHeapInit+0xb0>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e16:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <prvHeapInit+0xb0>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4413      	add	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e24:	2208      	movs	r2, #8
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <prvHeapInit+0xb4>)
 8004e38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e3a:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <prvHeapInit+0xb4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <prvHeapInit+0xb4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <prvHeapInit+0xb4>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <prvHeapInit+0xb8>)
 8004e66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <prvHeapInit+0xbc>)
 8004e6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <prvHeapInit+0xc0>)
 8004e72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e76:	601a      	str	r2, [r3, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000660 	.word	0x20000660
 8004e88:	20001260 	.word	0x20001260
 8004e8c:	20001268 	.word	0x20001268
 8004e90:	20001270 	.word	0x20001270
 8004e94:	2000126c 	.word	0x2000126c
 8004e98:	20001274 	.word	0x20001274

08004e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ea4:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <prvInsertBlockIntoFreeList+0xa8>)
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e002      	b.n	8004eb0 <prvInsertBlockIntoFreeList+0x14>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d8f7      	bhi.n	8004eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d108      	bne.n	8004ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	441a      	add	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d118      	bne.n	8004f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <prvInsertBlockIntoFreeList+0xac>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d00d      	beq.n	8004f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e008      	b.n	8004f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <prvInsertBlockIntoFreeList+0xac>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e003      	b.n	8004f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d002      	beq.n	8004f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	20001260 	.word	0x20001260
 8004f48:	20001268 	.word	0x20001268

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	2600      	movs	r6, #0
 8004f50:	4d0c      	ldr	r5, [pc, #48]	; (8004f84 <__libc_init_array+0x38>)
 8004f52:	4c0d      	ldr	r4, [pc, #52]	; (8004f88 <__libc_init_array+0x3c>)
 8004f54:	1b64      	subs	r4, r4, r5
 8004f56:	10a4      	asrs	r4, r4, #2
 8004f58:	42a6      	cmp	r6, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	f000 f8f0 	bl	8005140 <_init>
 8004f60:	2600      	movs	r6, #0
 8004f62:	4d0a      	ldr	r5, [pc, #40]	; (8004f8c <__libc_init_array+0x40>)
 8004f64:	4c0a      	ldr	r4, [pc, #40]	; (8004f90 <__libc_init_array+0x44>)
 8004f66:	1b64      	subs	r4, r4, r5
 8004f68:	10a4      	asrs	r4, r4, #2
 8004f6a:	42a6      	cmp	r6, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f74:	4798      	blx	r3
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7e:	4798      	blx	r3
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	0800529c 	.word	0x0800529c
 8004f88:	0800529c 	.word	0x0800529c
 8004f8c:	0800529c 	.word	0x0800529c
 8004f90:	080052a0 	.word	0x080052a0

08004f94 <__retarget_lock_acquire_recursive>:
 8004f94:	4770      	bx	lr

08004f96 <__retarget_lock_release_recursive>:
 8004f96:	4770      	bx	lr

08004f98 <memcpy>:
 8004f98:	440a      	add	r2, r1
 8004f9a:	4291      	cmp	r1, r2
 8004f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fa0:	d100      	bne.n	8004fa4 <memcpy+0xc>
 8004fa2:	4770      	bx	lr
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004faa:	4291      	cmp	r1, r2
 8004fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fb0:	d1f9      	bne.n	8004fa6 <memcpy+0xe>
 8004fb2:	bd10      	pop	{r4, pc}

08004fb4 <memset>:
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4402      	add	r2, r0
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d100      	bne.n	8004fbe <memset+0xa>
 8004fbc:	4770      	bx	lr
 8004fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc2:	e7f9      	b.n	8004fb8 <memset+0x4>

08004fc4 <cleanup_glue>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	6809      	ldr	r1, [r1, #0]
 8004fca:	4605      	mov	r5, r0
 8004fcc:	b109      	cbz	r1, 8004fd2 <cleanup_glue+0xe>
 8004fce:	f7ff fff9 	bl	8004fc4 <cleanup_glue>
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fda:	f000 b869 	b.w	80050b0 <_free_r>
	...

08004fe0 <_reclaim_reent>:
 8004fe0:	4b2c      	ldr	r3, [pc, #176]	; (8005094 <_reclaim_reent+0xb4>)
 8004fe2:	b570      	push	{r4, r5, r6, lr}
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4283      	cmp	r3, r0
 8004fea:	d051      	beq.n	8005090 <_reclaim_reent+0xb0>
 8004fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004fee:	b143      	cbz	r3, 8005002 <_reclaim_reent+0x22>
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d14a      	bne.n	800508c <_reclaim_reent+0xac>
 8004ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff8:	6819      	ldr	r1, [r3, #0]
 8004ffa:	b111      	cbz	r1, 8005002 <_reclaim_reent+0x22>
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f000 f857 	bl	80050b0 <_free_r>
 8005002:	6961      	ldr	r1, [r4, #20]
 8005004:	b111      	cbz	r1, 800500c <_reclaim_reent+0x2c>
 8005006:	4620      	mov	r0, r4
 8005008:	f000 f852 	bl	80050b0 <_free_r>
 800500c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800500e:	b111      	cbz	r1, 8005016 <_reclaim_reent+0x36>
 8005010:	4620      	mov	r0, r4
 8005012:	f000 f84d 	bl	80050b0 <_free_r>
 8005016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005018:	b111      	cbz	r1, 8005020 <_reclaim_reent+0x40>
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f848 	bl	80050b0 <_free_r>
 8005020:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005022:	b111      	cbz	r1, 800502a <_reclaim_reent+0x4a>
 8005024:	4620      	mov	r0, r4
 8005026:	f000 f843 	bl	80050b0 <_free_r>
 800502a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800502c:	b111      	cbz	r1, 8005034 <_reclaim_reent+0x54>
 800502e:	4620      	mov	r0, r4
 8005030:	f000 f83e 	bl	80050b0 <_free_r>
 8005034:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005036:	b111      	cbz	r1, 800503e <_reclaim_reent+0x5e>
 8005038:	4620      	mov	r0, r4
 800503a:	f000 f839 	bl	80050b0 <_free_r>
 800503e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005040:	b111      	cbz	r1, 8005048 <_reclaim_reent+0x68>
 8005042:	4620      	mov	r0, r4
 8005044:	f000 f834 	bl	80050b0 <_free_r>
 8005048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800504a:	b111      	cbz	r1, 8005052 <_reclaim_reent+0x72>
 800504c:	4620      	mov	r0, r4
 800504e:	f000 f82f 	bl	80050b0 <_free_r>
 8005052:	69a3      	ldr	r3, [r4, #24]
 8005054:	b1e3      	cbz	r3, 8005090 <_reclaim_reent+0xb0>
 8005056:	4620      	mov	r0, r4
 8005058:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800505a:	4798      	blx	r3
 800505c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800505e:	b1b9      	cbz	r1, 8005090 <_reclaim_reent+0xb0>
 8005060:	4620      	mov	r0, r4
 8005062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005066:	f7ff bfad 	b.w	8004fc4 <cleanup_glue>
 800506a:	5949      	ldr	r1, [r1, r5]
 800506c:	b941      	cbnz	r1, 8005080 <_reclaim_reent+0xa0>
 800506e:	3504      	adds	r5, #4
 8005070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005072:	2d80      	cmp	r5, #128	; 0x80
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	d1f8      	bne.n	800506a <_reclaim_reent+0x8a>
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f819 	bl	80050b0 <_free_r>
 800507e:	e7ba      	b.n	8004ff6 <_reclaim_reent+0x16>
 8005080:	680e      	ldr	r6, [r1, #0]
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f814 	bl	80050b0 <_free_r>
 8005088:	4631      	mov	r1, r6
 800508a:	e7ef      	b.n	800506c <_reclaim_reent+0x8c>
 800508c:	2500      	movs	r5, #0
 800508e:	e7ef      	b.n	8005070 <_reclaim_reent+0x90>
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	bf00      	nop
 8005094:	20000010 	.word	0x20000010

08005098 <__malloc_lock>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__malloc_lock+0x8>)
 800509a:	f7ff bf7b 	b.w	8004f94 <__retarget_lock_acquire_recursive>
 800509e:	bf00      	nop
 80050a0:	20001278 	.word	0x20001278

080050a4 <__malloc_unlock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__malloc_unlock+0x8>)
 80050a6:	f7ff bf76 	b.w	8004f96 <__retarget_lock_release_recursive>
 80050aa:	bf00      	nop
 80050ac:	20001278 	.word	0x20001278

080050b0 <_free_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4605      	mov	r5, r0
 80050b4:	2900      	cmp	r1, #0
 80050b6:	d040      	beq.n	800513a <_free_r+0x8a>
 80050b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050bc:	1f0c      	subs	r4, r1, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bfb8      	it	lt
 80050c2:	18e4      	addlt	r4, r4, r3
 80050c4:	f7ff ffe8 	bl	8005098 <__malloc_lock>
 80050c8:	4a1c      	ldr	r2, [pc, #112]	; (800513c <_free_r+0x8c>)
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	b933      	cbnz	r3, 80050dc <_free_r+0x2c>
 80050ce:	6063      	str	r3, [r4, #4]
 80050d0:	6014      	str	r4, [r2, #0]
 80050d2:	4628      	mov	r0, r5
 80050d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050d8:	f7ff bfe4 	b.w	80050a4 <__malloc_unlock>
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d908      	bls.n	80050f2 <_free_r+0x42>
 80050e0:	6820      	ldr	r0, [r4, #0]
 80050e2:	1821      	adds	r1, r4, r0
 80050e4:	428b      	cmp	r3, r1
 80050e6:	bf01      	itttt	eq
 80050e8:	6819      	ldreq	r1, [r3, #0]
 80050ea:	685b      	ldreq	r3, [r3, #4]
 80050ec:	1809      	addeq	r1, r1, r0
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	e7ed      	b.n	80050ce <_free_r+0x1e>
 80050f2:	461a      	mov	r2, r3
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b10b      	cbz	r3, 80050fc <_free_r+0x4c>
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d9fa      	bls.n	80050f2 <_free_r+0x42>
 80050fc:	6811      	ldr	r1, [r2, #0]
 80050fe:	1850      	adds	r0, r2, r1
 8005100:	42a0      	cmp	r0, r4
 8005102:	d10b      	bne.n	800511c <_free_r+0x6c>
 8005104:	6820      	ldr	r0, [r4, #0]
 8005106:	4401      	add	r1, r0
 8005108:	1850      	adds	r0, r2, r1
 800510a:	4283      	cmp	r3, r0
 800510c:	6011      	str	r1, [r2, #0]
 800510e:	d1e0      	bne.n	80050d2 <_free_r+0x22>
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4401      	add	r1, r0
 8005116:	6011      	str	r1, [r2, #0]
 8005118:	6053      	str	r3, [r2, #4]
 800511a:	e7da      	b.n	80050d2 <_free_r+0x22>
 800511c:	d902      	bls.n	8005124 <_free_r+0x74>
 800511e:	230c      	movs	r3, #12
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	e7d6      	b.n	80050d2 <_free_r+0x22>
 8005124:	6820      	ldr	r0, [r4, #0]
 8005126:	1821      	adds	r1, r4, r0
 8005128:	428b      	cmp	r3, r1
 800512a:	bf01      	itttt	eq
 800512c:	6819      	ldreq	r1, [r3, #0]
 800512e:	685b      	ldreq	r3, [r3, #4]
 8005130:	1809      	addeq	r1, r1, r0
 8005132:	6021      	streq	r1, [r4, #0]
 8005134:	6063      	str	r3, [r4, #4]
 8005136:	6054      	str	r4, [r2, #4]
 8005138:	e7cb      	b.n	80050d2 <_free_r+0x22>
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	2000127c 	.word	0x2000127c

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
