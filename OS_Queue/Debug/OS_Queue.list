
OS_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005188  08005188  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005188  08005188  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005188  08005188  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001990  20000078  08005208  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  08005208  00021a08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2c3  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002803  00000000  00000000  0002f364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00031b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a0  00000000  00000000  00033330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e14f  00000000  00000000  0004b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a154  00000000  00000000  0005961f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003444  00000000  00000000  000e37c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080050c0 	.word	0x080050c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080050c0 	.word	0x080050c0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000094 	.word	0x20000094
 800017c:	20000148 	.word	0x20000148

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fced 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f897 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f97f 	bl	8000490 <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f957 	bl	8000444 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f8d7 	bl	8000348 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800019a:	f000 f8ff 	bl	800039c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800019e:	f000 f927 	bl	80003f0 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
 80001a6:	2300      	movs	r3, #0
 80001a8:	60fb      	str	r3, [r7, #12]
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	2101      	movs	r1, #1
 80001b0:	4618      	mov	r0, r3
 80001b2:	f002 fa80 	bl	80026b6 <osSemaphoreCreate>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a2f      	ldr	r2, [pc, #188]	; (8000278 <main+0xf8>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 80001bc:	2300      	movs	r3, #0
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	2300      	movs	r3, #0
 80001c2:	607b      	str	r3, [r7, #4]
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 80001c4:	463b      	mov	r3, r7
 80001c6:	2101      	movs	r1, #1
 80001c8:	4618      	mov	r0, r3
 80001ca:	f002 fa74 	bl	80026b6 <osSemaphoreCreate>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a2a      	ldr	r2, [pc, #168]	; (800027c <main+0xfc>)
 80001d2:	6013      	str	r3, [r2, #0]
//  osThreadDef(myTask04, StartTask04, osPriorityBelowNormal, 0, 128);
//  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate((void*)Sender1, "sender1", 128, NULL, osPriorityNormal, &sender1handler);
 80001d4:	4b2a      	ldr	r3, [pc, #168]	; (8000280 <main+0x100>)
 80001d6:	9301      	str	r3, [sp, #4]
 80001d8:	2300      	movs	r3, #0
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	2300      	movs	r3, #0
 80001de:	2280      	movs	r2, #128	; 0x80
 80001e0:	4928      	ldr	r1, [pc, #160]	; (8000284 <main+0x104>)
 80001e2:	4829      	ldr	r0, [pc, #164]	; (8000288 <main+0x108>)
 80001e4:	f003 f9a2 	bl	800352c <xTaskCreate>
  xTaskCreate((void*)Sender2, "sender2", 128, NULL, osPriorityNormal, &sender1handler);
 80001e8:	4b25      	ldr	r3, [pc, #148]	; (8000280 <main+0x100>)
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	2300      	movs	r3, #0
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	2300      	movs	r3, #0
 80001f2:	2280      	movs	r2, #128	; 0x80
 80001f4:	4925      	ldr	r1, [pc, #148]	; (800028c <main+0x10c>)
 80001f6:	4826      	ldr	r0, [pc, #152]	; (8000290 <main+0x110>)
 80001f8:	f003 f998 	bl	800352c <xTaskCreate>
  xTaskCreate((void*)Receiver, "Receiver", 128, NULL, osPriorityBelowNormal, &receiverhandler);
 80001fc:	4b25      	ldr	r3, [pc, #148]	; (8000294 <main+0x114>)
 80001fe:	9301      	str	r3, [sp, #4]
 8000200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2300      	movs	r3, #0
 8000208:	2280      	movs	r2, #128	; 0x80
 800020a:	4923      	ldr	r1, [pc, #140]	; (8000298 <main+0x118>)
 800020c:	4823      	ldr	r0, [pc, #140]	; (800029c <main+0x11c>)
 800020e:	f003 f98d 	bl	800352c <xTaskCreate>

  myQueue01Handle = xQueueCreate(30,sizeof(dataRecei_1));
 8000212:	2200      	movs	r2, #0
 8000214:	2132      	movs	r1, #50	; 0x32
 8000216:	201e      	movs	r0, #30
 8000218:	f002 fc0d 	bl	8002a36 <xQueueGenericCreate>
 800021c:	4603      	mov	r3, r0
 800021e:	4a20      	ldr	r2, [pc, #128]	; (80002a0 <main+0x120>)
 8000220:	6013      	str	r3, [r2, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dataRecei_1, sizeof(dataRecei_1));
 8000222:	2232      	movs	r2, #50	; 0x32
 8000224:	491f      	ldr	r1, [pc, #124]	; (80002a4 <main+0x124>)
 8000226:	4820      	ldr	r0, [pc, #128]	; (80002a8 <main+0x128>)
 8000228:	f001 fe93 	bl	8001f52 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <main+0x12c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <main+0x12c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f022 0204 	bic.w	r2, r2, #4
 800023a:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, dataRecei_2, sizeof(dataRecei_2));
 800023c:	2232      	movs	r2, #50	; 0x32
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <main+0x130>)
 8000240:	481c      	ldr	r0, [pc, #112]	; (80002b4 <main+0x134>)
 8000242:	f001 fe86 	bl	8001f52 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000246:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <main+0x138>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <main+0x138>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f022 0204 	bic.w	r2, r2, #4
 8000254:	601a      	str	r2, [r3, #0]
  xSemaphoreTake(myBinarySem01Handle,1000);
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <main+0xf8>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800025e:	4618      	mov	r0, r3
 8000260:	f002 feb2 	bl	8002fc8 <xQueueSemaphoreTake>
  xSemaphoreTake(myBinarySem02Handle,1000);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <main+0xfc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800026c:	4618      	mov	r0, r3
 800026e:	f002 feab 	bl	8002fc8 <xQueueSemaphoreTake>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000272:	f002 fa05 	bl	8002680 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000276:	e7fe      	b.n	8000276 <main+0xf6>
 8000278:	20000514 	.word	0x20000514
 800027c:	20000518 	.word	0x20000518
 8000280:	2000051c 	.word	0x2000051c
 8000284:	080050d8 	.word	0x080050d8
 8000288:	080006e5 	.word	0x080006e5
 800028c:	080050e0 	.word	0x080050e0
 8000290:	08000781 	.word	0x08000781
 8000294:	20000524 	.word	0x20000524
 8000298:	080050e8 	.word	0x080050e8
 800029c:	080005b9 	.word	0x080005b9
 80002a0:	20000510 	.word	0x20000510
 80002a4:	20000348 	.word	0x20000348
 80002a8:	200003b0 	.word	0x200003b0
 80002ac:	20000488 	.word	0x20000488
 80002b0:	2000037c 	.word	0x2000037c
 80002b4:	200003f8 	.word	0x200003f8
 80002b8:	200004cc 	.word	0x200004cc

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	; 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 fe32 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002de:	2301      	movs	r3, #1
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f001 f941 	bl	800158c <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000310:	f000 fa84 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fbae 	bl	8001a90 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800033a:	f000 fa6f 	bl	800081c <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	; 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 800034e:	4a12      	ldr	r2, [pc, #72]	; (8000398 <MX_USART1_UART_Init+0x50>)
 8000350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_USART1_UART_Init+0x4c>)
 8000380:	f001 fd14 	bl	8001dac <HAL_UART_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800038a:	f000 fa47 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200003b0 	.word	0x200003b0
 8000398:	40013800 	.word	0x40013800

0800039c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <MX_USART2_UART_Init+0x50>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003d4:	f001 fcea 	bl	8001dac <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003de:	f000 fa1d 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	200003f8 	.word	0x200003f8
 80003ec:	40004400 	.word	0x40004400

080003f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_USART3_UART_Init+0x4c>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <MX_USART3_UART_Init+0x50>)
 80003f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1200;
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_USART3_UART_Init+0x4c>)
 80003fc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_USART3_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_USART3_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_USART3_UART_Init+0x4c>)
 8000428:	f001 fcc0 	bl	8001dac <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000432:	f000 f9f3 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000440 	.word	0x20000440
 8000440:	40004800 	.word	0x40004800

08000444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_DMA_Init+0x48>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a0f      	ldr	r2, [pc, #60]	; (800048c <MX_DMA_Init+0x48>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <MX_DMA_Init+0x48>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2105      	movs	r1, #5
 8000466:	200f      	movs	r0, #15
 8000468:	f000 fcb5 	bl	8000dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800046c:	200f      	movs	r0, #15
 800046e:	f000 fcce 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	2105      	movs	r1, #5
 8000476:	2010      	movs	r0, #16
 8000478:	f000 fcad 	bl	8000dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800047c:	2010      	movs	r0, #16
 800047e:	f000 fcc6 	bl	8000e0e <HAL_NVIC_EnableIRQ>

}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a23      	ldr	r2, [pc, #140]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b21      	ldr	r3, [pc, #132]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0320 	and.w	r3, r3, #32
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a17      	ldr	r2, [pc, #92]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a11      	ldr	r2, [pc, #68]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004f2:	f043 0308 	orr.w	r3, r3, #8
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_GPIO_Init+0xa8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0308 	and.w	r3, r3, #8
 8000500:	603b      	str	r3, [r7, #0]
 8000502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <MX_GPIO_Init+0xac>)
 800050c:	f001 f80c 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2302      	movs	r3, #2
 8000520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_GPIO_Init+0xac>)
 800052a:	f000 fe79 	bl	8001220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	40011000 	.word	0x40011000

08000540 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	807b      	strh	r3, [r7, #2]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
	if(huart->Instance == USART1)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <HAL_UARTEx_RxEventCallback+0x64>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d108      	bne.n	800056c <HAL_UARTEx_RxEventCallback+0x2c>
		xSemaphoreGiveFromISR(myBinarySem01Handle, &xHigherPriorityTaskWoken);
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <HAL_UARTEx_RxEventCallback+0x68>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f107 020c 	add.w	r2, r7, #12
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f002 fbc1 	bl	8002cec <xQueueGiveFromISR>
 800056a:	e00c      	b.n	8000586 <HAL_UARTEx_RxEventCallback+0x46>
	else if (huart->Instance == USART2)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <HAL_UARTEx_RxEventCallback+0x6c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d107      	bne.n	8000586 <HAL_UARTEx_RxEventCallback+0x46>
		xSemaphoreGiveFromISR(myBinarySem02Handle, &xHigherPriorityTaskWoken);
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_UARTEx_RxEventCallback+0x70>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f107 020c 	add.w	r2, r7, #12
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f002 fbb3 	bl	8002cec <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d007      	beq.n	800059c <HAL_UARTEx_RxEventCallback+0x5c>
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_UARTEx_RxEventCallback+0x74>)
 800058e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	f3bf 8f4f 	dsb	sy
 8000598:	f3bf 8f6f 	isb	sy
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40013800 	.word	0x40013800
 80005a8:	20000514 	.word	0x20000514
 80005ac:	40004400 	.word	0x40004400
 80005b0:	20000518 	.word	0x20000518
 80005b4:	e000ed04 	.word	0xe000ed04

080005b8 <Receiver>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void Receiver(void const * argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	; 0x40
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint8_t count;
	uint8_t data[50];
  /* Infinite loop */
  for(;;)
  {
		  switch(state)
 80005c0:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <Receiver+0xfc>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d034      	beq.n	8000632 <Receiver+0x7a>
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	dc5b      	bgt.n	8000684 <Receiver+0xcc>
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <Receiver+0x1e>
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d011      	beq.n	80005f8 <Receiver+0x40>
 80005d4:	e056      	b.n	8000684 <Receiver+0xcc>
		  {
		  case OVERFLOW:	//Queue get overflow
			  timeStart = HAL_GetTick();
 80005d6:	f000 fb1d 	bl	8000c14 <HAL_GetTick>
 80005da:	63f8      	str	r0, [r7, #60]	; 0x3c
			  vTaskSuspend(sender1handler);
 80005dc:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <Receiver+0x100>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 f91d 	bl	8003820 <vTaskSuspend>
			  vTaskSuspend(sender2handler);
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <Receiver+0x104>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f918 	bl	8003820 <vTaskSuspend>
			  state = WAIT;
 80005f0:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <Receiver+0xfc>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
			  break;
 80005f6:	e045      	b.n	8000684 <Receiver+0xcc>
		  case WAIT:	//wait 20s to send data out
			  if(HAL_GetTick() - timeStart > 1000)
 80005f8:	f000 fb0c 	bl	8000c14 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000606:	d93c      	bls.n	8000682 <Receiver+0xca>
			  {
				  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060c:	482c      	ldr	r0, [pc, #176]	; (80006c0 <Receiver+0x108>)
 800060e:	f000 ffa3 	bl	8001558 <HAL_GPIO_TogglePin>
				  timeStart  = HAL_GetTick();
 8000612:	f000 faff 	bl	8000c14 <HAL_GetTick>
 8000616:	63f8      	str	r0, [r7, #60]	; 0x3c
				  count++;
 8000618:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800061c:	3301      	adds	r3, #1
 800061e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				  if(count == 20)
 8000622:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000626:	2b14      	cmp	r3, #20
 8000628:	d12b      	bne.n	8000682 <Receiver+0xca>
					  state = TRANSMIT;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <Receiver+0xfc>)
 800062c:	2202      	movs	r2, #2
 800062e:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000630:	e027      	b.n	8000682 <Receiver+0xca>
		  case TRANSMIT:	// Runing
			  count = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			  vTaskResume(sender1handler);
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <Receiver+0x100>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f003 f9bb 	bl	80039b8 <vTaskResume>
			  vTaskResume(sender2handler);
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <Receiver+0x104>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f9b6 	bl	80039b8 <vTaskResume>
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dataRecei_1, sizeof(dataRecei_1));
 800064c:	2232      	movs	r2, #50	; 0x32
 800064e:	491d      	ldr	r1, [pc, #116]	; (80006c4 <Receiver+0x10c>)
 8000650:	481d      	ldr	r0, [pc, #116]	; (80006c8 <Receiver+0x110>)
 8000652:	f001 fc7e 	bl	8001f52 <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <Receiver+0x114>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <Receiver+0x114>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f022 0204 	bic.w	r2, r2, #4
 8000664:	601a      	str	r2, [r3, #0]

			  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, dataRecei_2, sizeof(dataRecei_2));
 8000666:	2232      	movs	r2, #50	; 0x32
 8000668:	4919      	ldr	r1, [pc, #100]	; (80006d0 <Receiver+0x118>)
 800066a:	481a      	ldr	r0, [pc, #104]	; (80006d4 <Receiver+0x11c>)
 800066c:	f001 fc71 	bl	8001f52 <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <Receiver+0x120>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <Receiver+0x120>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f022 0204 	bic.w	r2, r2, #4
 800067e:	601a      	str	r2, [r3, #0]
			  break;
 8000680:	e000      	b.n	8000684 <Receiver+0xcc>
			  break;
 8000682:	bf00      	nop
		  }

			if(xQueueReceive(myQueue01Handle, data, 0) == pdTRUE)
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <Receiver+0x124>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f107 0108 	add.w	r1, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fbba 	bl	8002e08 <xQueueReceive>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d107      	bne.n	80006aa <Receiver+0xf2>
				HAL_UART_Transmit(&huart3, data, 50, 1000);
 800069a:	f107 0108 	add.w	r1, r7, #8
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	2232      	movs	r2, #50	; 0x32
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <Receiver+0x128>)
 80006a6:	f001 fbd1 	bl	8001e4c <HAL_UART_Transmit>




    osDelay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 ffef 	bl	800268e <osDelay>
		  switch(state)
 80006b0:	e786      	b.n	80005c0 <Receiver+0x8>
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	2000051c 	.word	0x2000051c
 80006bc:	20000520 	.word	0x20000520
 80006c0:	40011000 	.word	0x40011000
 80006c4:	20000348 	.word	0x20000348
 80006c8:	200003b0 	.word	0x200003b0
 80006cc:	20000488 	.word	0x20000488
 80006d0:	2000037c 	.word	0x2000037c
 80006d4:	200003f8 	.word	0x200003f8
 80006d8:	200004cc 	.word	0x200004cc
 80006dc:	20000510 	.word	0x20000510
 80006e0:	20000440 	.word	0x20000440

080006e4 <Sender1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void Sender1(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem01Handle,2000) == pdTRUE)
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <Sender1+0x84>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fc67 	bl	8002fc8 <xQueueSemaphoreTake>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d12f      	bne.n	8000760 <Sender1+0x7c>
	  {
		  if(uxQueueSpacesAvailable(myQueue01Handle) != 0)
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <Sender1+0x88>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fd6b 	bl	80031e0 <uxQueueSpacesAvailable>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01c      	beq.n	800074a <Sender1+0x66>
		  {
			  __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <Sender1+0x8c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <Sender1+0x8c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f022 0201 	bic.w	r2, r2, #1
 800071e:	601a      	str	r2, [r3, #0]
			  xQueueSend(myQueue01Handle,dataRecei_1,0);
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <Sender1+0x88>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	2200      	movs	r2, #0
 8000728:	4912      	ldr	r1, [pc, #72]	; (8000774 <Sender1+0x90>)
 800072a:	f002 f9e1 	bl	8002af0 <xQueueGenericSend>
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, dataRecei_1, sizeof(dataRecei_1));
 800072e:	2232      	movs	r2, #50	; 0x32
 8000730:	4910      	ldr	r1, [pc, #64]	; (8000774 <Sender1+0x90>)
 8000732:	4811      	ldr	r0, [pc, #68]	; (8000778 <Sender1+0x94>)
 8000734:	f001 fc0d 	bl	8001f52 <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <Sender1+0x8c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <Sender1+0x8c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f022 0204 	bic.w	r2, r2, #4
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	e00a      	b.n	8000760 <Sender1+0x7c>
		  }
		  else
		  {
			  __HAL_DMA_DISABLE(&hdma_usart1_rx);
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <Sender1+0x8c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <Sender1+0x8c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f022 0201 	bic.w	r2, r2, #1
 8000758:	601a      	str	r2, [r3, #0]
			  state = OVERFLOW;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <Sender1+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
	  else
	  {

	  }

    osDelay(10);
 8000760:	200a      	movs	r0, #10
 8000762:	f001 ff94 	bl	800268e <osDelay>
	  if(xSemaphoreTake(myBinarySem01Handle,2000) == pdTRUE)
 8000766:	e7c1      	b.n	80006ec <Sender1+0x8>
 8000768:	20000514 	.word	0x20000514
 800076c:	20000510 	.word	0x20000510
 8000770:	20000488 	.word	0x20000488
 8000774:	20000348 	.word	0x20000348
 8000778:	200003b0 	.word	0x200003b0
 800077c:	20000000 	.word	0x20000000

08000780 <Sender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void Sender2(void const * argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem02Handle,2000) == pdTRUE)
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <Sender2+0x84>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fc19 	bl	8002fc8 <xQueueSemaphoreTake>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d12f      	bne.n	80007fc <Sender2+0x7c>
	  {
		  if(uxQueueSpacesAvailable(myQueue01Handle) != 0)
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <Sender2+0x88>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fd1d 	bl	80031e0 <uxQueueSpacesAvailable>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d01c      	beq.n	80007e6 <Sender2+0x66>
		  {
			  __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <Sender2+0x8c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <Sender2+0x8c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f022 0201 	bic.w	r2, r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
			  xQueueSend(myQueue01Handle,dataRecei_2,0);
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <Sender2+0x88>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	2300      	movs	r3, #0
 80007c2:	2200      	movs	r2, #0
 80007c4:	4912      	ldr	r1, [pc, #72]	; (8000810 <Sender2+0x90>)
 80007c6:	f002 f993 	bl	8002af0 <xQueueGenericSend>
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, dataRecei_2, sizeof(dataRecei_2));
 80007ca:	2232      	movs	r2, #50	; 0x32
 80007cc:	4910      	ldr	r1, [pc, #64]	; (8000810 <Sender2+0x90>)
 80007ce:	4811      	ldr	r0, [pc, #68]	; (8000814 <Sender2+0x94>)
 80007d0:	f001 fbbf 	bl	8001f52 <HAL_UARTEx_ReceiveToIdle_DMA>
		  	  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <Sender2+0x8c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <Sender2+0x8c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0204 	bic.w	r2, r2, #4
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	e00a      	b.n	80007fc <Sender2+0x7c>
		  }
		  else
		  {
			  __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <Sender2+0x8c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <Sender2+0x8c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f022 0201 	bic.w	r2, r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
			  state = OVERFLOW;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <Sender2+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {

	  }
	  osDelay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f001 ff46 	bl	800268e <osDelay>
	  if(xSemaphoreTake(myBinarySem02Handle,2000) == pdTRUE)
 8000802:	e7c1      	b.n	8000788 <Sender2+0x8>
 8000804:	20000518 	.word	0x20000518
 8000808:	20000510 	.word	0x20000510
 800080c:	200004cc 	.word	0x200004cc
 8000810:	2000037c 	.word	0x2000037c
 8000814:	200003f8 	.word	0x200003f8
 8000818:	20000000 	.word	0x20000000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_MspInit+0x4c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_MspInit+0x4c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_MspInit+0x4c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_MspInit+0x4c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x4c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	210f      	movs	r1, #15
 8000862:	f06f 0001 	mvn.w	r0, #1
 8000866:	f000 fab6 	bl	8000dd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a79      	ldr	r2, [pc, #484]	; (8000a78 <HAL_UART_MspInit+0x200>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d158      	bne.n	800094a <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000898:	4b78      	ldr	r3, [pc, #480]	; (8000a7c <HAL_UART_MspInit+0x204>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a77      	ldr	r2, [pc, #476]	; (8000a7c <HAL_UART_MspInit+0x204>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b75      	ldr	r3, [pc, #468]	; (8000a7c <HAL_UART_MspInit+0x204>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b72      	ldr	r3, [pc, #456]	; (8000a7c <HAL_UART_MspInit+0x204>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a71      	ldr	r2, [pc, #452]	; (8000a7c <HAL_UART_MspInit+0x204>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b6f      	ldr	r3, [pc, #444]	; (8000a7c <HAL_UART_MspInit+0x204>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4619      	mov	r1, r3
 80008dc:	4868      	ldr	r0, [pc, #416]	; (8000a80 <HAL_UART_MspInit+0x208>)
 80008de:	f000 fc9f 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4619      	mov	r1, r3
 80008f6:	4862      	ldr	r0, [pc, #392]	; (8000a80 <HAL_UART_MspInit+0x208>)
 80008f8:	f000 fc92 	bl	8001220 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008fc:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 80008fe:	4a62      	ldr	r2, [pc, #392]	; (8000a88 <HAL_UART_MspInit+0x210>)
 8000900:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000902:	4b60      	ldr	r3, [pc, #384]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000908:	4b5e      	ldr	r3, [pc, #376]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800090e:	4b5d      	ldr	r3, [pc, #372]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000914:	4b5b      	ldr	r3, [pc, #364]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800091a:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000920:	4b58      	ldr	r3, [pc, #352]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000926:	4b57      	ldr	r3, [pc, #348]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800092c:	4855      	ldr	r0, [pc, #340]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 800092e:	f000 fa89 	bl	8000e44 <HAL_DMA_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000938:	f7ff ff70 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a51      	ldr	r2, [pc, #324]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 8000940:	63da      	str	r2, [r3, #60]	; 0x3c
 8000942:	4a50      	ldr	r2, [pc, #320]	; (8000a84 <HAL_UART_MspInit+0x20c>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000948:	e092      	b.n	8000a70 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a4f      	ldr	r2, [pc, #316]	; (8000a8c <HAL_UART_MspInit+0x214>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d156      	bne.n	8000a02 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000954:	4b49      	ldr	r3, [pc, #292]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	4a48      	ldr	r2, [pc, #288]	; (8000a7c <HAL_UART_MspInit+0x204>)
 800095a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095e:	61d3      	str	r3, [r2, #28]
 8000960:	4b46      	ldr	r3, [pc, #280]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b43      	ldr	r3, [pc, #268]	; (8000a7c <HAL_UART_MspInit+0x204>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a42      	ldr	r2, [pc, #264]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b40      	ldr	r3, [pc, #256]	; (8000a7c <HAL_UART_MspInit+0x204>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000984:	2304      	movs	r3, #4
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	4619      	mov	r1, r3
 8000996:	483a      	ldr	r0, [pc, #232]	; (8000a80 <HAL_UART_MspInit+0x208>)
 8000998:	f000 fc42 	bl	8001220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4619      	mov	r1, r3
 80009ae:	4834      	ldr	r0, [pc, #208]	; (8000a80 <HAL_UART_MspInit+0x208>)
 80009b0:	f000 fc36 	bl	8001220 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009b6:	4a37      	ldr	r2, [pc, #220]	; (8000a94 <HAL_UART_MspInit+0x21c>)
 80009b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ba:	4b35      	ldr	r3, [pc, #212]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c0:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c6:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009cc:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d2:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009e4:	482a      	ldr	r0, [pc, #168]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009e6:	f000 fa2d 	bl	8000e44 <HAL_DMA_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 80009f0:	f7ff ff14 	bl	800081c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a26      	ldr	r2, [pc, #152]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80009fa:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <HAL_UART_MspInit+0x218>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a00:	e036      	b.n	8000a70 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a24      	ldr	r2, [pc, #144]	; (8000a98 <HAL_UART_MspInit+0x220>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d131      	bne.n	8000a70 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_UART_MspInit+0x204>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <HAL_UART_MspInit+0x224>)
 8000a52:	f000 fbe5 	bl	8001220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <HAL_UART_MspInit+0x224>)
 8000a6c:	f000 fbd8 	bl	8001220 <HAL_GPIO_Init>
}
 8000a70:	bf00      	nop
 8000a72:	3730      	adds	r7, #48	; 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40013800 	.word	0x40013800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800
 8000a84:	20000488 	.word	0x20000488
 8000a88:	40020058 	.word	0x40020058
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	200004cc 	.word	0x200004cc
 8000a94:	4002006c 	.word	0x4002006c
 8000a98:	40004800 	.word	0x40004800
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f88f 	bl	8000bf0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ad2:	f003 fbeb 	bl	80042ac <xTaskGetSchedulerState>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d001      	beq.n	8000ae0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000adc:	f003 ff9c 	bl	8004a18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <DMA1_Channel5_IRQHandler+0x10>)
 8000aea:	f000 fa65 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000488 	.word	0x20000488

08000af8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <DMA1_Channel6_IRQHandler+0x10>)
 8000afe:	f000 fa5b 	bl	8000fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200004cc 	.word	0x200004cc

08000b0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <Reset_Handler>:
 8000b18:	f7ff fff8 	bl	8000b0c <SystemInit>
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <LoopFillZerobss+0xe>)
 8000b1e:	490c      	ldr	r1, [pc, #48]	; (8000b50 <LoopFillZerobss+0x12>)
 8000b20:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <LoopFillZerobss+0x16>)
 8000b22:	2300      	movs	r3, #0
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:
 8000b26:	58d4      	ldr	r4, [r2, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:
 8000b2c:	18c4      	adds	r4, r0, r3
 8000b2e:	428c      	cmp	r4, r1
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <LoopFillZerobss+0x1a>)
 8000b34:	4c09      	ldr	r4, [pc, #36]	; (8000b5c <LoopFillZerobss+0x1e>)
 8000b36:	2300      	movs	r3, #0
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:
 8000b3e:	42a2      	cmp	r2, r4
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>
 8000b42:	f004 f9c3 	bl	8004ecc <__libc_init_array>
 8000b46:	f7ff fb1b 	bl	8000180 <main>
 8000b4a:	4770      	bx	lr
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000078 	.word	0x20000078
 8000b54:	08005190 	.word	0x08005190
 8000b58:	20000078 	.word	0x20000078
 8000b5c:	20001a08 	.word	0x20001a08

08000b60 <ADC1_2_IRQHandler>:
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f923 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe52 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f93b 	bl	8000e2a <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 f903 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000004 	.word	0x20000004
 8000be8:	2000000c 	.word	0x2000000c
 8000bec:	20000008 	.word	0x20000008

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <HAL_IncTick+0x20>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	2000000c 	.word	0x2000000c
 8000c10:	20000528 	.word	0x20000528

08000c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000528 	.word	0x20000528

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4906      	ldr	r1, [pc, #24]	; (8000cc0 <__NVIC_EnableIRQ+0x34>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f7ff ff90 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff2d 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff42 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff90 	bl	8000d18 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5f 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff35 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e043      	b.n	8000ee2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_DMA_Init+0xa8>)
 8000e62:	4413      	add	r3, r2
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <HAL_DMA_Init+0xac>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	009a      	lsls	r2, r3, #2
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <HAL_DMA_Init+0xb0>)
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	bffdfff8 	.word	0xbffdfff8
 8000ef0:	cccccccd 	.word	0xcccccccd
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <HAL_DMA_Start_IT+0x20>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e04b      	b.n	8000fb0 <HAL_DMA_Start_IT+0xb8>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d13a      	bne.n	8000fa2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0201 	bic.w	r2, r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f000 f937 	bl	80011c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d008      	beq.n	8000f70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 020e 	orr.w	r2, r2, #14
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e00f      	b.n	8000f90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0204 	bic.w	r2, r2, #4
 8000f7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 020a 	orr.w	r2, r2, #10
 8000f8e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	e005      	b.n	8000fae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000faa:	2302      	movs	r3, #2
 8000fac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d04f      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d04a      	beq.n	8001080 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0204 	bic.w	r2, r2, #4
 8001006:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d029      	beq.n	8001066 <HAL_DMA_IRQHandler+0xae>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d022      	beq.n	8001062 <HAL_DMA_IRQHandler+0xaa>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a63      	ldr	r2, [pc, #396]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01a      	beq.n	800105c <HAL_DMA_IRQHandler+0xa4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a62      	ldr	r2, [pc, #392]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d012      	beq.n	8001056 <HAL_DMA_IRQHandler+0x9e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00a      	beq.n	8001050 <HAL_DMA_IRQHandler+0x98>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a5f      	ldr	r2, [pc, #380]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d102      	bne.n	800104a <HAL_DMA_IRQHandler+0x92>
 8001044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001048:	e00e      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800104a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800104e:	e00b      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001054:	e008      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800105a:	e005      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	e002      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	e000      	b.n	8001068 <HAL_DMA_IRQHandler+0xb0>
 8001066:	2304      	movs	r3, #4
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 800106a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 8094 	beq.w	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800107e:	e08e      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d056      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d051      	beq.n	800113e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 020a 	bic.w	r2, r2, #10
 80010b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_DMA_IRQHandler+0x1f0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d029      	beq.n	800111e <HAL_DMA_IRQHandler+0x166>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a37      	ldr	r2, [pc, #220]	; (80011ac <HAL_DMA_IRQHandler+0x1f4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d022      	beq.n	800111a <HAL_DMA_IRQHandler+0x162>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <HAL_DMA_IRQHandler+0x1f8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x15c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_DMA_IRQHandler+0x1fc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d012      	beq.n	800110e <HAL_DMA_IRQHandler+0x156>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_DMA_IRQHandler+0x200>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00a      	beq.n	8001108 <HAL_DMA_IRQHandler+0x150>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <HAL_DMA_IRQHandler+0x204>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d102      	bne.n	8001102 <HAL_DMA_IRQHandler+0x14a>
 80010fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001100:	e00e      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001106:	e00b      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	e008      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	e005      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	e002      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111a:	2320      	movs	r3, #32
 800111c:	e000      	b.n	8001120 <HAL_DMA_IRQHandler+0x168>
 800111e:	2302      	movs	r3, #2
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <HAL_DMA_IRQHandler+0x208>)
 8001122:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	2b00      	cmp	r3, #0
 8001132:	d034      	beq.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800113c:	e02f      	b.n	800119e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	2208      	movs	r2, #8
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d028      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d023      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 020e 	bic.w	r2, r2, #14
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
    }
  }
  return;
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
}
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020008 	.word	0x40020008
 80011ac:	4002001c 	.word	0x4002001c
 80011b0:	40020030 	.word	0x40020030
 80011b4:	40020044 	.word	0x40020044
 80011b8:	40020058 	.word	0x40020058
 80011bc:	4002006c 	.word	0x4002006c
 80011c0:	40020000 	.word	0x40020000

080011c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d108      	bne.n	8001204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001202:	e007      	b.n	8001214 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	60da      	str	r2, [r3, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e169      	b.n	8001508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8158 	bne.w	8001502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a9a      	ldr	r2, [pc, #616]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d05e      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800125c:	4a98      	ldr	r2, [pc, #608]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d875      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001262:	4a98      	ldr	r2, [pc, #608]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d058      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001268:	4a96      	ldr	r2, [pc, #600]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d86f      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800126e:	4a96      	ldr	r2, [pc, #600]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d052      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001274:	4a94      	ldr	r2, [pc, #592]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d869      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800127a:	4a94      	ldr	r2, [pc, #592]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d04c      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001280:	4a92      	ldr	r2, [pc, #584]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d863      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001286:	4a92      	ldr	r2, [pc, #584]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800128c:	4a90      	ldr	r2, [pc, #576]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d85d      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d82a      	bhi.n	80012ec <HAL_GPIO_Init+0xcc>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d859      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <HAL_GPIO_Init+0x80>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001307 	.word	0x08001307
 80012ac:	08001349 	.word	0x08001349
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	0800134f 	.word	0x0800134f
 80012bc:	0800134f 	.word	0x0800134f
 80012c0:	0800134f 	.word	0x0800134f
 80012c4:	0800134f 	.word	0x0800134f
 80012c8:	0800134f 	.word	0x0800134f
 80012cc:	0800134f 	.word	0x0800134f
 80012d0:	0800134f 	.word	0x0800134f
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	0800134f 	.word	0x0800134f
 80012dc:	0800134f 	.word	0x0800134f
 80012e0:	0800134f 	.word	0x0800134f
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001311 	.word	0x08001311
 80012ec:	4a79      	ldr	r2, [pc, #484]	; (80014d4 <HAL_GPIO_Init+0x2b4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f2:	e02c      	b.n	800134e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e029      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e024      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e01f      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	330c      	adds	r3, #12
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e01a      	b.n	8001350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001322:	2304      	movs	r3, #4
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e013      	b.n	8001350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	611a      	str	r2, [r3, #16]
          break;
 800133a:	e009      	b.n	8001350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	615a      	str	r2, [r3, #20]
          break;
 8001346:	e003      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x130>
          break;
 800134e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d801      	bhi.n	800135a <HAL_GPIO_Init+0x13a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e001      	b.n	800135e <HAL_GPIO_Init+0x13e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	; 0xff
 8001364:	d802      	bhi.n	800136c <HAL_GPIO_Init+0x14c>
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x152>
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	3b08      	subs	r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80b1 	beq.w	8001502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a0:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b8:	4a48      	ldr	r2, [pc, #288]	; (80014dc <HAL_GPIO_Init+0x2bc>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	; (80014e8 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001400:	2304      	movs	r3, #4
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	; (80014dc <HAL_GPIO_Init+0x2bc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	492c      	ldr	r1, [pc, #176]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4928      	ldr	r1, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4922      	ldr	r1, [pc, #136]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491e      	ldr	r1, [pc, #120]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4918      	ldr	r1, [pc, #96]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4914      	ldr	r1, [pc, #80]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	490e      	ldr	r1, [pc, #56]	; (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x2e2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_GPIO_Init+0x304>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4909      	ldr	r1, [pc, #36]	; (8001524 <HAL_GPIO_Init+0x304>)
 80014fe:	4013      	ands	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae8e 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	; 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43d9      	mvns	r1, r3
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	400b      	ands	r3, r1
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
	...

0800158c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e272      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 8087 	beq.w	80016ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ac:	4b92      	ldr	r3, [pc, #584]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d00c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b8:	4b8f      	ldr	r3, [pc, #572]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d112      	bne.n	80015ea <HAL_RCC_OscConfig+0x5e>
 80015c4:	4b8c      	ldr	r3, [pc, #560]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d0:	d10b      	bne.n	80015ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d2:	4b89      	ldr	r3, [pc, #548]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d06c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x12c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d168      	bne.n	80016b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e24c      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x76>
 80015f4:	4b80      	ldr	r3, [pc, #512]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a7f      	ldr	r2, [pc, #508]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e02e      	b.n	8001660 <HAL_RCC_OscConfig+0xd4>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x98>
 800160a:	4b7b      	ldr	r3, [pc, #492]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a7a      	ldr	r2, [pc, #488]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b78      	ldr	r3, [pc, #480]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a77      	ldr	r2, [pc, #476]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xd4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0xbc>
 800162e:	4b72      	ldr	r3, [pc, #456]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a71      	ldr	r2, [pc, #452]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6f      	ldr	r3, [pc, #444]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xd4>
 8001648:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a6a      	ldr	r2, [pc, #424]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a67      	ldr	r2, [pc, #412]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fad4 	bl	8000c14 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fad0 	bl	8000c14 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e200      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xe4>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fac0 	bl	8000c14 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fabc 	bl	8000c14 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1ec      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x10c>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016c6:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016d2:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d11c      	bne.n	8001718 <HAL_RCC_OscConfig+0x18c>
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x176>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1c0      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4939      	ldr	r1, [pc, #228]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e03a      	b.n	800178e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b36      	ldr	r3, [pc, #216]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fa75 	bl	8000c14 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff fa71 	bl	8000c14 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1a1      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4927      	ldr	r1, [pc, #156]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fa54 	bl	8000c14 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fa50 	bl	8000c14 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e180      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d03a      	beq.n	8001810 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d019      	beq.n	80017d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_RCC_OscConfig+0x274>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff fa34 	bl	8000c14 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fa30 	bl	8000c14 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e160      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f000 face 	bl	8001d70 <RCC_Delay>
 80017d4:	e01c      	b.n	8001810 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_RCC_OscConfig+0x274>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa1a 	bl	8000c14 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e2:	e00f      	b.n	8001804 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff fa16 	bl	8000c14 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d908      	bls.n	8001804 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e146      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	42420000 	.word	0x42420000
 8001800:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	4b92      	ldr	r3, [pc, #584]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e9      	bne.n	80017e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a6 	beq.w	800196a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10d      	bne.n	800184a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a87      	ldr	r2, [pc, #540]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b85      	ldr	r3, [pc, #532]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	4b82      	ldr	r3, [pc, #520]	; (8001a54 <HAL_RCC_OscConfig+0x4c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001856:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <HAL_RCC_OscConfig+0x4c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7e      	ldr	r2, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x4c8>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff f9d7 	bl	8000c14 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff f9d3 	bl	8000c14 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	; 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e103      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x4c8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x312>
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a6e      	ldr	r2, [pc, #440]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	e02d      	b.n	80018fa <HAL_RCC_OscConfig+0x36e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x334>
 80018a6:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a69      	ldr	r2, [pc, #420]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a66      	ldr	r2, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	e01c      	b.n	80018fa <HAL_RCC_OscConfig+0x36e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x356>
 80018c8:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a60      	ldr	r2, [pc, #384]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a5d      	ldr	r2, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0x36e>
 80018e2:	4b5b      	ldr	r3, [pc, #364]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a5a      	ldr	r2, [pc, #360]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d015      	beq.n	800192e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff f987 	bl	8000c14 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f983 	bl	8000c14 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e0b1      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0ee      	beq.n	800190a <HAL_RCC_OscConfig+0x37e>
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff f971 	bl	8000c14 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7ff f96d 	bl	8000c14 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e09b      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194c:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ee      	bne.n	8001936 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195e:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8087 	beq.w	8001a82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d061      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d146      	bne.n	8001a16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff f941 	bl	8000c14 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff f93d 	bl	8000c14 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e06d      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4921      	ldr	r1, [pc, #132]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a19      	ldr	r1, [r3, #32]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	430b      	orrs	r3, r1
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff f911 	bl	8000c14 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f6:	f7ff f90d 	bl	8000c14 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e03d      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x46a>
 8001a14:	e035      	b.n	8001a82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f8fa 	bl	8000c14 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f8f6 	bl	8000c14 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e026      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x498>
 8001a42:	e01e      	b.n	8001a82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e019      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40007000 	.word	0x40007000
 8001a58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x500>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0d0      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d910      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0207 	bic.w	r2, r3, #7
 8001aba:	4965      	ldr	r1, [pc, #404]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b8      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001af6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	494d      	ldr	r1, [pc, #308]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d040      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d115      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e073      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06b      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 0203 	bic.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4936      	ldr	r1, [pc, #216]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b80:	f7ff f848 	bl	8000c14 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7ff f844 	bl	8000c14 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e053      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 020c 	and.w	r2, r3, #12
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1eb      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d210      	bcs.n	8001be0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e032      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4916      	ldr	r1, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1e:	f000 f821 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	490a      	ldr	r1, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	5ccb      	ldrb	r3, [r1, r3]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1cc>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1d0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe ffa6 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40022000 	.word	0x40022000
 8001c54:	40021000 	.word	0x40021000
 8001c58:	080050fc 	.word	0x080050fc
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	20000008 	.word	0x20000008

08001c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x30>
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x36>
 8001c92:	e027      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	e027      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0c5b      	lsrs	r3, r3, #17
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e004      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	613b      	str	r3, [r7, #16]
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ce6:	613b      	str	r3, [r7, #16]
      break;
 8001ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cea:	693b      	ldr	r3, [r7, #16]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	007a1200 	.word	0x007a1200
 8001d00:	08005114 	.word	0x08005114
 8001d04:	08005124 	.word	0x08005124
 8001d08:	003d0900 	.word	0x003d0900

08001d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d24:	f7ff fff2 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	0800510c 	.word	0x0800510c

08001d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d4c:	f7ff ffde 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0adb      	lsrs	r3, r3, #11
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4903      	ldr	r1, [pc, #12]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	0800510c 	.word	0x0800510c

08001d70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <RCC_Delay+0x34>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <RCC_Delay+0x38>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0a5b      	lsrs	r3, r3, #9
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d8c:	bf00      	nop
  }
  while (Delay --);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1e5a      	subs	r2, r3, #1
 8001d92:	60fa      	str	r2, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <RCC_Delay+0x1c>
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	20000004 	.word	0x20000004
 8001da8:	10624dd3 	.word	0x10624dd3

08001dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e042      	b.n	8001e44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fd50 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2224      	movs	r2, #36	; 0x24
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fbb7 	bl	8002564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d16d      	bne.n	8001f48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_UART_Transmit+0x2c>
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e066      	b.n	8001f4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2221      	movs	r2, #33	; 0x21
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8a:	f7fe fec3 	bl	8000c14 <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	88fa      	ldrh	r2, [r7, #6]
 8001e9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea4:	d108      	bne.n	8001eb8 <HAL_UART_Transmit+0x6c>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d104      	bne.n	8001eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e003      	b.n	8001ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ec0:	e02a      	b.n	8001f18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f9b6 	bl	800223e <UART_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e036      	b.n	8001f4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	e007      	b.n	8001f0a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	781a      	ldrb	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	3301      	adds	r3, #1
 8001f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1cf      	bne.n	8001ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2140      	movs	r1, #64	; 0x40
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f986 	bl	800223e <UART_WaitOnFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e006      	b.n	8001f4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b08c      	sub	sp, #48	; 0x30
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d14a      	bne.n	8002002 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e043      	b.n	8002004 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f9c4 	bl	800231c <UART_Start_Receive_DMA>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d12c      	bne.n	8001ffc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d125      	bne.n	8001ff6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	330c      	adds	r3, #12
 8001fc6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	e853 3f00 	ldrex	r3, [r3]
 8001fce:	617b      	str	r3, [r7, #20]
   return(result);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe0:	627a      	str	r2, [r7, #36]	; 0x24
 8001fe2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	e841 2300 	strex	r3, r2, [r1]
 8001fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e5      	bne.n	8001fc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8001ff4:	e002      	b.n	8001ffc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8001ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002000:	e000      	b.n	8002004 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	3730      	adds	r7, #48	; 0x30
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b09c      	sub	sp, #112	; 0x70
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d172      	bne.n	8002144 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800205e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002060:	2200      	movs	r2, #0
 8002062:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	330c      	adds	r3, #12
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206e:	e853 3f00 	ldrex	r3, [r3]
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800207a:	66bb      	str	r3, [r7, #104]	; 0x68
 800207c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	330c      	adds	r3, #12
 8002082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002084:	65ba      	str	r2, [r7, #88]	; 0x58
 8002086:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800208a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800208c:	e841 2300 	strex	r3, r2, [r1]
 8002090:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e5      	bne.n	8002064 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3314      	adds	r3, #20
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a2:	e853 3f00 	ldrex	r3, [r3]
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80020a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
 80020b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3314      	adds	r3, #20
 80020b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020b8:	647a      	str	r2, [r7, #68]	; 0x44
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020c0:	e841 2300 	strex	r3, r2, [r1]
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80020c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e5      	bne.n	8002098 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3314      	adds	r3, #20
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	e853 3f00 	ldrex	r3, [r3]
 80020da:	623b      	str	r3, [r7, #32]
   return(result);
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020e2:	663b      	str	r3, [r7, #96]	; 0x60
 80020e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3314      	adds	r3, #20
 80020ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020ec:	633a      	str	r2, [r7, #48]	; 0x30
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020f4:	e841 2300 	strex	r3, r2, [r1]
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e5      	bne.n	80020cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	2b01      	cmp	r3, #1
 800210e:	d119      	bne.n	8002144 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	330c      	adds	r3, #12
 8002116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	e853 3f00 	ldrex	r3, [r3]
 800211e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0310 	bic.w	r3, r3, #16
 8002126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002130:	61fa      	str	r2, [r7, #28]
 8002132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002134:	69b9      	ldr	r1, [r7, #24]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	e841 2300 	strex	r3, r2, [r1]
 800213c:	617b      	str	r3, [r7, #20]
   return(result);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e5      	bne.n	8002110 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002146:	2200      	movs	r2, #0
 8002148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800214a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	2b01      	cmp	r3, #1
 8002150:	d106      	bne.n	8002160 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002156:	4619      	mov	r1, r3
 8002158:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800215a:	f7fe f9f1 	bl	8000540 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800215e:	e002      	b.n	8002166 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002160:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002162:	f7ff ff53 	bl	800200c <HAL_UART_RxCpltCallback>
}
 8002166:	bf00      	nop
 8002168:	3770      	adds	r7, #112	; 0x70
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	2b01      	cmp	r3, #1
 8002188:	d108      	bne.n	800219c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	b29b      	uxth	r3, r3
 8002192:	4619      	mov	r1, r3
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7fe f9d3 	bl	8000540 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800219a:	e002      	b.n	80021a2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff ff3e 	bl	800201e <HAL_UART_RxHalfCpltCallback>
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b21      	cmp	r3, #33	; 0x21
 80021dc:	d108      	bne.n	80021f0 <UART_DMAError+0x46>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2200      	movs	r2, #0
 80021e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80021ea:	68b8      	ldr	r0, [r7, #8]
 80021ec:	f000 f930 	bl	8002450 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b22      	cmp	r3, #34	; 0x22
 8002210:	d108      	bne.n	8002224 <UART_DMAError+0x7a>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800221e:	68b8      	ldr	r0, [r7, #8]
 8002220:	f000 f93d 	bl	800249e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0210 	orr.w	r2, r3, #16
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002230:	68b8      	ldr	r0, [r7, #8]
 8002232:	f7ff fefd 	bl	8002030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b090      	sub	sp, #64	; 0x40
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800224e:	e050      	b.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002256:	d04c      	beq.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <UART_WaitOnFlagUntilTimeout+0x30>
 800225e:	f7fe fcd9 	bl	8000c14 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800226a:	429a      	cmp	r2, r3
 800226c:	d241      	bcs.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	330c      	adds	r3, #12
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	e853 3f00 	ldrex	r3, [r3]
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	330c      	adds	r3, #12
 800228c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800228e:	637a      	str	r2, [r7, #52]	; 0x34
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002296:	e841 2300 	strex	r3, r2, [r1]
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1e5      	bne.n	800226e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3314      	adds	r3, #20
 80022a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	e853 3f00 	ldrex	r3, [r3]
 80022b0:	613b      	str	r3, [r7, #16]
   return(result);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3314      	adds	r3, #20
 80022c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022c2:	623a      	str	r2, [r7, #32]
 80022c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	69f9      	ldr	r1, [r7, #28]
 80022c8:	6a3a      	ldr	r2, [r7, #32]
 80022ca:	e841 2300 	strex	r3, r2, [r1]
 80022ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e5      	bne.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e00f      	b.n	8002312 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4013      	ands	r3, r2
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	429a      	cmp	r2, r3
 800230e:	d09f      	beq.n	8002250 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3740      	adds	r7, #64	; 0x40
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b098      	sub	sp, #96	; 0x60
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2222      	movs	r2, #34	; 0x22
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	4a3e      	ldr	r2, [pc, #248]	; (8002444 <UART_Start_Receive_DMA+0x128>)
 800234a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <UART_Start_Receive_DMA+0x12c>)
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	4a3c      	ldr	r2, [pc, #240]	; (800244c <UART_Start_Receive_DMA+0x130>)
 800235a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	2200      	movs	r2, #0
 8002362:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	f7fe fdbc 	bl	8000ef8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d019      	beq.n	80023d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a8:	e853 3f00 	ldrex	r3, [r3]
 80023ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80023ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023c6:	e841 2300 	strex	r3, r2, [r1]
 80023ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80023cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1e5      	bne.n	800239e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3314      	adds	r3, #20
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	e853 3f00 	ldrex	r3, [r3]
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	657b      	str	r3, [r7, #84]	; 0x54
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023fa:	e841 2300 	strex	r3, r2, [r1]
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e5      	bne.n	80023d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3314      	adds	r3, #20
 800240c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	e853 3f00 	ldrex	r3, [r3]
 8002414:	617b      	str	r3, [r7, #20]
   return(result);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800241c:	653b      	str	r3, [r7, #80]	; 0x50
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3314      	adds	r3, #20
 8002424:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002426:	627a      	str	r2, [r7, #36]	; 0x24
 8002428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	6a39      	ldr	r1, [r7, #32]
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	e841 2300 	strex	r3, r2, [r1]
 8002432:	61fb      	str	r3, [r7, #28]
   return(result);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e5      	bne.n	8002406 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3760      	adds	r7, #96	; 0x60
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	08002043 	.word	0x08002043
 8002448:	0800216f 	.word	0x0800216f
 800244c:	080021ab 	.word	0x080021ab

08002450 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	; 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	330c      	adds	r3, #12
 800245e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	e853 3f00 	ldrex	r3, [r3]
 8002466:	60bb      	str	r3, [r7, #8]
   return(result);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	61ba      	str	r2, [r7, #24]
 800247a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247c:	6979      	ldr	r1, [r7, #20]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	e841 2300 	strex	r3, r2, [r1]
 8002484:	613b      	str	r3, [r7, #16]
   return(result);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e5      	bne.n	8002458 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002494:	bf00      	nop
 8002496:	3724      	adds	r7, #36	; 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800249e:	b480      	push	{r7}
 80024a0:	b095      	sub	sp, #84	; 0x54
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	e853 3f00 	ldrex	r3, [r3]
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024c6:	643a      	str	r2, [r7, #64]	; 0x40
 80024c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024ce:	e841 2300 	strex	r3, r2, [r1]
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e5      	bne.n	80024a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3314      	adds	r3, #20
 80024e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3314      	adds	r3, #20
 80024f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002502:	e841 2300 	strex	r3, r2, [r1]
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1e5      	bne.n	80024da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	2b01      	cmp	r3, #1
 8002514:	d119      	bne.n	800254a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	e853 3f00 	ldrex	r3, [r3]
 8002524:	60bb      	str	r3, [r7, #8]
   return(result);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f023 0310 	bic.w	r3, r3, #16
 800252c:	647b      	str	r3, [r7, #68]	; 0x44
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002536:	61ba      	str	r2, [r7, #24]
 8002538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253a:	6979      	ldr	r1, [r7, #20]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	e841 2300 	strex	r3, r2, [r1]
 8002542:	613b      	str	r3, [r7, #16]
   return(result);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e5      	bne.n	8002516 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002558:	bf00      	nop
 800255a:	3754      	adds	r7, #84	; 0x54
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
	...

08002564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800259e:	f023 030c 	bic.w	r3, r3, #12
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2c      	ldr	r2, [pc, #176]	; (8002678 <UART_SetConfig+0x114>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d103      	bne.n	80025d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025cc:	f7ff fbbc 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	e002      	b.n	80025da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025d4:	f7ff fba4 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 80025d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	009a      	lsls	r2, r3, #2
 80025e4:	441a      	add	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	4a22      	ldr	r2, [pc, #136]	; (800267c <UART_SetConfig+0x118>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	0119      	lsls	r1, r3, #4
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	009a      	lsls	r2, r3, #2
 8002604:	441a      	add	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <UART_SetConfig+0x118>)
 8002612:	fba3 0302 	umull	r0, r3, r3, r2
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2064      	movs	r0, #100	; 0x64
 800261a:	fb00 f303 	mul.w	r3, r0, r3
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	3332      	adds	r3, #50	; 0x32
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <UART_SetConfig+0x118>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002630:	4419      	add	r1, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	009a      	lsls	r2, r3, #2
 800263c:	441a      	add	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fbb2 f2f3 	udiv	r2, r2, r3
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <UART_SetConfig+0x118>)
 800264a:	fba3 0302 	umull	r0, r3, r3, r2
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2064      	movs	r0, #100	; 0x64
 8002652:	fb00 f303 	mul.w	r3, r0, r3
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	3332      	adds	r3, #50	; 0x32
 800265c:	4a07      	ldr	r2, [pc, #28]	; (800267c <UART_SetConfig+0x118>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	440a      	add	r2, r1
 800266e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40013800 	.word	0x40013800
 800267c:	51eb851f 	.word	0x51eb851f

08002680 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002684:	f001 f9f6 	bl	8003a74 <vTaskStartScheduler>
  
  return osOK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}

0800268e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <osDelay+0x16>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	e000      	b.n	80026a6 <osDelay+0x18>
 80026a4:	2301      	movs	r3, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 f886 	bl	80037b8 <vTaskDelay>
  
  return osOK;
 80026ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af02      	add	r7, sp, #8
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00f      	beq.n	80026e8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d10a      	bne.n	80026e4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	9200      	str	r2, [sp, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	2001      	movs	r0, #1
 80026dc:	f000 f934 	bl	8002948 <xQueueGenericCreateStatic>
 80026e0:	4603      	mov	r3, r0
 80026e2:	e016      	b.n	8002712 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e014      	b.n	8002712 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d110      	bne.n	8002710 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80026ee:	2203      	movs	r2, #3
 80026f0:	2100      	movs	r1, #0
 80026f2:	2001      	movs	r0, #1
 80026f4:	f000 f99f 	bl	8002a36 <xQueueGenericCreate>
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <osSemaphoreCreate+0x56>
 8002700:	2300      	movs	r3, #0
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f9f2 	bl	8002af0 <xQueueGenericSend>
      return sema;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	e000      	b.n	8002712 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002710:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f103 0208 	add.w	r2, r3, #8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002732:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0208 	add.w	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f103 0208 	add.w	r2, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	601a      	str	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027cc:	d103      	bne.n	80027d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e00c      	b.n	80027f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3308      	adds	r3, #8
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e002      	b.n	80027e4 <vListInsert+0x2e>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d2f6      	bcs.n	80027de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6892      	ldr	r2, [r2, #8]
 800283c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6852      	ldr	r2, [r2, #4]
 8002846:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d103      	bne.n	800285a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800289e:	bf00      	nop
 80028a0:	e7fe      	b.n	80028a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028a2:	f002 f83b 	bl	800491c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	68f9      	ldr	r1, [r7, #12]
 80028b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	441a      	add	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	3b01      	subs	r3, #1
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	441a      	add	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d114      	bne.n	8002922 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01a      	beq.n	8002936 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3310      	adds	r3, #16
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fb0d 	bl	8003f24 <xTaskRemoveFromEventList>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d012      	beq.n	8002936 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <xQueueGenericReset+0xcc>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	e009      	b.n	8002936 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3310      	adds	r3, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fef7 	bl	800271a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3324      	adds	r3, #36	; 0x24
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fef2 	bl	800271a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002936:	f002 f821 	bl	800497c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800293a:	2301      	movs	r3, #1
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08e      	sub	sp, #56	; 0x38
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <xQueueGenericCreateStatic+0x52>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <xQueueGenericCreateStatic+0x56>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <xQueueGenericCreateStatic+0x58>
 800299e:	2300      	movs	r3, #0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	623b      	str	r3, [r7, #32]
}
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <xQueueGenericCreateStatic+0x7e>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <xQueueGenericCreateStatic+0x82>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <xQueueGenericCreateStatic+0x84>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	61fb      	str	r3, [r7, #28]
}
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029e6:	2348      	movs	r3, #72	; 0x48
 80029e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b48      	cmp	r3, #72	; 0x48
 80029ee:	d00a      	beq.n	8002a06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	61bb      	str	r3, [r7, #24]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a18:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f843 	bl	8002ab2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3730      	adds	r7, #48	; 0x30
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b08a      	sub	sp, #40	; 0x28
 8002a3a:	af02      	add	r7, sp, #8
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	4613      	mov	r3, r2
 8002a42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	613b      	str	r3, [r7, #16]
}
 8002a5c:	bf00      	nop
 8002a5e:	e7fe      	b.n	8002a5e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e004      	b.n	8002a76 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3348      	adds	r3, #72	; 0x48
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 f84e 	bl	8004b1c <pvPortMalloc>
 8002a80:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00f      	beq.n	8002aa8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	3348      	adds	r3, #72	; 0x48
 8002a8c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a96:	79fa      	ldrb	r2, [r7, #7]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f805 	bl	8002ab2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
	}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e002      	b.n	8002ad4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	f7ff fec8 	bl	8002878 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08e      	sub	sp, #56	; 0x38
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueGenericSend+0x32>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <xQueueGenericSend+0x40>
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <xQueueGenericSend+0x44>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <xQueueGenericSend+0x46>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <xQueueGenericSend+0x60>
	__asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b4c:	bf00      	nop
 8002b4e:	e7fe      	b.n	8002b4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d103      	bne.n	8002b5e <xQueueGenericSend+0x6e>
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <xQueueGenericSend+0x72>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <xQueueGenericSend+0x74>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <xQueueGenericSend+0x8e>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	623b      	str	r3, [r7, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b7e:	f001 fb95 	bl	80042ac <xTaskGetSchedulerState>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <xQueueGenericSend+0x9e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <xQueueGenericSend+0xa2>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <xQueueGenericSend+0xa4>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <xQueueGenericSend+0xbe>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	61fb      	str	r3, [r7, #28]
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bae:	f001 feb5 	bl	800491c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <xQueueGenericSend+0xd4>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d129      	bne.n	8002c18 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bca:	f000 fb43 	bl	8003254 <prvCopyDataToQueue>
 8002bce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	3324      	adds	r3, #36	; 0x24
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 f9a1 	bl	8003f24 <xTaskRemoveFromEventList>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002be8:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <xQueueGenericSend+0x1f8>)
 8002bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	e00a      	b.n	8002c10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <xQueueGenericSend+0x1f8>)
 8002c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c10:	f001 feb4 	bl	800497c <vPortExitCritical>
				return pdPASS;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e063      	b.n	8002ce0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c1e:	f001 fead 	bl	800497c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e05c      	b.n	8002ce0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 f9d9 	bl	8003fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c36:	2301      	movs	r3, #1
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c3a:	f001 fe9f 	bl	800497c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c3e:	f000 ff83 	bl	8003b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c42:	f001 fe6b 	bl	800491c <vPortEnterCritical>
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c52:	d103      	bne.n	8002c5c <xQueueGenericSend+0x16c>
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c68:	d103      	bne.n	8002c72 <xQueueGenericSend+0x182>
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c72:	f001 fe83 	bl	800497c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c76:	1d3a      	adds	r2, r7, #4
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 f9c8 	bl	8004014 <xTaskCheckForTimeOut>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d124      	bne.n	8002cd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8c:	f000 fbda 	bl	8003444 <prvIsQueueFull>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d018      	beq.n	8002cc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	3310      	adds	r3, #16
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 f91c 	bl	8003edc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca6:	f000 fb65 	bl	8003374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002caa:	f000 ff5b 	bl	8003b64 <xTaskResumeAll>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f af7c 	bne.w	8002bae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <xQueueGenericSend+0x1f8>)
 8002cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	e772      	b.n	8002bae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cca:	f000 fb53 	bl	8003374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cce:	f000 ff49 	bl	8003b64 <xTaskResumeAll>
 8002cd2:	e76c      	b.n	8002bae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd6:	f000 fb4d 	bl	8003374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cda:	f000 ff43 	bl	8003b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cde:	2300      	movs	r3, #0
		}
	}
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3738      	adds	r7, #56	; 0x38
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08e      	sub	sp, #56	; 0x38
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	623b      	str	r3, [r7, #32]
}
 8002d12:	bf00      	nop
 8002d14:	e7fe      	b.n	8002d14 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	61fb      	str	r3, [r7, #28]
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <xQueueGiveFromISR+0x58>
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <xQueueGiveFromISR+0x5c>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <xQueueGiveFromISR+0x5e>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	61bb      	str	r3, [r7, #24]
}
 8002d60:	bf00      	nop
 8002d62:	e7fe      	b.n	8002d62 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d64:	f001 fe9c 	bl	8004aa0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d68:	f3ef 8211 	mrs	r2, BASEPRI
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	617a      	str	r2, [r7, #20]
 8002d7e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d80:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d22b      	bcs.n	8002dec <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002da6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dae:	d112      	bne.n	8002dd6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d016      	beq.n	8002de6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	3324      	adds	r3, #36	; 0x24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f8b1 	bl	8003f24 <xTaskRemoveFromEventList>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	b25a      	sxtb	r2, r3
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002de6:	2301      	movs	r3, #1
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dea:	e001      	b.n	8002df0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3738      	adds	r7, #56	; 0x38
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	; 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10a      	bne.n	8002e38 <xQueueReceive+0x30>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	623b      	str	r3, [r7, #32]
}
 8002e34:	bf00      	nop
 8002e36:	e7fe      	b.n	8002e36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <xQueueReceive+0x3e>
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <xQueueReceive+0x42>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <xQueueReceive+0x44>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueReceive+0x5e>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	61fb      	str	r3, [r7, #28]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e66:	f001 fa21 	bl	80042ac <xTaskGetSchedulerState>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <xQueueReceive+0x6e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <xQueueReceive+0x72>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueReceive+0x74>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueReceive+0x8e>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	61bb      	str	r3, [r7, #24]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e96:	f001 fd41 	bl	800491c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01f      	beq.n	8002ee6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eaa:	f000 fa3d 	bl	8003328 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00f      	beq.n	8002ede <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 f82e 	bl	8003f24 <xTaskRemoveFromEventList>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <xQueueReceive+0x1bc>)
 8002ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ede:	f001 fd4d 	bl	800497c <vPortExitCritical>
				return pdPASS;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e069      	b.n	8002fba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eec:	f001 fd46 	bl	800497c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e062      	b.n	8002fba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 f872 	bl	8003fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f08:	f001 fd38 	bl	800497c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f0c:	f000 fe1c 	bl	8003b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f10:	f001 fd04 	bl	800491c <vPortEnterCritical>
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f20:	d103      	bne.n	8002f2a <xQueueReceive+0x122>
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f36:	d103      	bne.n	8002f40 <xQueueReceive+0x138>
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f40:	f001 fd1c 	bl	800497c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f44:	1d3a      	adds	r2, r7, #4
 8002f46:	f107 0310 	add.w	r3, r7, #16
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 f861 	bl	8004014 <xTaskCheckForTimeOut>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d123      	bne.n	8002fa0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5a:	f000 fa5d 	bl	8003418 <prvIsQueueEmpty>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d017      	beq.n	8002f94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	3324      	adds	r3, #36	; 0x24
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 ffb5 	bl	8003edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f74:	f000 f9fe 	bl	8003374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f78:	f000 fdf4 	bl	8003b64 <xTaskResumeAll>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d189      	bne.n	8002e96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <xQueueReceive+0x1bc>)
 8002f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	e780      	b.n	8002e96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f96:	f000 f9ed 	bl	8003374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f9a:	f000 fde3 	bl	8003b64 <xTaskResumeAll>
 8002f9e:	e77a      	b.n	8002e96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa2:	f000 f9e7 	bl	8003374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fa6:	f000 fddd 	bl	8003b64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fac:	f000 fa34 	bl	8003418 <prvIsQueueEmpty>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f43f af6f 	beq.w	8002e96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3730      	adds	r7, #48	; 0x30
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08e      	sub	sp, #56	; 0x38
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	623b      	str	r3, [r7, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	e7fe      	b.n	8002ff8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	61fb      	str	r3, [r7, #28]
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003018:	f001 f948 	bl	80042ac <xTaskGetSchedulerState>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <xQueueSemaphoreTake+0x60>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <xQueueSemaphoreTake+0x64>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <xQueueSemaphoreTake+0x66>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	61bb      	str	r3, [r7, #24]
}
 8003044:	bf00      	nop
 8003046:	e7fe      	b.n	8003046 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003048:	f001 fc68 	bl	800491c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d024      	beq.n	80030a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	1e5a      	subs	r2, r3, #1
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d104      	bne.n	8003072 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003068:	f001 faea 	bl	8004640 <pvTaskIncrementMutexHeldCount>
 800306c:	4602      	mov	r2, r0
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00f      	beq.n	800309a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	3310      	adds	r3, #16
 800307e:	4618      	mov	r0, r3
 8003080:	f000 ff50 	bl	8003f24 <xTaskRemoveFromEventList>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800308a:	4b54      	ldr	r3, [pc, #336]	; (80031dc <xQueueSemaphoreTake+0x214>)
 800308c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800309a:	f001 fc6f 	bl	800497c <vPortExitCritical>
				return pdPASS;
 800309e:	2301      	movs	r3, #1
 80030a0:	e097      	b.n	80031d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d111      	bne.n	80030cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	617b      	str	r3, [r7, #20]
}
 80030c0:	bf00      	nop
 80030c2:	e7fe      	b.n	80030c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030c4:	f001 fc5a 	bl	800497c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e082      	b.n	80031d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030d2:	f107 030c 	add.w	r3, r7, #12
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ff86 	bl	8003fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030dc:	2301      	movs	r3, #1
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030e0:	f001 fc4c 	bl	800497c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030e4:	f000 fd30 	bl	8003b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030e8:	f001 fc18 	bl	800491c <vPortEnterCritical>
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f8:	d103      	bne.n	8003102 <xQueueSemaphoreTake+0x13a>
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003108:	b25b      	sxtb	r3, r3
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310e:	d103      	bne.n	8003118 <xQueueSemaphoreTake+0x150>
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003118:	f001 fc30 	bl	800497c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800311c:	463a      	mov	r2, r7
 800311e:	f107 030c 	add.w	r3, r7, #12
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f000 ff75 	bl	8004014 <xTaskCheckForTimeOut>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d132      	bne.n	8003196 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003132:	f000 f971 	bl	8003418 <prvIsQueueEmpty>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d026      	beq.n	800318a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003144:	f001 fbea 	bl	800491c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f8cb 	bl	80042e8 <xTaskPriorityInherit>
 8003152:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003154:	f001 fc12 	bl	800497c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	3324      	adds	r3, #36	; 0x24
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f000 febb 	bl	8003edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003168:	f000 f904 	bl	8003374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800316c:	f000 fcfa 	bl	8003b64 <xTaskResumeAll>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	f47f af68 	bne.w	8003048 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <xQueueSemaphoreTake+0x214>)
 800317a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	e75e      	b.n	8003048 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800318a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800318c:	f000 f8f2 	bl	8003374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003190:	f000 fce8 	bl	8003b64 <xTaskResumeAll>
 8003194:	e758      	b.n	8003048 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003198:	f000 f8ec 	bl	8003374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800319c:	f000 fce2 	bl	8003b64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031a2:	f000 f939 	bl	8003418 <prvIsQueueEmpty>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f43f af4d 	beq.w	8003048 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80031b4:	f001 fbb2 	bl	800491c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031ba:	f000 f834 	bl	8003226 <prvGetDisinheritPriorityAfterTimeout>
 80031be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 f99a 	bl	8004500 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80031cc:	f001 fbd6 	bl	800497c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3738      	adds	r7, #56	; 0x38
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	60fb      	str	r3, [r7, #12]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8003208:	f001 fb88 	bl	800491c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8003218:	f001 fbb0 	bl	800497c <vPortExitCritical>

	return uxReturn;
 800321c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1c3 0307 	rsb	r3, r3, #7
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e001      	b.n	8003248 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003248:	68fb      	ldr	r3, [r7, #12]
	}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d14d      	bne.n	8003316 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	f001 f8b8 	bl	80043f4 <xTaskPriorityDisinherit>
 8003284:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	e043      	b.n	8003316 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d119      	bne.n	80032c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6898      	ldr	r0, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	461a      	mov	r2, r3
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	f001 fe3a 	bl	8004f18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	441a      	add	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d32b      	bcc.n	8003316 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	e026      	b.n	8003316 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68d8      	ldr	r0, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	461a      	mov	r2, r3
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	f001 fe20 	bl	8004f18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	425b      	negs	r3, r3
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d207      	bcs.n	8003304 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	425b      	negs	r3, r3
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d105      	bne.n	8003316 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	3b01      	subs	r3, #1
 8003314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800331e:	697b      	ldr	r3, [r7, #20]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d018      	beq.n	800336c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	441a      	add	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	d303      	bcc.n	800335c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68d9      	ldr	r1, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	461a      	mov	r2, r3
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	f001 fdd6 	bl	8004f18 <memcpy>
	}
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800337c:	f001 face 	bl	800491c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003386:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003388:	e011      	b.n	80033ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d012      	beq.n	80033b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3324      	adds	r3, #36	; 0x24
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fdc4 	bl	8003f24 <xTaskRemoveFromEventList>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033a2:	f000 fe99 	bl	80040d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dce9      	bgt.n	800338a <prvUnlockQueue+0x16>
 80033b6:	e000      	b.n	80033ba <prvUnlockQueue+0x46>
					break;
 80033b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	22ff      	movs	r2, #255	; 0xff
 80033be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033c2:	f001 fadb 	bl	800497c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033c6:	f001 faa9 	bl	800491c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033d2:	e011      	b.n	80033f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d012      	beq.n	8003402 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3310      	adds	r3, #16
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fd9f 	bl	8003f24 <xTaskRemoveFromEventList>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033ec:	f000 fe74 	bl	80040d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033f0:	7bbb      	ldrb	r3, [r7, #14]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	dce9      	bgt.n	80033d4 <prvUnlockQueue+0x60>
 8003400:	e000      	b.n	8003404 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003402:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	22ff      	movs	r2, #255	; 0xff
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800340c:	f001 fab6 	bl	800497c <vPortExitCritical>
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003420:	f001 fa7c 	bl	800491c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800342c:	2301      	movs	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e001      	b.n	8003436 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003436:	f001 faa1 	bl	800497c <vPortExitCritical>

	return xReturn;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800344c:	f001 fa66 	bl	800491c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	429a      	cmp	r2, r3
 800345a:	d102      	bne.n	8003462 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800345c:	2301      	movs	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e001      	b.n	8003466 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003466:	f001 fa89 	bl	800497c <vPortExitCritical>

	return xReturn;
 800346a:	68fb      	ldr	r3, [r7, #12]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	; 0x38
 8003478:	af04      	add	r7, sp, #16
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	623b      	str	r3, [r7, #32]
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <xTaskCreateStatic+0x46>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	61fb      	str	r3, [r7, #28]
}
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ba:	23b4      	movs	r3, #180	; 0xb4
 80034bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2bb4      	cmp	r3, #180	; 0xb4
 80034c2:	d00a      	beq.n	80034da <xTaskCreateStatic+0x66>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61bb      	str	r3, [r7, #24]
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01e      	beq.n	800351e <xTaskCreateStatic+0xaa>
 80034e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01b      	beq.n	800351e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034f8:	2300      	movs	r3, #0
 80034fa:	9303      	str	r3, [sp, #12]
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	f107 0314 	add.w	r3, r7, #20
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f851 	bl	80035b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003518:	f000 f8e4 	bl	80036e4 <prvAddNewTaskToReadyList>
 800351c:	e001      	b.n	8003522 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003522:	697b      	ldr	r3, [r7, #20]
	}
 8003524:	4618      	mov	r0, r3
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	; 0x30
 8003530:	af04      	add	r7, sp, #16
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4618      	mov	r0, r3
 8003542:	f001 faeb 	bl	8004b1c <pvPortMalloc>
 8003546:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00e      	beq.n	800356c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800354e:	20b4      	movs	r0, #180	; 0xb4
 8003550:	f001 fae4 	bl	8004b1c <pvPortMalloc>
 8003554:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
 8003562:	e005      	b.n	8003570 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003564:	6978      	ldr	r0, [r7, #20]
 8003566:	f001 fb9d 	bl	8004ca4 <vPortFree>
 800356a:	e001      	b.n	8003570 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d017      	beq.n	80035a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	2300      	movs	r3, #0
 8003582:	9303      	str	r3, [sp, #12]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	9302      	str	r3, [sp, #8]
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f80f 	bl	80035b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800359a:	69f8      	ldr	r0, [r7, #28]
 800359c:	f000 f8a2 	bl	80036e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035a0:	2301      	movs	r3, #1
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e002      	b.n	80035ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035ac:	69bb      	ldr	r3, [r7, #24]
	}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035d0:	3b01      	subs	r3, #1
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f023 0307 	bic.w	r3, r3, #7
 80035de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <prvInitialiseNewTask+0x48>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	617b      	str	r3, [r7, #20]
}
 80035fc:	bf00      	nop
 80035fe:	e7fe      	b.n	80035fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e012      	b.n	800362c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	7819      	ldrb	r1, [r3, #0]
 800360e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	3334      	adds	r3, #52	; 0x34
 8003616:	460a      	mov	r2, r1
 8003618:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4413      	add	r3, r2
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3301      	adds	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	d9e9      	bls.n	8003606 <prvInitialiseNewTask+0x4e>
 8003632:	e000      	b.n	8003636 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003634:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	2b06      	cmp	r3, #6
 8003642:	d901      	bls.n	8003648 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003644:	2306      	movs	r3, #6
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	2200      	movs	r2, #0
 8003658:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	3304      	adds	r3, #4
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff f87a 	bl	8002758 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	3318      	adds	r3, #24
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff f875 	bl	8002758 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003672:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	f1c3 0207 	rsb	r2, r3, #7
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003682:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	2200      	movs	r2, #0
 8003688:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	2200      	movs	r2, #0
 8003690:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	334c      	adds	r3, #76	; 0x4c
 8003698:	2260      	movs	r2, #96	; 0x60
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fc49 	bl	8004f34 <memset>
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <prvInitialiseNewTask+0x120>)
 80036a6:	651a      	str	r2, [r3, #80]	; 0x50
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	4a0c      	ldr	r2, [pc, #48]	; (80036dc <prvInitialiseNewTask+0x124>)
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <prvInitialiseNewTask+0x128>)
 80036b2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	68f9      	ldr	r1, [r7, #12]
 80036b8:	69b8      	ldr	r0, [r7, #24]
 80036ba:	f001 f83b 	bl	8004734 <pxPortInitialiseStack>
 80036be:	4602      	mov	r2, r0
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036d0:	bf00      	nop
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	08005148 	.word	0x08005148
 80036dc:	08005168 	.word	0x08005168
 80036e0:	08005128 	.word	0x08005128

080036e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036ec:	f001 f916 	bl	800491c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <prvAddNewTaskToReadyList+0xb8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	4a29      	ldr	r2, [pc, #164]	; (800379c <prvAddNewTaskToReadyList+0xb8>)
 80036f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <prvAddNewTaskToReadyList+0xbc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003702:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <prvAddNewTaskToReadyList+0xbc>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <prvAddNewTaskToReadyList+0xb8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d110      	bne.n	8003732 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003710:	f000 fd06 	bl	8004120 <prvInitialiseTaskLists>
 8003714:	e00d      	b.n	8003732 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <prvAddNewTaskToReadyList+0xc0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <prvAddNewTaskToReadyList+0xbc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	429a      	cmp	r2, r3
 800372a:	d802      	bhi.n	8003732 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <prvAddNewTaskToReadyList+0xbc>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <prvAddNewTaskToReadyList+0xc4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <prvAddNewTaskToReadyList+0xc4>)
 800373a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	2201      	movs	r2, #1
 8003742:	409a      	lsls	r2, r3
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <prvAddNewTaskToReadyList+0xc8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <prvAddNewTaskToReadyList+0xc8>)
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <prvAddNewTaskToReadyList+0xcc>)
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f7ff f803 	bl	8002770 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800376a:	f001 f907 	bl	800497c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <prvAddNewTaskToReadyList+0xc0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <prvAddNewTaskToReadyList+0xbc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	429a      	cmp	r2, r3
 8003782:	d207      	bcs.n	8003794 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <prvAddNewTaskToReadyList+0xd0>)
 8003786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	2000062c 	.word	0x2000062c
 80037a0:	2000052c 	.word	0x2000052c
 80037a4:	20000638 	.word	0x20000638
 80037a8:	20000648 	.word	0x20000648
 80037ac:	20000634 	.word	0x20000634
 80037b0:	20000530 	.word	0x20000530
 80037b4:	e000ed04 	.word	0xe000ed04

080037b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d017      	beq.n	80037fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <vTaskDelay+0x60>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <vTaskDelay+0x30>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037e8:	f000 f9ae 	bl	8003b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ec:	2100      	movs	r1, #0
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 ff3a 	bl	8004668 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037f4:	f000 f9b6 	bl	8003b64 <xTaskResumeAll>
 80037f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <vTaskDelay+0x64>)
 8003802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000654 	.word	0x20000654
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003828:	f001 f878 	bl	800491c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <vTaskSuspend+0x18>
 8003832:	4b3c      	ldr	r3, [pc, #240]	; (8003924 <vTaskSuspend+0x104>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e000      	b.n	800383a <vTaskSuspend+0x1a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3304      	adds	r3, #4
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fff0 	bl	8002826 <uxListRemove>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d115      	bne.n	8003878 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4935      	ldr	r1, [pc, #212]	; (8003928 <vTaskSuspend+0x108>)
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <vTaskSuspend+0x58>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	2201      	movs	r2, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43da      	mvns	r2, r3
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <vTaskSuspend+0x10c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4013      	ands	r3, r2
 8003874:	4a2d      	ldr	r2, [pc, #180]	; (800392c <vTaskSuspend+0x10c>)
 8003876:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3318      	adds	r3, #24
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe ffce 	bl	8002826 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4827      	ldr	r0, [pc, #156]	; (8003930 <vTaskSuspend+0x110>)
 8003892:	f7fe ff6d 	bl	8002770 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d103      	bne.n	80038aa <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80038aa:	f001 f867 	bl	800497c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <vTaskSuspend+0x114>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80038b6:	f001 f831 	bl	800491c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80038ba:	f000 fcd3 	bl	8004264 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80038be:	f001 f85d 	bl	800497c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <vTaskSuspend+0x104>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d127      	bne.n	800391c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <vTaskSuspend+0x114>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d017      	beq.n	8003904 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <vTaskSuspend+0x118>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <vTaskSuspend+0xd2>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60bb      	str	r3, [r7, #8]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80038f2:	4b12      	ldr	r3, [pc, #72]	; (800393c <vTaskSuspend+0x11c>)
 80038f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003902:	e00b      	b.n	800391c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <vTaskSuspend+0x110>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <vTaskSuspend+0x120>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d103      	bne.n	8003918 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <vTaskSuspend+0x104>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
	}
 8003916:	e001      	b.n	800391c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003918:	f000 fa7e 	bl	8003e18 <vTaskSwitchContext>
	}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	2000052c 	.word	0x2000052c
 8003928:	20000530 	.word	0x20000530
 800392c:	20000634 	.word	0x20000634
 8003930:	20000618 	.word	0x20000618
 8003934:	20000638 	.word	0x20000638
 8003938:	20000654 	.word	0x20000654
 800393c:	e000ed04 	.word	0xe000ed04
 8003940:	2000062c 	.word	0x2000062c

08003944 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	60fb      	str	r3, [r7, #12]
}
 800396c:	bf00      	nop
 800396e:	e7fe      	b.n	800396e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <prvTaskIsTaskSuspended+0x6c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <prvTaskIsTaskSuspended+0x3a>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <prvTaskIsTaskSuspended+0x3c>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00f      	beq.n	80039a4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <prvTaskIsTaskSuspended+0x70>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00a      	beq.n	80039a4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <prvTaskIsTaskSuspended+0x56>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <prvTaskIsTaskSuspended+0x58>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039a4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80039a6:	4618      	mov	r0, r3
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	20000618 	.word	0x20000618
 80039b4:	200005ec 	.word	0x200005ec

080039b8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <vTaskResume+0x28>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60bb      	str	r3, [r7, #8]
}
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d039      	beq.n	8003a5a <vTaskResume+0xa2>
 80039e6:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <vTaskResume+0xac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d034      	beq.n	8003a5a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80039f0:	f000 ff94 	bl	800491c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff ffa5 	bl	8003944 <prvTaskIsTaskSuspended>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d02a      	beq.n	8003a56 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ff0e 	bl	8002826 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	2201      	movs	r2, #1
 8003a10:	409a      	lsls	r2, r3
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <vTaskResume+0xb0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <vTaskResume+0xb0>)
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <vTaskResume+0xb4>)
 8003a2a:	441a      	add	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f7fe fe9c 	bl	8002770 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <vTaskResume+0xac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d307      	bcc.n	8003a56 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <vTaskResume+0xb8>)
 8003a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003a56:	f000 ff91 	bl	800497c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000052c 	.word	0x2000052c
 8003a68:	20000634 	.word	0x20000634
 8003a6c:	20000530 	.word	0x20000530
 8003a70:	e000ed04 	.word	0xe000ed04

08003a74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a82:	463a      	mov	r2, r7
 8003a84:	1d39      	adds	r1, r7, #4
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fb60 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	9202      	str	r2, [sp, #8]
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	4921      	ldr	r1, [pc, #132]	; (8003b28 <vTaskStartScheduler+0xb4>)
 8003aa4:	4821      	ldr	r0, [pc, #132]	; (8003b2c <vTaskStartScheduler+0xb8>)
 8003aa6:	f7ff fce5 	bl	8003474 <xTaskCreateStatic>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4a20      	ldr	r2, [pc, #128]	; (8003b30 <vTaskStartScheduler+0xbc>)
 8003aae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <vTaskStartScheduler+0xbc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e001      	b.n	8003ac2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d11b      	bne.n	8003b00 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	613b      	str	r3, [r7, #16]
}
 8003ada:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <vTaskStartScheduler+0xc0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	334c      	adds	r3, #76	; 0x4c
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <vTaskStartScheduler+0xc4>)
 8003ae4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <vTaskStartScheduler+0xc8>)
 8003ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003aec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <vTaskStartScheduler+0xcc>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <vTaskStartScheduler+0xd0>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003afa:	f000 fe9d 	bl	8004838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003afe:	e00e      	b.n	8003b1e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b06:	d10a      	bne.n	8003b1e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	60fb      	str	r3, [r7, #12]
}
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <vTaskStartScheduler+0xa8>
}
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	080050f4 	.word	0x080050f4
 8003b2c:	080040f1 	.word	0x080040f1
 8003b30:	20000650 	.word	0x20000650
 8003b34:	2000052c 	.word	0x2000052c
 8003b38:	20000014 	.word	0x20000014
 8003b3c:	2000064c 	.word	0x2000064c
 8003b40:	20000638 	.word	0x20000638
 8003b44:	20000630 	.word	0x20000630

08003b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <vTaskSuspendAll+0x18>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	4a03      	ldr	r2, [pc, #12]	; (8003b60 <vTaskSuspendAll+0x18>)
 8003b54:	6013      	str	r3, [r2, #0]
}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000654 	.word	0x20000654

08003b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b72:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	603b      	str	r3, [r7, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b90:	f000 fec4 	bl	800491c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b94:	4b38      	ldr	r3, [pc, #224]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	4a37      	ldr	r2, [pc, #220]	; (8003c78 <xTaskResumeAll+0x114>)
 8003b9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9e:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <xTaskResumeAll+0x114>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d161      	bne.n	8003c6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ba6:	4b35      	ldr	r3, [pc, #212]	; (8003c7c <xTaskResumeAll+0x118>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d05d      	beq.n	8003c6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bae:	e02e      	b.n	8003c0e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003bb0:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <xTaskResumeAll+0x11c>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fe32 	bl	8002826 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fe2d 	bl	8002826 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <xTaskResumeAll+0x120>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <xTaskResumeAll+0x120>)
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <xTaskResumeAll+0x124>)
 8003bec:	441a      	add	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7fe fdbb 	bl	8002770 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <xTaskResumeAll+0x128>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <xTaskResumeAll+0x11c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1cc      	bne.n	8003bb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c1c:	f000 fb22 	bl	8004264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c2c:	f000 f836 	bl	8003c9c <xTaskIncrementTick>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f1      	bne.n	8003c2c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <xTaskResumeAll+0x130>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <xTaskResumeAll+0x12c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <xTaskResumeAll+0x134>)
 8003c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c6a:	f000 fe87 	bl	800497c <vPortExitCritical>

	return xAlreadyYielded;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000654 	.word	0x20000654
 8003c7c:	2000062c 	.word	0x2000062c
 8003c80:	200005ec 	.word	0x200005ec
 8003c84:	20000634 	.word	0x20000634
 8003c88:	20000530 	.word	0x20000530
 8003c8c:	2000052c 	.word	0x2000052c
 8003c90:	20000640 	.word	0x20000640
 8003c94:	2000063c 	.word	0x2000063c
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca6:	4b51      	ldr	r3, [pc, #324]	; (8003dec <xTaskIncrementTick+0x150>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 808d 	bne.w	8003dca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cb0:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <xTaskIncrementTick+0x154>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cb8:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <xTaskIncrementTick+0x154>)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d120      	bne.n	8003d06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	603b      	str	r3, [r7, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <xTaskIncrementTick+0x46>
 8003ce4:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <xTaskIncrementTick+0x15c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a41      	ldr	r2, [pc, #260]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4a41      	ldr	r2, [pc, #260]	; (8003df8 <xTaskIncrementTick+0x15c>)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b40      	ldr	r3, [pc, #256]	; (8003dfc <xTaskIncrementTick+0x160>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	4a3f      	ldr	r2, [pc, #252]	; (8003dfc <xTaskIncrementTick+0x160>)
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	f000 faaf 	bl	8004264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d06:	4b3e      	ldr	r3, [pc, #248]	; (8003e00 <xTaskIncrementTick+0x164>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d34d      	bcc.n	8003dac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <xTaskIncrementTick+0x82>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <xTaskIncrementTick+0x84>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d24:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <xTaskIncrementTick+0x164>)
 8003d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d2a:	601a      	str	r2, [r3, #0]
					break;
 8003d2c:	e03e      	b.n	8003dac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d2e:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <xTaskIncrementTick+0x158>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d203      	bcs.n	8003d4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d46:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <xTaskIncrementTick+0x164>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]
						break;
 8003d4c:	e02e      	b.n	8003dac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fd67 	bl	8002826 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	3318      	adds	r3, #24
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fd5e 	bl	8002826 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	2201      	movs	r2, #1
 8003d70:	409a      	lsls	r2, r3
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <xTaskIncrementTick+0x168>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <xTaskIncrementTick+0x168>)
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <xTaskIncrementTick+0x16c>)
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f7fe fcec 	bl	8002770 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <xTaskIncrementTick+0x170>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3b4      	bcc.n	8003d10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003da6:	2301      	movs	r3, #1
 8003da8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003daa:	e7b1      	b.n	8003d10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <xTaskIncrementTick+0x170>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db2:	4915      	ldr	r1, [pc, #84]	; (8003e08 <xTaskIncrementTick+0x16c>)
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d907      	bls.n	8003dd4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e004      	b.n	8003dd4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <xTaskIncrementTick+0x174>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <xTaskIncrementTick+0x174>)
 8003dd2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <xTaskIncrementTick+0x178>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003de0:	697b      	ldr	r3, [r7, #20]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000654 	.word	0x20000654
 8003df0:	20000630 	.word	0x20000630
 8003df4:	200005e4 	.word	0x200005e4
 8003df8:	200005e8 	.word	0x200005e8
 8003dfc:	20000644 	.word	0x20000644
 8003e00:	2000064c 	.word	0x2000064c
 8003e04:	20000634 	.word	0x20000634
 8003e08:	20000530 	.word	0x20000530
 8003e0c:	2000052c 	.word	0x2000052c
 8003e10:	2000063c 	.word	0x2000063c
 8003e14:	20000640 	.word	0x20000640

08003e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <vTaskSwitchContext+0xac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <vTaskSwitchContext+0xb0>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e2c:	e044      	b.n	8003eb8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <vTaskSwitchContext+0xb0>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <vTaskSwitchContext+0xb4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	f1c3 031f 	rsb	r3, r3, #31
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	4921      	ldr	r1, [pc, #132]	; (8003ed0 <vTaskSwitchContext+0xb8>)
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	607b      	str	r3, [r7, #4]
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <vTaskSwitchContext+0x5a>
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <vTaskSwitchContext+0xb8>)
 8003e80:	4413      	add	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	3308      	adds	r3, #8
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d104      	bne.n	8003ea4 <vTaskSwitchContext+0x8c>
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <vTaskSwitchContext+0xbc>)
 8003eac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <vTaskSwitchContext+0xbc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	334c      	adds	r3, #76	; 0x4c
 8003eb4:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <vTaskSwitchContext+0xc0>)
 8003eb6:	6013      	str	r3, [r2, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000654 	.word	0x20000654
 8003ec8:	20000640 	.word	0x20000640
 8003ecc:	20000634 	.word	0x20000634
 8003ed0:	20000530 	.word	0x20000530
 8003ed4:	2000052c 	.word	0x2000052c
 8003ed8:	20000014 	.word	0x20000014

08003edc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	60fb      	str	r3, [r7, #12]
}
 8003efe:	bf00      	nop
 8003f00:	e7fe      	b.n	8003f00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <vTaskPlaceOnEventList+0x44>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3318      	adds	r3, #24
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fe fc53 	bl	80027b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f10:	2101      	movs	r1, #1
 8003f12:	6838      	ldr	r0, [r7, #0]
 8003f14:	f000 fba8 	bl	8004668 <prvAddCurrentTaskToDelayedList>
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	2000052c 	.word	0x2000052c

08003f24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60fb      	str	r3, [r7, #12]
}
 8003f4c:	bf00      	nop
 8003f4e:	e7fe      	b.n	8003f4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3318      	adds	r3, #24
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fc66 	bl	8002826 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <xTaskRemoveFromEventList+0xac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d11c      	bne.n	8003f9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fc5d 	bl	8002826 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	2201      	movs	r2, #1
 8003f72:	409a      	lsls	r2, r3
 8003f74:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <xTaskRemoveFromEventList+0xb0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <xTaskRemoveFromEventList+0xb0>)
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4a13      	ldr	r2, [pc, #76]	; (8003fd8 <xTaskRemoveFromEventList+0xb4>)
 8003f8c:	441a      	add	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7fe fbeb 	bl	8002770 <vListInsertEnd>
 8003f9a:	e005      	b.n	8003fa8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3318      	adds	r3, #24
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	480e      	ldr	r0, [pc, #56]	; (8003fdc <xTaskRemoveFromEventList+0xb8>)
 8003fa4:	f7fe fbe4 	bl	8002770 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <xTaskRemoveFromEventList+0xbc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d905      	bls.n	8003fc2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <xTaskRemoveFromEventList+0xc0>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	e001      	b.n	8003fc6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003fc6:	697b      	ldr	r3, [r7, #20]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000654 	.word	0x20000654
 8003fd4:	20000634 	.word	0x20000634
 8003fd8:	20000530 	.word	0x20000530
 8003fdc:	200005ec 	.word	0x200005ec
 8003fe0:	2000052c 	.word	0x2000052c
 8003fe4:	20000640 	.word	0x20000640

08003fe8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <vTaskInternalSetTimeOutState+0x24>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <vTaskInternalSetTimeOutState+0x28>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	605a      	str	r2, [r3, #4]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000644 	.word	0x20000644
 8004010:	20000630 	.word	0x20000630

08004014 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	613b      	str	r3, [r7, #16]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004056:	f000 fc61 	bl	800491c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <xTaskCheckForTimeOut+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004072:	d102      	bne.n	800407a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e023      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <xTaskCheckForTimeOut+0xc0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d007      	beq.n	8004096 <xTaskCheckForTimeOut+0x82>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	429a      	cmp	r2, r3
 800408e:	d302      	bcc.n	8004096 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e015      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	d20b      	bcs.n	80040b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff9b 	bl	8003fe8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	e004      	b.n	80040c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040c2:	f000 fc5b 	bl	800497c <vPortExitCritical>

	return xReturn;
 80040c6:	69fb      	ldr	r3, [r7, #28]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000630 	.word	0x20000630
 80040d4:	20000644 	.word	0x20000644

080040d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <vTaskMissedYield+0x14>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000640 	.word	0x20000640

080040f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040f8:	f000 f852 	bl	80041a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <prvIdleTask+0x28>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d9f9      	bls.n	80040f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <prvIdleTask+0x2c>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004114:	e7f0      	b.n	80040f8 <prvIdleTask+0x8>
 8004116:	bf00      	nop
 8004118:	20000530 	.word	0x20000530
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	e00c      	b.n	8004146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <prvInitialiseTaskLists+0x60>)
 8004138:	4413      	add	r3, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe faed 	bl	800271a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3301      	adds	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b06      	cmp	r3, #6
 800414a:	d9ef      	bls.n	800412c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800414c:	480d      	ldr	r0, [pc, #52]	; (8004184 <prvInitialiseTaskLists+0x64>)
 800414e:	f7fe fae4 	bl	800271a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004152:	480d      	ldr	r0, [pc, #52]	; (8004188 <prvInitialiseTaskLists+0x68>)
 8004154:	f7fe fae1 	bl	800271a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <prvInitialiseTaskLists+0x6c>)
 800415a:	f7fe fade 	bl	800271a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800415e:	480c      	ldr	r0, [pc, #48]	; (8004190 <prvInitialiseTaskLists+0x70>)
 8004160:	f7fe fadb 	bl	800271a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004164:	480b      	ldr	r0, [pc, #44]	; (8004194 <prvInitialiseTaskLists+0x74>)
 8004166:	f7fe fad8 	bl	800271a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <prvInitialiseTaskLists+0x78>)
 800416c:	4a05      	ldr	r2, [pc, #20]	; (8004184 <prvInitialiseTaskLists+0x64>)
 800416e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <prvInitialiseTaskLists+0x7c>)
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <prvInitialiseTaskLists+0x68>)
 8004174:	601a      	str	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000530 	.word	0x20000530
 8004184:	200005bc 	.word	0x200005bc
 8004188:	200005d0 	.word	0x200005d0
 800418c:	200005ec 	.word	0x200005ec
 8004190:	20000600 	.word	0x20000600
 8004194:	20000618 	.word	0x20000618
 8004198:	200005e4 	.word	0x200005e4
 800419c:	200005e8 	.word	0x200005e8

080041a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a6:	e019      	b.n	80041dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041a8:	f000 fbb8 	bl	800491c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <prvCheckTasksWaitingTermination+0x50>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fb34 	bl	8002826 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <prvCheckTasksWaitingTermination+0x54>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <prvCheckTasksWaitingTermination+0x54>)
 80041c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041d2:	f000 fbd3 	bl	800497c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f810 	bl	80041fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e1      	bne.n	80041a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000600 	.word	0x20000600
 80041f4:	2000062c 	.word	0x2000062c
 80041f8:	20000614 	.word	0x20000614

080041fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	334c      	adds	r3, #76	; 0x4c
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fea9 	bl	8004f60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d108      	bne.n	800422a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fd41 	bl	8004ca4 <vPortFree>
				vPortFree( pxTCB );
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fd3e 	bl	8004ca4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004228:	e018      	b.n	800425c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004230:	2b01      	cmp	r3, #1
 8004232:	d103      	bne.n	800423c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fd35 	bl	8004ca4 <vPortFree>
	}
 800423a:	e00f      	b.n	800425c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004242:	2b02      	cmp	r3, #2
 8004244:	d00a      	beq.n	800425c <prvDeleteTCB+0x60>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60fb      	str	r3, [r7, #12]
}
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <prvDeleteTCB+0x5e>
	}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <prvResetNextTaskUnblockTime+0x40>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <prvResetNextTaskUnblockTime+0x14>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <prvResetNextTaskUnblockTime+0x16>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800427e:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <prvResetNextTaskUnblockTime+0x44>)
 8004280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004284:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004286:	e008      	b.n	800429a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <prvResetNextTaskUnblockTime+0x40>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <prvResetNextTaskUnblockTime+0x44>)
 8004298:	6013      	str	r3, [r2, #0]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	200005e4 	.word	0x200005e4
 80042a8:	2000064c 	.word	0x2000064c

080042ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <xTaskGetSchedulerState+0x34>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042ba:	2301      	movs	r3, #1
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	e008      	b.n	80042d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <xTaskGetSchedulerState+0x38>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042c8:	2302      	movs	r3, #2
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	e001      	b.n	80042d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042d2:	687b      	ldr	r3, [r7, #4]
	}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000638 	.word	0x20000638
 80042e4:	20000654 	.word	0x20000654

080042e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d06e      	beq.n	80043dc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <xTaskPriorityInherit+0x100>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	429a      	cmp	r2, r3
 800430a:	d25e      	bcs.n	80043ca <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db06      	blt.n	8004322 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004314:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <xTaskPriorityInherit+0x100>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f1c3 0207 	rsb	r2, r3, #7
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6959      	ldr	r1, [r3, #20]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4a2e      	ldr	r2, [pc, #184]	; (80043ec <xTaskPriorityInherit+0x104>)
 8004334:	4413      	add	r3, r2
 8004336:	4299      	cmp	r1, r3
 8004338:	d101      	bne.n	800433e <xTaskPriorityInherit+0x56>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <xTaskPriorityInherit+0x58>
 800433e:	2300      	movs	r3, #0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03a      	beq.n	80043ba <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fa6c 	bl	8002826 <uxListRemove>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d115      	bne.n	8004380 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	4924      	ldr	r1, [pc, #144]	; (80043ec <xTaskPriorityInherit+0x104>)
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <xTaskPriorityInherit+0x98>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	2201      	movs	r2, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43da      	mvns	r2, r3
 8004376:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <xTaskPriorityInherit+0x108>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4013      	ands	r3, r2
 800437c:	4a1c      	ldr	r2, [pc, #112]	; (80043f0 <xTaskPriorityInherit+0x108>)
 800437e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <xTaskPriorityInherit+0x100>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	2201      	movs	r2, #1
 8004390:	409a      	lsls	r2, r3
 8004392:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <xTaskPriorityInherit+0x108>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <xTaskPriorityInherit+0x108>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a10      	ldr	r2, [pc, #64]	; (80043ec <xTaskPriorityInherit+0x104>)
 80043aa:	441a      	add	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7fe f9dc 	bl	8002770 <vListInsertEnd>
 80043b8:	e004      	b.n	80043c4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <xTaskPriorityInherit+0x100>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e008      	b.n	80043dc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <xTaskPriorityInherit+0x100>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d201      	bcs.n	80043dc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80043d8:	2301      	movs	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043dc:	68fb      	ldr	r3, [r7, #12]
	}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	2000052c 	.word	0x2000052c
 80043ec:	20000530 	.word	0x20000530
 80043f0:	20000634 	.word	0x20000634

080043f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d06e      	beq.n	80044e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800440a:	4b3a      	ldr	r3, [pc, #232]	; (80044f4 <xTaskPriorityDisinherit+0x100>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	429a      	cmp	r2, r3
 8004412:	d00a      	beq.n	800442a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	60fb      	str	r3, [r7, #12]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60bb      	str	r3, [r7, #8]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444c:	1e5a      	subs	r2, r3, #1
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	429a      	cmp	r2, r3
 800445c:	d044      	beq.n	80044e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	2b00      	cmp	r3, #0
 8004464:	d140      	bne.n	80044e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3304      	adds	r3, #4
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe f9db 	bl	8002826 <uxListRemove>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d115      	bne.n	80044a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	491f      	ldr	r1, [pc, #124]	; (80044f8 <xTaskPriorityDisinherit+0x104>)
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xTaskPriorityDisinherit+0xae>
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	2201      	movs	r2, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	4b18      	ldr	r3, [pc, #96]	; (80044fc <xTaskPriorityDisinherit+0x108>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4013      	ands	r3, r2
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <xTaskPriorityDisinherit+0x108>)
 80044a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	f1c3 0207 	rsb	r2, r3, #7
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	2201      	movs	r2, #1
 80044bc:	409a      	lsls	r2, r3
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <xTaskPriorityDisinherit+0x108>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	4a0d      	ldr	r2, [pc, #52]	; (80044fc <xTaskPriorityDisinherit+0x108>)
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <xTaskPriorityDisinherit+0x104>)
 80044d6:	441a      	add	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f7fe f946 	bl	8002770 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044e8:	697b      	ldr	r3, [r7, #20]
	}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	2000052c 	.word	0x2000052c
 80044f8:	20000530 	.word	0x20000530
 80044fc:	20000634 	.word	0x20000634

08004500 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800450e:	2301      	movs	r3, #1
 8004510:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8088 	beq.w	800462a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60fb      	str	r3, [r7, #12]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d902      	bls.n	8004548 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	e002      	b.n	800454e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	429a      	cmp	r2, r3
 8004556:	d068      	beq.n	800462a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	429a      	cmp	r2, r3
 8004560:	d163      	bne.n	800462a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004562:	4b34      	ldr	r3, [pc, #208]	; (8004634 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	429a      	cmp	r2, r3
 800456a:	d10a      	bne.n	8004582 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	60bb      	str	r3, [r7, #8]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	db04      	blt.n	80045a0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f1c3 0207 	rsb	r2, r3, #7
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	6959      	ldr	r1, [r3, #20]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4a22      	ldr	r2, [pc, #136]	; (8004638 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80045b0:	4413      	add	r3, r2
 80045b2:	4299      	cmp	r1, r3
 80045b4:	d101      	bne.n	80045ba <vTaskPriorityDisinheritAfterTimeout+0xba>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d034      	beq.n	800462a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe f92e 	bl	8002826 <uxListRemove>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d115      	bne.n	80045fc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	4918      	ldr	r1, [pc, #96]	; (8004638 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	2201      	movs	r2, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43da      	mvns	r2, r3
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4013      	ands	r3, r2
 80045f8:	4a10      	ldr	r2, [pc, #64]	; (800463c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80045fa:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	2201      	movs	r2, #1
 8004602:	409a      	lsls	r2, r3
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4313      	orrs	r3, r2
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800461c:	441a      	add	r2, r3
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f7fe f8a3 	bl	8002770 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800462a:	bf00      	nop
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2000052c 	.word	0x2000052c
 8004638:	20000530 	.word	0x20000530
 800463c:	20000634 	.word	0x20000634

08004640 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <pvTaskIncrementMutexHeldCount+0x24>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <pvTaskIncrementMutexHeldCount+0x24>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004652:	3201      	adds	r2, #1
 8004654:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004656:	4b03      	ldr	r3, [pc, #12]	; (8004664 <pvTaskIncrementMutexHeldCount+0x24>)
 8004658:	681b      	ldr	r3, [r3, #0]
	}
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000052c 	.word	0x2000052c

08004668 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004672:	4b29      	ldr	r3, [pc, #164]	; (8004718 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004678:	4b28      	ldr	r3, [pc, #160]	; (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3304      	adds	r3, #4
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe f8d1 	bl	8002826 <uxListRemove>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	2201      	movs	r2, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43da      	mvns	r2, r3
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <prvAddCurrentTaskToDelayedList+0xb8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4013      	ands	r3, r2
 800469e:	4a20      	ldr	r2, [pc, #128]	; (8004720 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a8:	d10a      	bne.n	80046c0 <prvAddCurrentTaskToDelayedList+0x58>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	481a      	ldr	r0, [pc, #104]	; (8004724 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046ba:	f7fe f859 	bl	8002770 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046be:	e026      	b.n	800470e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4413      	add	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d209      	bcs.n	80046ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b0f      	ldr	r3, [pc, #60]	; (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f7fe f866 	bl	80027b6 <vListInsert>
}
 80046ea:	e010      	b.n	800470e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <prvAddCurrentTaskToDelayedList+0xc4>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f7fe f85c 	bl	80027b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	d202      	bcs.n	800470e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004708:	4a09      	ldr	r2, [pc, #36]	; (8004730 <prvAddCurrentTaskToDelayedList+0xc8>)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6013      	str	r3, [r2, #0]
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000630 	.word	0x20000630
 800471c:	2000052c 	.word	0x2000052c
 8004720:	20000634 	.word	0x20000634
 8004724:	20000618 	.word	0x20000618
 8004728:	200005e8 	.word	0x200005e8
 800472c:	200005e4 	.word	0x200005e4
 8004730:	2000064c 	.word	0x2000064c

08004734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3b04      	subs	r3, #4
 8004744:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800474c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3b04      	subs	r3, #4
 8004752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3b04      	subs	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004764:	4a08      	ldr	r2, [pc, #32]	; (8004788 <pxPortInitialiseStack+0x54>)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3b14      	subs	r3, #20
 800476e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b20      	subs	r3, #32
 800477a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800477c:	68fb      	ldr	r3, [r7, #12]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	0800478d 	.word	0x0800478d

0800478c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <prvTaskExitError+0x54>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479e:	d00a      	beq.n	80047b6 <prvTaskExitError+0x2a>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	60fb      	str	r3, [r7, #12]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <prvTaskExitError+0x28>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	60bb      	str	r3, [r7, #8]
}
 80047c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047ca:	bf00      	nop
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0fc      	beq.n	80047cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047d2:	bf00      	nop
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000010 	.word	0x20000010
	...

080047f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <pxCurrentTCBConst2>)
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	6808      	ldr	r0, [r1, #0]
 80047f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047fa:	f380 8809 	msr	PSP, r0
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8811 	msr	BASEPRI, r0
 800480a:	f04e 0e0d 	orr.w	lr, lr, #13
 800480e:	4770      	bx	lr

08004810 <pxCurrentTCBConst2>:
 8004810:	2000052c 	.word	0x2000052c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004818:	4806      	ldr	r0, [pc, #24]	; (8004834 <prvPortStartFirstTask+0x1c>)
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	6800      	ldr	r0, [r0, #0]
 800481e:	f380 8808 	msr	MSP, r0
 8004822:	b662      	cpsie	i
 8004824:	b661      	cpsie	f
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	df00      	svc	0
 8004830:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004832:	bf00      	nop
 8004834:	e000ed08 	.word	0xe000ed08

08004838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800483e:	4b32      	ldr	r3, [pc, #200]	; (8004908 <xPortStartScheduler+0xd0>)
 8004840:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	22ff      	movs	r2, #255	; 0xff
 800484e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4b2a      	ldr	r3, [pc, #168]	; (800490c <xPortStartScheduler+0xd4>)
 8004864:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004866:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <xPortStartScheduler+0xd8>)
 8004868:	2207      	movs	r2, #7
 800486a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800486c:	e009      	b.n	8004882 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800486e:	4b28      	ldr	r3, [pc, #160]	; (8004910 <xPortStartScheduler+0xd8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3b01      	subs	r3, #1
 8004874:	4a26      	ldr	r2, [pc, #152]	; (8004910 <xPortStartScheduler+0xd8>)
 8004876:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	b2db      	uxtb	r3, r3
 8004880:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d0ef      	beq.n	800486e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <xPortStartScheduler+0xd8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1c3 0307 	rsb	r3, r3, #7
 8004896:	2b04      	cmp	r3, #4
 8004898:	d00a      	beq.n	80048b0 <xPortStartScheduler+0x78>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60bb      	str	r3, [r7, #8]
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <xPortStartScheduler+0xd8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <xPortStartScheduler+0xd8>)
 80048b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <xPortStartScheduler+0xd8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048c2:	4a13      	ldr	r2, [pc, #76]	; (8004910 <xPortStartScheduler+0xd8>)
 80048c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <xPortStartScheduler+0xdc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <xPortStartScheduler+0xdc>)
 80048d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048da:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <xPortStartScheduler+0xdc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <xPortStartScheduler+0xdc>)
 80048e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048e6:	f000 f8b9 	bl	8004a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <xPortStartScheduler+0xe0>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048f0:	f7ff ff92 	bl	8004818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048f4:	f7ff fa90 	bl	8003e18 <vTaskSwitchContext>
	prvTaskExitError();
 80048f8:	f7ff ff48 	bl	800478c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	e000e400 	.word	0xe000e400
 800490c:	20000658 	.word	0x20000658
 8004910:	2000065c 	.word	0x2000065c
 8004914:	e000ed20 	.word	0xe000ed20
 8004918:	20000010 	.word	0x20000010

0800491c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	607b      	str	r3, [r7, #4]
}
 8004934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <vPortEnterCritical+0x58>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3301      	adds	r3, #1
 800493c:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <vPortEnterCritical+0x58>)
 800493e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <vPortEnterCritical+0x58>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10f      	bne.n	8004968 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <vPortEnterCritical+0x5c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <vPortEnterCritical+0x4c>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	603b      	str	r3, [r7, #0]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <vPortEnterCritical+0x4a>
	}
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000010 	.word	0x20000010
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <vPortExitCritical+0x4c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <vPortExitCritical+0x24>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	607b      	str	r3, [r7, #4]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <vPortExitCritical+0x4c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <vPortExitCritical+0x4c>)
 80049a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <vPortExitCritical+0x4c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <vPortExitCritical+0x42>
 80049b2:	2300      	movs	r3, #0
 80049b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f383 8811 	msr	BASEPRI, r3
}
 80049bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	20000010 	.word	0x20000010
 80049cc:	00000000 	.word	0x00000000

080049d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049d0:	f3ef 8009 	mrs	r0, PSP
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <pxCurrentTCBConst>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049e0:	6010      	str	r0, [r2, #0]
 80049e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80049e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049ea:	f380 8811 	msr	BASEPRI, r0
 80049ee:	f7ff fa13 	bl	8003e18 <vTaskSwitchContext>
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8811 	msr	BASEPRI, r0
 80049fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	6808      	ldr	r0, [r1, #0]
 8004a02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a06:	f380 8809 	msr	PSP, r0
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	4770      	bx	lr

08004a10 <pxCurrentTCBConst>:
 8004a10:	2000052c 	.word	0x2000052c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
}
 8004a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a32:	f7ff f933 	bl	8003c9c <xTaskIncrementTick>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <xPortSysTickHandler+0x40>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	2300      	movs	r3, #0
 8004a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f383 8811 	msr	BASEPRI, r3
}
 8004a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <vPortSetupTimerInterrupt+0x30>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <vPortSetupTimerInterrupt+0x34>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <vPortSetupTimerInterrupt+0x38>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <vPortSetupTimerInterrupt+0x3c>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	4a08      	ldr	r2, [pc, #32]	; (8004a9c <vPortSetupTimerInterrupt+0x40>)
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a7e:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <vPortSetupTimerInterrupt+0x30>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e010 	.word	0xe000e010
 8004a90:	e000e018 	.word	0xe000e018
 8004a94:	20000004 	.word	0x20000004
 8004a98:	10624dd3 	.word	0x10624dd3
 8004a9c:	e000e014 	.word	0xe000e014

08004aa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004aa6:	f3ef 8305 	mrs	r3, IPSR
 8004aaa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d914      	bls.n	8004adc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ab2:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <vPortValidateInterruptPriority+0x6c>)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <vPortValidateInterruptPriority+0x70>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	7afa      	ldrb	r2, [r7, #11]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d20a      	bcs.n	8004adc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	607b      	str	r3, [r7, #4]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004adc:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <vPortValidateInterruptPriority+0x74>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <vPortValidateInterruptPriority+0x78>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d90a      	bls.n	8004b02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	603b      	str	r3, [r7, #0]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <vPortValidateInterruptPriority+0x60>
	}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	e000e3f0 	.word	0xe000e3f0
 8004b10:	20000658 	.word	0x20000658
 8004b14:	e000ed0c 	.word	0xe000ed0c
 8004b18:	2000065c 	.word	0x2000065c

08004b1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b28:	f7ff f80e 	bl	8003b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b2c:	4b58      	ldr	r3, [pc, #352]	; (8004c90 <pvPortMalloc+0x174>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b34:	f000 f910 	bl	8004d58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b38:	4b56      	ldr	r3, [pc, #344]	; (8004c94 <pvPortMalloc+0x178>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f040 808e 	bne.w	8004c62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01d      	beq.n	8004b88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f023 0307 	bic.w	r3, r3, #7
 8004b64:	3308      	adds	r3, #8
 8004b66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <pvPortMalloc+0x6c>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	617b      	str	r3, [r7, #20]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d069      	beq.n	8004c62 <pvPortMalloc+0x146>
 8004b8e:	4b42      	ldr	r3, [pc, #264]	; (8004c98 <pvPortMalloc+0x17c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d864      	bhi.n	8004c62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b98:	4b40      	ldr	r3, [pc, #256]	; (8004c9c <pvPortMalloc+0x180>)
 8004b9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b9c:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <pvPortMalloc+0x180>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ba2:	e004      	b.n	8004bae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d903      	bls.n	8004bc0 <pvPortMalloc+0xa4>
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f1      	bne.n	8004ba4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bc0:	4b33      	ldr	r3, [pc, #204]	; (8004c90 <pvPortMalloc+0x174>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d04b      	beq.n	8004c62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2208      	movs	r2, #8
 8004bd0:	4413      	add	r3, r2
 8004bd2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	1ad2      	subs	r2, r2, r3
 8004be4:	2308      	movs	r3, #8
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d91f      	bls.n	8004c2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <pvPortMalloc+0xf8>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	613b      	str	r3, [r7, #16]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c26:	69b8      	ldr	r0, [r7, #24]
 8004c28:	f000 f8f8 	bl	8004e1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <pvPortMalloc+0x17c>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <pvPortMalloc+0x17c>)
 8004c38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c3a:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <pvPortMalloc+0x17c>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <pvPortMalloc+0x184>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d203      	bcs.n	8004c4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <pvPortMalloc+0x17c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <pvPortMalloc+0x184>)
 8004c4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <pvPortMalloc+0x178>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c62:	f7fe ff7f 	bl	8003b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <pvPortMalloc+0x16a>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <pvPortMalloc+0x168>
	return pvReturn;
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3728      	adds	r7, #40	; 0x28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	200019f0 	.word	0x200019f0
 8004c94:	200019fc 	.word	0x200019fc
 8004c98:	200019f4 	.word	0x200019f4
 8004c9c:	200019e8 	.word	0x200019e8
 8004ca0:	200019f8 	.word	0x200019f8

08004ca4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d048      	beq.n	8004d48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	425b      	negs	r3, r3
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <vPortFree+0xac>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <vPortFree+0x44>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60fb      	str	r3, [r7, #12]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <vPortFree+0x62>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60bb      	str	r3, [r7, #8]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <vPortFree+0xac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d019      	beq.n	8004d48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d115      	bne.n	8004d48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <vPortFree+0xac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	43db      	mvns	r3, r3
 8004d26:	401a      	ands	r2, r3
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d2c:	f7fe ff0c 	bl	8003b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <vPortFree+0xb0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <vPortFree+0xb0>)
 8004d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d3e:	6938      	ldr	r0, [r7, #16]
 8004d40:	f000 f86c 	bl	8004e1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d44:	f7fe ff0e 	bl	8003b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d48:	bf00      	nop
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200019fc 	.word	0x200019fc
 8004d54:	200019f4 	.word	0x200019f4

08004d58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d64:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <prvHeapInit+0xac>)
 8004d66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3307      	adds	r3, #7
 8004d76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <prvHeapInit+0xac>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d90:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <prvHeapInit+0xb0>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <prvHeapInit+0xb0>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004da4:	2208      	movs	r2, #8
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0307 	bic.w	r3, r3, #7
 8004db2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <prvHeapInit+0xb4>)
 8004db8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <prvHeapInit+0xb4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <prvHeapInit+0xb4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	1ad2      	subs	r2, r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <prvHeapInit+0xb4>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <prvHeapInit+0xb8>)
 8004de6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <prvHeapInit+0xbc>)
 8004dee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004df0:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <prvHeapInit+0xc0>)
 8004df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004df6:	601a      	str	r2, [r3, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000660 	.word	0x20000660
 8004e08:	200019e8 	.word	0x200019e8
 8004e0c:	200019f0 	.word	0x200019f0
 8004e10:	200019f8 	.word	0x200019f8
 8004e14:	200019f4 	.word	0x200019f4
 8004e18:	200019fc 	.word	0x200019fc

08004e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e24:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <prvInsertBlockIntoFreeList+0xa8>)
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e002      	b.n	8004e30 <prvInsertBlockIntoFreeList+0x14>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d8f7      	bhi.n	8004e2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	4413      	add	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d108      	bne.n	8004e5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	441a      	add	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d118      	bne.n	8004ea4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <prvInsertBlockIntoFreeList+0xac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d00d      	beq.n	8004e9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e008      	b.n	8004eac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvInsertBlockIntoFreeList+0xac>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e003      	b.n	8004eac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d002      	beq.n	8004eba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	200019e8 	.word	0x200019e8
 8004ec8:	200019f0 	.word	0x200019f0

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	2600      	movs	r6, #0
 8004ed0:	4d0c      	ldr	r5, [pc, #48]	; (8004f04 <__libc_init_array+0x38>)
 8004ed2:	4c0d      	ldr	r4, [pc, #52]	; (8004f08 <__libc_init_array+0x3c>)
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	f000 f8f0 	bl	80050c0 <_init>
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	4d0a      	ldr	r5, [pc, #40]	; (8004f0c <__libc_init_array+0x40>)
 8004ee4:	4c0a      	ldr	r4, [pc, #40]	; (8004f10 <__libc_init_array+0x44>)
 8004ee6:	1b64      	subs	r4, r4, r5
 8004ee8:	10a4      	asrs	r4, r4, #2
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	08005188 	.word	0x08005188
 8004f08:	08005188 	.word	0x08005188
 8004f0c:	08005188 	.word	0x08005188
 8004f10:	0800518c 	.word	0x0800518c

08004f14 <__retarget_lock_acquire_recursive>:
 8004f14:	4770      	bx	lr

08004f16 <__retarget_lock_release_recursive>:
 8004f16:	4770      	bx	lr

08004f18 <memcpy>:
 8004f18:	440a      	add	r2, r1
 8004f1a:	4291      	cmp	r1, r2
 8004f1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f20:	d100      	bne.n	8004f24 <memcpy+0xc>
 8004f22:	4770      	bx	lr
 8004f24:	b510      	push	{r4, lr}
 8004f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f30:	d1f9      	bne.n	8004f26 <memcpy+0xe>
 8004f32:	bd10      	pop	{r4, pc}

08004f34 <memset>:
 8004f34:	4603      	mov	r3, r0
 8004f36:	4402      	add	r2, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <cleanup_glue>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	460c      	mov	r4, r1
 8004f48:	6809      	ldr	r1, [r1, #0]
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	b109      	cbz	r1, 8004f52 <cleanup_glue+0xe>
 8004f4e:	f7ff fff9 	bl	8004f44 <cleanup_glue>
 8004f52:	4621      	mov	r1, r4
 8004f54:	4628      	mov	r0, r5
 8004f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f5a:	f000 b869 	b.w	8005030 <_free_r>
	...

08004f60 <_reclaim_reent>:
 8004f60:	4b2c      	ldr	r3, [pc, #176]	; (8005014 <_reclaim_reent+0xb4>)
 8004f62:	b570      	push	{r4, r5, r6, lr}
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4604      	mov	r4, r0
 8004f68:	4283      	cmp	r3, r0
 8004f6a:	d051      	beq.n	8005010 <_reclaim_reent+0xb0>
 8004f6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f6e:	b143      	cbz	r3, 8004f82 <_reclaim_reent+0x22>
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d14a      	bne.n	800500c <_reclaim_reent+0xac>
 8004f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	b111      	cbz	r1, 8004f82 <_reclaim_reent+0x22>
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f000 f857 	bl	8005030 <_free_r>
 8004f82:	6961      	ldr	r1, [r4, #20]
 8004f84:	b111      	cbz	r1, 8004f8c <_reclaim_reent+0x2c>
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 f852 	bl	8005030 <_free_r>
 8004f8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f8e:	b111      	cbz	r1, 8004f96 <_reclaim_reent+0x36>
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 f84d 	bl	8005030 <_free_r>
 8004f96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f98:	b111      	cbz	r1, 8004fa0 <_reclaim_reent+0x40>
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 f848 	bl	8005030 <_free_r>
 8004fa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004fa2:	b111      	cbz	r1, 8004faa <_reclaim_reent+0x4a>
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f000 f843 	bl	8005030 <_free_r>
 8004faa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004fac:	b111      	cbz	r1, 8004fb4 <_reclaim_reent+0x54>
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f000 f83e 	bl	8005030 <_free_r>
 8004fb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004fb6:	b111      	cbz	r1, 8004fbe <_reclaim_reent+0x5e>
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 f839 	bl	8005030 <_free_r>
 8004fbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004fc0:	b111      	cbz	r1, 8004fc8 <_reclaim_reent+0x68>
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 f834 	bl	8005030 <_free_r>
 8004fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fca:	b111      	cbz	r1, 8004fd2 <_reclaim_reent+0x72>
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f000 f82f 	bl	8005030 <_free_r>
 8004fd2:	69a3      	ldr	r3, [r4, #24]
 8004fd4:	b1e3      	cbz	r3, 8005010 <_reclaim_reent+0xb0>
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fda:	4798      	blx	r3
 8004fdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004fde:	b1b9      	cbz	r1, 8005010 <_reclaim_reent+0xb0>
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fe6:	f7ff bfad 	b.w	8004f44 <cleanup_glue>
 8004fea:	5949      	ldr	r1, [r1, r5]
 8004fec:	b941      	cbnz	r1, 8005000 <_reclaim_reent+0xa0>
 8004fee:	3504      	adds	r5, #4
 8004ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff2:	2d80      	cmp	r5, #128	; 0x80
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	d1f8      	bne.n	8004fea <_reclaim_reent+0x8a>
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 f819 	bl	8005030 <_free_r>
 8004ffe:	e7ba      	b.n	8004f76 <_reclaim_reent+0x16>
 8005000:	680e      	ldr	r6, [r1, #0]
 8005002:	4620      	mov	r0, r4
 8005004:	f000 f814 	bl	8005030 <_free_r>
 8005008:	4631      	mov	r1, r6
 800500a:	e7ef      	b.n	8004fec <_reclaim_reent+0x8c>
 800500c:	2500      	movs	r5, #0
 800500e:	e7ef      	b.n	8004ff0 <_reclaim_reent+0x90>
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	bf00      	nop
 8005014:	20000014 	.word	0x20000014

08005018 <__malloc_lock>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__malloc_lock+0x8>)
 800501a:	f7ff bf7b 	b.w	8004f14 <__retarget_lock_acquire_recursive>
 800501e:	bf00      	nop
 8005020:	20001a00 	.word	0x20001a00

08005024 <__malloc_unlock>:
 8005024:	4801      	ldr	r0, [pc, #4]	; (800502c <__malloc_unlock+0x8>)
 8005026:	f7ff bf76 	b.w	8004f16 <__retarget_lock_release_recursive>
 800502a:	bf00      	nop
 800502c:	20001a00 	.word	0x20001a00

08005030 <_free_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4605      	mov	r5, r0
 8005034:	2900      	cmp	r1, #0
 8005036:	d040      	beq.n	80050ba <_free_r+0x8a>
 8005038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800503c:	1f0c      	subs	r4, r1, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfb8      	it	lt
 8005042:	18e4      	addlt	r4, r4, r3
 8005044:	f7ff ffe8 	bl	8005018 <__malloc_lock>
 8005048:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <_free_r+0x8c>)
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	b933      	cbnz	r3, 800505c <_free_r+0x2c>
 800504e:	6063      	str	r3, [r4, #4]
 8005050:	6014      	str	r4, [r2, #0]
 8005052:	4628      	mov	r0, r5
 8005054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005058:	f7ff bfe4 	b.w	8005024 <__malloc_unlock>
 800505c:	42a3      	cmp	r3, r4
 800505e:	d908      	bls.n	8005072 <_free_r+0x42>
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	1821      	adds	r1, r4, r0
 8005064:	428b      	cmp	r3, r1
 8005066:	bf01      	itttt	eq
 8005068:	6819      	ldreq	r1, [r3, #0]
 800506a:	685b      	ldreq	r3, [r3, #4]
 800506c:	1809      	addeq	r1, r1, r0
 800506e:	6021      	streq	r1, [r4, #0]
 8005070:	e7ed      	b.n	800504e <_free_r+0x1e>
 8005072:	461a      	mov	r2, r3
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	b10b      	cbz	r3, 800507c <_free_r+0x4c>
 8005078:	42a3      	cmp	r3, r4
 800507a:	d9fa      	bls.n	8005072 <_free_r+0x42>
 800507c:	6811      	ldr	r1, [r2, #0]
 800507e:	1850      	adds	r0, r2, r1
 8005080:	42a0      	cmp	r0, r4
 8005082:	d10b      	bne.n	800509c <_free_r+0x6c>
 8005084:	6820      	ldr	r0, [r4, #0]
 8005086:	4401      	add	r1, r0
 8005088:	1850      	adds	r0, r2, r1
 800508a:	4283      	cmp	r3, r0
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	d1e0      	bne.n	8005052 <_free_r+0x22>
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4401      	add	r1, r0
 8005096:	6011      	str	r1, [r2, #0]
 8005098:	6053      	str	r3, [r2, #4]
 800509a:	e7da      	b.n	8005052 <_free_r+0x22>
 800509c:	d902      	bls.n	80050a4 <_free_r+0x74>
 800509e:	230c      	movs	r3, #12
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	e7d6      	b.n	8005052 <_free_r+0x22>
 80050a4:	6820      	ldr	r0, [r4, #0]
 80050a6:	1821      	adds	r1, r4, r0
 80050a8:	428b      	cmp	r3, r1
 80050aa:	bf01      	itttt	eq
 80050ac:	6819      	ldreq	r1, [r3, #0]
 80050ae:	685b      	ldreq	r3, [r3, #4]
 80050b0:	1809      	addeq	r1, r1, r0
 80050b2:	6021      	streq	r1, [r4, #0]
 80050b4:	6063      	str	r3, [r4, #4]
 80050b6:	6054      	str	r4, [r2, #4]
 80050b8:	e7cb      	b.n	8005052 <_free_r+0x22>
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	20001a04 	.word	0x20001a04

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
