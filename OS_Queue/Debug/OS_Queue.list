
OS_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f00  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080030cc  080030cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030cc  080030cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080030d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000118c  20000074  08003148  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001200  08003148  00021200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcc0  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002462  00000000  00000000  0002dd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  000301c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f3b  00000000  00000000  00031758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdc7  00000000  00000000  00049693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a6d  00000000  00000000  0005645a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfec7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f54  00000000  00000000  000dff18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ff8 	.word	0x08002ff8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08002ff8 	.word	0x08002ff8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fae9 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f823 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f90b 	bl	80003a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f8e3 	bl	800035c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f863 	bl	8000260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800019a:	f000 f88b 	bl	80002b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800019e:	f000 f8b3 	bl	8000308 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001a2:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <main+0x4c>)
 80001a4:	1d3c      	adds	r4, r7, #4
 80001a6:	461d      	mov	r5, r3
 80001a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 fc2f 	bl	8001a1c <osThreadCreate>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a03      	ldr	r2, [pc, #12]	; (80001d0 <main+0x50>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f001 fc23 	bl	8001a0e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <main+0x48>
 80001ca:	bf00      	nop
 80001cc:	0800301c 	.word	0x0800301c
 80001d0:	200004a4 	.word	0x200004a4

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	; 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fe42 	bl	8002e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f6:	2301      	movs	r3, #1
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000208:	2302      	movs	r3, #2
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000212:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fef1 	bl	8001004 <HAL_RCC_OscConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000228:	f000 f8f4 	bl	8000414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	230f      	movs	r3, #15
 800022e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000230:	2302      	movs	r3, #2
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f95e 	bl	8001508 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000252:	f000 f8df 	bl	8000414 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	; 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_USART1_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800026c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000298:	f001 fac4 	bl	8001824 <HAL_UART_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 f8b7 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000344 	.word	0x20000344
 80002b0:	40013800 	.word	0x40013800

080002b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART2_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002da:	220c      	movs	r2, #12
 80002dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_USART2_UART_Init+0x4c>)
 80002ec:	f001 fa9a 	bl	8001824 <HAL_UART_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002f6:	f000 f88d 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	2000038c 	.word	0x2000038c
 8000304:	40004400 	.word	0x40004400

08000308 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 800030e:	4a12      	ldr	r2, [pc, #72]	; (8000358 <MX_USART3_UART_Init+0x50>)
 8000310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 8000314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_USART3_UART_Init+0x4c>)
 8000340:	f001 fa70 	bl	8001824 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800034a:	f000 f863 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200003d4 	.word	0x200003d4
 8000358:	40004800 	.word	0x40004800

0800035c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_DMA_Init+0x48>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <MX_DMA_Init+0x48>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6153      	str	r3, [r2, #20]
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <MX_DMA_Init+0x48>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2105      	movs	r1, #5
 800037e:	200f      	movs	r0, #15
 8000380:	f000 fb25 	bl	80009ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000384:	200f      	movs	r0, #15
 8000386:	f000 fb3e 	bl	8000a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2105      	movs	r1, #5
 800038e:	2010      	movs	r0, #16
 8000390:	f000 fb1d 	bl	80009ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000394:	2010      	movs	r0, #16
 8000396:	f000 fb36 	bl	8000a06 <HAL_NVIC_EnableIRQ>

}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_GPIO_Init+0x58>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a13      	ldr	r2, [pc, #76]	; (8000400 <MX_GPIO_Init+0x58>)
 80003b4:	f043 0320 	orr.w	r3, r3, #32
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_GPIO_Init+0x58>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0320 	and.w	r3, r3, #32
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_GPIO_Init+0x58>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <MX_GPIO_Init+0x58>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_GPIO_Init+0x58>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0304 	and.w	r3, r3, #4
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_GPIO_Init+0x58>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a07      	ldr	r2, [pc, #28]	; (8000400 <MX_GPIO_Init+0x58>)
 80003e4:	f043 0308 	orr.w	r3, r3, #8
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_GPIO_Init+0x58>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000

08000404 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800040c:	2001      	movs	r0, #1
 800040e:	f001 fb51 	bl	8001ab4 <osDelay>
 8000412:	e7fb      	b.n	800040c <StartDefaultTask+0x8>

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	e7fe      	b.n	800041c <Error_Handler+0x8>
	...

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <HAL_MspInit+0x4c>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a10      	ldr	r2, [pc, #64]	; (800046c <HAL_MspInit+0x4c>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <HAL_MspInit+0x4c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <HAL_MspInit+0x4c>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <HAL_MspInit+0x4c>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_MspInit+0x4c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	210f      	movs	r1, #15
 800045a:	f06f 0001 	mvn.w	r0, #1
 800045e:	f000 fab6 	bl	80009ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08c      	sub	sp, #48	; 0x30
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0320 	add.w	r3, r7, #32
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a79      	ldr	r2, [pc, #484]	; (8000670 <HAL_UART_MspInit+0x200>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d158      	bne.n	8000542 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000490:	4b78      	ldr	r3, [pc, #480]	; (8000674 <HAL_UART_MspInit+0x204>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a77      	ldr	r2, [pc, #476]	; (8000674 <HAL_UART_MspInit+0x204>)
 8000496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b75      	ldr	r3, [pc, #468]	; (8000674 <HAL_UART_MspInit+0x204>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a4:	61fb      	str	r3, [r7, #28]
 80004a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b72      	ldr	r3, [pc, #456]	; (8000674 <HAL_UART_MspInit+0x204>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a71      	ldr	r2, [pc, #452]	; (8000674 <HAL_UART_MspInit+0x204>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b6f      	ldr	r3, [pc, #444]	; (8000674 <HAL_UART_MspInit+0x204>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	61bb      	str	r3, [r7, #24]
 80004be:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c6:	2302      	movs	r3, #2
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ca:	2303      	movs	r3, #3
 80004cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	4619      	mov	r1, r3
 80004d4:	4868      	ldr	r0, [pc, #416]	; (8000678 <HAL_UART_MspInit+0x208>)
 80004d6:	f000 fc11 	bl	8000cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0320 	add.w	r3, r7, #32
 80004ec:	4619      	mov	r1, r3
 80004ee:	4862      	ldr	r0, [pc, #392]	; (8000678 <HAL_UART_MspInit+0x208>)
 80004f0:	f000 fc04 	bl	8000cfc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80004f4:	4b61      	ldr	r3, [pc, #388]	; (800067c <HAL_UART_MspInit+0x20c>)
 80004f6:	4a62      	ldr	r2, [pc, #392]	; (8000680 <HAL_UART_MspInit+0x210>)
 80004f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004fa:	4b60      	ldr	r3, [pc, #384]	; (800067c <HAL_UART_MspInit+0x20c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000500:	4b5e      	ldr	r3, [pc, #376]	; (800067c <HAL_UART_MspInit+0x20c>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000506:	4b5d      	ldr	r3, [pc, #372]	; (800067c <HAL_UART_MspInit+0x20c>)
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800050c:	4b5b      	ldr	r3, [pc, #364]	; (800067c <HAL_UART_MspInit+0x20c>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000512:	4b5a      	ldr	r3, [pc, #360]	; (800067c <HAL_UART_MspInit+0x20c>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000518:	4b58      	ldr	r3, [pc, #352]	; (800067c <HAL_UART_MspInit+0x20c>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800051e:	4b57      	ldr	r3, [pc, #348]	; (800067c <HAL_UART_MspInit+0x20c>)
 8000520:	2200      	movs	r2, #0
 8000522:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000524:	4855      	ldr	r0, [pc, #340]	; (800067c <HAL_UART_MspInit+0x20c>)
 8000526:	f000 fa89 	bl	8000a3c <HAL_DMA_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000530:	f7ff ff70 	bl	8000414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a51      	ldr	r2, [pc, #324]	; (800067c <HAL_UART_MspInit+0x20c>)
 8000538:	63da      	str	r2, [r3, #60]	; 0x3c
 800053a:	4a50      	ldr	r2, [pc, #320]	; (800067c <HAL_UART_MspInit+0x20c>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000540:	e092      	b.n	8000668 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a4f      	ldr	r2, [pc, #316]	; (8000684 <HAL_UART_MspInit+0x214>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d156      	bne.n	80005fa <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800054c:	4b49      	ldr	r3, [pc, #292]	; (8000674 <HAL_UART_MspInit+0x204>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	4a48      	ldr	r2, [pc, #288]	; (8000674 <HAL_UART_MspInit+0x204>)
 8000552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000556:	61d3      	str	r3, [r2, #28]
 8000558:	4b46      	ldr	r3, [pc, #280]	; (8000674 <HAL_UART_MspInit+0x204>)
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b43      	ldr	r3, [pc, #268]	; (8000674 <HAL_UART_MspInit+0x204>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a42      	ldr	r2, [pc, #264]	; (8000674 <HAL_UART_MspInit+0x204>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b40      	ldr	r3, [pc, #256]	; (8000674 <HAL_UART_MspInit+0x204>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800057c:	2304      	movs	r3, #4
 800057e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000584:	2303      	movs	r3, #3
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4619      	mov	r1, r3
 800058e:	483a      	ldr	r0, [pc, #232]	; (8000678 <HAL_UART_MspInit+0x208>)
 8000590:	f000 fbb4 	bl	8000cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000594:	2308      	movs	r3, #8
 8000596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4619      	mov	r1, r3
 80005a6:	4834      	ldr	r0, [pc, #208]	; (8000678 <HAL_UART_MspInit+0x208>)
 80005a8:	f000 fba8 	bl	8000cfc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80005ac:	4b36      	ldr	r3, [pc, #216]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005ae:	4a37      	ldr	r2, [pc, #220]	; (800068c <HAL_UART_MspInit+0x21c>)
 80005b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005b2:	4b35      	ldr	r3, [pc, #212]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b8:	4b33      	ldr	r3, [pc, #204]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005c4:	4b30      	ldr	r3, [pc, #192]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80005d0:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005d8:	2200      	movs	r2, #0
 80005da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80005dc:	482a      	ldr	r0, [pc, #168]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005de:	f000 fa2d 	bl	8000a3c <HAL_DMA_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <HAL_UART_MspInit+0x17c>
      Error_Handler();
 80005e8:	f7ff ff14 	bl	8000414 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a26      	ldr	r2, [pc, #152]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80005f2:	4a25      	ldr	r2, [pc, #148]	; (8000688 <HAL_UART_MspInit+0x218>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80005f8:	e036      	b.n	8000668 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a24      	ldr	r2, [pc, #144]	; (8000690 <HAL_UART_MspInit+0x220>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d131      	bne.n	8000668 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <HAL_UART_MspInit+0x204>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <HAL_UART_MspInit+0x204>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	61d3      	str	r3, [r2, #28]
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_UART_MspInit+0x204>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_UART_MspInit+0x204>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_UART_MspInit+0x204>)
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_UART_MspInit+0x204>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4619      	mov	r1, r3
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <HAL_UART_MspInit+0x224>)
 800064a:	f000 fb57 	bl	8000cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800064e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4619      	mov	r1, r3
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <HAL_UART_MspInit+0x224>)
 8000664:	f000 fb4a 	bl	8000cfc <HAL_GPIO_Init>
}
 8000668:	bf00      	nop
 800066a:	3730      	adds	r7, #48	; 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40013800 	.word	0x40013800
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800
 800067c:	2000041c 	.word	0x2000041c
 8000680:	40020058 	.word	0x40020058
 8000684:	40004400 	.word	0x40004400
 8000688:	20000460 	.word	0x20000460
 800068c:	4002006c 	.word	0x4002006c
 8000690:	40004800 	.word	0x40004800
 8000694:	40010c00 	.word	0x40010c00

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c6:	f000 f88f 	bl	80007e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006ca:	f001 ff9d 	bl	8002608 <xTaskGetSchedulerState>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d001      	beq.n	80006d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006d4:	f002 f988 	bl	80029e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <DMA1_Channel5_IRQHandler+0x10>)
 80006e2:	f000 fa05 	bl	8000af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000041c 	.word	0x2000041c

080006f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <DMA1_Channel6_IRQHandler+0x10>)
 80006f6:	f000 f9fb 	bl	8000af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000460 	.word	0x20000460

08000704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff fff8 	bl	8000704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000716:	490c      	ldr	r1, [pc, #48]	; (8000748 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <LoopFillZerobss+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a09      	ldr	r2, [pc, #36]	; (8000750 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800072c:	4c09      	ldr	r4, [pc, #36]	; (8000754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f002 fb71 	bl	8002e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff fd1f 	bl	8000180 <main>
  bx lr
 8000742:	4770      	bx	lr
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800074c:	080030d4 	.word	0x080030d4
  ldr r2, =_sbss
 8000750:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000754:	20001200 	.word	0x20001200

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f923 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	200f      	movs	r0, #15
 8000774:	f000 f808 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff fe52 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x54>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x58>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f93b 	bl	8000a22 <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00e      	b.n	80007d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d80a      	bhi.n	80007d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f000 f903 	bl	80009ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_InitTick+0x5c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_IncTick+0x1c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x20>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a03      	ldr	r2, [pc, #12]	; (8000808 <HAL_IncTick+0x20>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	20000008 	.word	0x20000008
 8000808:	200004a8 	.word	0x200004a8

0800080c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <HAL_GetTick+0x10>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	200004a8 	.word	0x200004a8

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <__NVIC_EnableIRQ+0x34>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000984:	d301      	bcc.n	800098a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000986:	2301      	movs	r3, #1
 8000988:	e00f      	b.n	80009aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SysTick_Config+0x40>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000992:	210f      	movs	r1, #15
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f7ff ff90 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SysTick_Config+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SysTick_Config+0x40>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff2d 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e0:	f7ff ff42 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff ff90 	bl	8000910 <NVIC_EncodePriority>
 80009f0:	4602      	mov	r2, r0
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff5f 	bl	80008bc <__NVIC_SetPriority>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff35 	bl	8000884 <__NVIC_EnableIRQ>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffa2 	bl	8000974 <SysTick_Config>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e043      	b.n	8000ada <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <HAL_DMA_Init+0xa8>)
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <HAL_DMA_Init+0xac>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	009a      	lsls	r2, r3, #2
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <HAL_DMA_Init+0xb0>)
 8000a6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2202      	movs	r2, #2
 8000a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	bffdfff8 	.word	0xbffdfff8
 8000ae8:	cccccccd 	.word	0xcccccccd
 8000aec:	40020000 	.word	0x40020000

08000af0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d04f      	beq.n	8000bb8 <HAL_DMA_IRQHandler+0xc8>
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d04a      	beq.n	8000bb8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0320 	and.w	r3, r3, #32
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d107      	bne.n	8000b40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f022 0204 	bic.w	r2, r2, #4
 8000b3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a66      	ldr	r2, [pc, #408]	; (8000ce0 <HAL_DMA_IRQHandler+0x1f0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d029      	beq.n	8000b9e <HAL_DMA_IRQHandler+0xae>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a65      	ldr	r2, [pc, #404]	; (8000ce4 <HAL_DMA_IRQHandler+0x1f4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d022      	beq.n	8000b9a <HAL_DMA_IRQHandler+0xaa>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a63      	ldr	r2, [pc, #396]	; (8000ce8 <HAL_DMA_IRQHandler+0x1f8>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d01a      	beq.n	8000b94 <HAL_DMA_IRQHandler+0xa4>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a62      	ldr	r2, [pc, #392]	; (8000cec <HAL_DMA_IRQHandler+0x1fc>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d012      	beq.n	8000b8e <HAL_DMA_IRQHandler+0x9e>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a60      	ldr	r2, [pc, #384]	; (8000cf0 <HAL_DMA_IRQHandler+0x200>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d00a      	beq.n	8000b88 <HAL_DMA_IRQHandler+0x98>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a5f      	ldr	r2, [pc, #380]	; (8000cf4 <HAL_DMA_IRQHandler+0x204>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d102      	bne.n	8000b82 <HAL_DMA_IRQHandler+0x92>
 8000b7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b80:	e00e      	b.n	8000ba0 <HAL_DMA_IRQHandler+0xb0>
 8000b82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b86:	e00b      	b.n	8000ba0 <HAL_DMA_IRQHandler+0xb0>
 8000b88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b8c:	e008      	b.n	8000ba0 <HAL_DMA_IRQHandler+0xb0>
 8000b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b92:	e005      	b.n	8000ba0 <HAL_DMA_IRQHandler+0xb0>
 8000b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b98:	e002      	b.n	8000ba0 <HAL_DMA_IRQHandler+0xb0>
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	e000      	b.n	8000ba0 <HAL_DMA_IRQHandler+0xb0>
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	4a55      	ldr	r2, [pc, #340]	; (8000cf8 <HAL_DMA_IRQHandler+0x208>)
 8000ba2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f000 8094 	beq.w	8000cd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000bb6:	e08e      	b.n	8000cd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d056      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x186>
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d051      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0320 	and.w	r3, r3, #32
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10b      	bne.n	8000bf8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 020a 	bic.w	r2, r2, #10
 8000bee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a38      	ldr	r2, [pc, #224]	; (8000ce0 <HAL_DMA_IRQHandler+0x1f0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d029      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x166>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_DMA_IRQHandler+0x1f4>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d022      	beq.n	8000c52 <HAL_DMA_IRQHandler+0x162>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a35      	ldr	r2, [pc, #212]	; (8000ce8 <HAL_DMA_IRQHandler+0x1f8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d01a      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x15c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a34      	ldr	r2, [pc, #208]	; (8000cec <HAL_DMA_IRQHandler+0x1fc>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d012      	beq.n	8000c46 <HAL_DMA_IRQHandler+0x156>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a32      	ldr	r2, [pc, #200]	; (8000cf0 <HAL_DMA_IRQHandler+0x200>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d00a      	beq.n	8000c40 <HAL_DMA_IRQHandler+0x150>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a31      	ldr	r2, [pc, #196]	; (8000cf4 <HAL_DMA_IRQHandler+0x204>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d102      	bne.n	8000c3a <HAL_DMA_IRQHandler+0x14a>
 8000c34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c38:	e00e      	b.n	8000c58 <HAL_DMA_IRQHandler+0x168>
 8000c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c3e:	e00b      	b.n	8000c58 <HAL_DMA_IRQHandler+0x168>
 8000c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c44:	e008      	b.n	8000c58 <HAL_DMA_IRQHandler+0x168>
 8000c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4a:	e005      	b.n	8000c58 <HAL_DMA_IRQHandler+0x168>
 8000c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c50:	e002      	b.n	8000c58 <HAL_DMA_IRQHandler+0x168>
 8000c52:	2320      	movs	r3, #32
 8000c54:	e000      	b.n	8000c58 <HAL_DMA_IRQHandler+0x168>
 8000c56:	2302      	movs	r3, #2
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <HAL_DMA_IRQHandler+0x208>)
 8000c5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d034      	beq.n	8000cd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000c74:	e02f      	b.n	8000cd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4013      	ands	r3, r2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d028      	beq.n	8000cd8 <HAL_DMA_IRQHandler+0x1e8>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d023      	beq.n	8000cd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 020e 	bic.w	r2, r2, #14
 8000c9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d004      	beq.n	8000cd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	4798      	blx	r3
    }
  }
  return;
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
}
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40020008 	.word	0x40020008
 8000ce4:	4002001c 	.word	0x4002001c
 8000ce8:	40020030 	.word	0x40020030
 8000cec:	40020044 	.word	0x40020044
 8000cf0:	40020058 	.word	0x40020058
 8000cf4:	4002006c 	.word	0x4002006c
 8000cf8:	40020000 	.word	0x40020000

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b08b      	sub	sp, #44	; 0x2c
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	e169      	b.n	8000fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d10:	2201      	movs	r2, #1
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	f040 8158 	bne.w	8000fde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4a9a      	ldr	r2, [pc, #616]	; (8000f9c <HAL_GPIO_Init+0x2a0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d05e      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d38:	4a98      	ldr	r2, [pc, #608]	; (8000f9c <HAL_GPIO_Init+0x2a0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d875      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d3e:	4a98      	ldr	r2, [pc, #608]	; (8000fa0 <HAL_GPIO_Init+0x2a4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d058      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d44:	4a96      	ldr	r2, [pc, #600]	; (8000fa0 <HAL_GPIO_Init+0x2a4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d86f      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d4a:	4a96      	ldr	r2, [pc, #600]	; (8000fa4 <HAL_GPIO_Init+0x2a8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d052      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d50:	4a94      	ldr	r2, [pc, #592]	; (8000fa4 <HAL_GPIO_Init+0x2a8>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d869      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d56:	4a94      	ldr	r2, [pc, #592]	; (8000fa8 <HAL_GPIO_Init+0x2ac>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d04c      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d5c:	4a92      	ldr	r2, [pc, #584]	; (8000fa8 <HAL_GPIO_Init+0x2ac>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d863      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d62:	4a92      	ldr	r2, [pc, #584]	; (8000fac <HAL_GPIO_Init+0x2b0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d046      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
 8000d68:	4a90      	ldr	r2, [pc, #576]	; (8000fac <HAL_GPIO_Init+0x2b0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d85d      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d6e:	2b12      	cmp	r3, #18
 8000d70:	d82a      	bhi.n	8000dc8 <HAL_GPIO_Init+0xcc>
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d859      	bhi.n	8000e2a <HAL_GPIO_Init+0x12e>
 8000d76:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <HAL_GPIO_Init+0x80>)
 8000d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7c:	08000df7 	.word	0x08000df7
 8000d80:	08000dd1 	.word	0x08000dd1
 8000d84:	08000de3 	.word	0x08000de3
 8000d88:	08000e25 	.word	0x08000e25
 8000d8c:	08000e2b 	.word	0x08000e2b
 8000d90:	08000e2b 	.word	0x08000e2b
 8000d94:	08000e2b 	.word	0x08000e2b
 8000d98:	08000e2b 	.word	0x08000e2b
 8000d9c:	08000e2b 	.word	0x08000e2b
 8000da0:	08000e2b 	.word	0x08000e2b
 8000da4:	08000e2b 	.word	0x08000e2b
 8000da8:	08000e2b 	.word	0x08000e2b
 8000dac:	08000e2b 	.word	0x08000e2b
 8000db0:	08000e2b 	.word	0x08000e2b
 8000db4:	08000e2b 	.word	0x08000e2b
 8000db8:	08000e2b 	.word	0x08000e2b
 8000dbc:	08000e2b 	.word	0x08000e2b
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000ded 	.word	0x08000ded
 8000dc8:	4a79      	ldr	r2, [pc, #484]	; (8000fb0 <HAL_GPIO_Init+0x2b4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dce:	e02c      	b.n	8000e2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	623b      	str	r3, [r7, #32]
          break;
 8000dd6:	e029      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	623b      	str	r3, [r7, #32]
          break;
 8000de0:	e024      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	623b      	str	r3, [r7, #32]
          break;
 8000dea:	e01f      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	330c      	adds	r3, #12
 8000df2:	623b      	str	r3, [r7, #32]
          break;
 8000df4:	e01a      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	623b      	str	r3, [r7, #32]
          break;
 8000e02:	e013      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	611a      	str	r2, [r3, #16]
          break;
 8000e16:	e009      	b.n	8000e2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	615a      	str	r2, [r3, #20]
          break;
 8000e22:	e003      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x130>
          break;
 8000e2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2bff      	cmp	r3, #255	; 0xff
 8000e30:	d801      	bhi.n	8000e36 <HAL_GPIO_Init+0x13a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	e001      	b.n	8000e3a <HAL_GPIO_Init+0x13e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d802      	bhi.n	8000e48 <HAL_GPIO_Init+0x14c>
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	e002      	b.n	8000e4e <HAL_GPIO_Init+0x152>
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	3b08      	subs	r3, #8
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	210f      	movs	r1, #15
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	6a39      	ldr	r1, [r7, #32]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 80b1 	beq.w	8000fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7c:	4b4d      	ldr	r3, [pc, #308]	; (8000fb4 <HAL_GPIO_Init+0x2b8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a4c      	ldr	r2, [pc, #304]	; (8000fb4 <HAL_GPIO_Init+0x2b8>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <HAL_GPIO_Init+0x2b8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e94:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_GPIO_Init+0x2bc>)
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a40      	ldr	r2, [pc, #256]	; (8000fbc <HAL_GPIO_Init+0x2c0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d013      	beq.n	8000ee8 <HAL_GPIO_Init+0x1ec>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a3f      	ldr	r2, [pc, #252]	; (8000fc0 <HAL_GPIO_Init+0x2c4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d00d      	beq.n	8000ee4 <HAL_GPIO_Init+0x1e8>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3e      	ldr	r2, [pc, #248]	; (8000fc4 <HAL_GPIO_Init+0x2c8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3d      	ldr	r2, [pc, #244]	; (8000fc8 <HAL_GPIO_Init+0x2cc>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d101      	bne.n	8000edc <HAL_GPIO_Init+0x1e0>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e006      	b.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000edc:	2304      	movs	r3, #4
 8000ede:	e004      	b.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	e002      	b.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <HAL_GPIO_Init+0x1ee>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eec:	f002 0203 	and.w	r2, r2, #3
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	4093      	lsls	r3, r2
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000efa:	492f      	ldr	r1, [pc, #188]	; (8000fb8 <HAL_GPIO_Init+0x2bc>)
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	492c      	ldr	r1, [pc, #176]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	608b      	str	r3, [r1, #8]
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	4928      	ldr	r1, [pc, #160]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f3c:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	4922      	ldr	r1, [pc, #136]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	60cb      	str	r3, [r1, #12]
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	491e      	ldr	r1, [pc, #120]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4918      	ldr	r1, [pc, #96]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4914      	ldr	r1, [pc, #80]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d021      	beq.n	8000fd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	490e      	ldr	r1, [pc, #56]	; (8000fcc <HAL_GPIO_Init+0x2d0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	600b      	str	r3, [r1, #0]
 8000f98:	e021      	b.n	8000fde <HAL_GPIO_Init+0x2e2>
 8000f9a:	bf00      	nop
 8000f9c:	10320000 	.word	0x10320000
 8000fa0:	10310000 	.word	0x10310000
 8000fa4:	10220000 	.word	0x10220000
 8000fa8:	10210000 	.word	0x10210000
 8000fac:	10120000 	.word	0x10120000
 8000fb0:	10110000 	.word	0x10110000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40011000 	.word	0x40011000
 8000fc8:	40011400 	.word	0x40011400
 8000fcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_GPIO_Init+0x304>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	4909      	ldr	r1, [pc, #36]	; (8001000 <HAL_GPIO_Init+0x304>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	fa22 f303 	lsr.w	r3, r2, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f47f ae8e 	bne.w	8000d10 <HAL_GPIO_Init+0x14>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	372c      	adds	r7, #44	; 0x2c
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	40010400 	.word	0x40010400

08001004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e272      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8087 	beq.w	8001132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001024:	4b92      	ldr	r3, [pc, #584]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	2b04      	cmp	r3, #4
 800102e:	d00c      	beq.n	800104a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001030:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b08      	cmp	r3, #8
 800103a:	d112      	bne.n	8001062 <HAL_RCC_OscConfig+0x5e>
 800103c:	4b8c      	ldr	r3, [pc, #560]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001048:	d10b      	bne.n	8001062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104a:	4b89      	ldr	r3, [pc, #548]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d06c      	beq.n	8001130 <HAL_RCC_OscConfig+0x12c>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d168      	bne.n	8001130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e24c      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x76>
 800106c:	4b80      	ldr	r3, [pc, #512]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a7f      	ldr	r2, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e02e      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x98>
 8001082:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a7a      	ldr	r2, [pc, #488]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b78      	ldr	r3, [pc, #480]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a77      	ldr	r2, [pc, #476]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e01d      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0xbc>
 80010a6:	4b72      	ldr	r3, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a71      	ldr	r2, [pc, #452]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 80010c0:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a6a      	ldr	r2, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b68      	ldr	r3, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a67      	ldr	r2, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d013      	beq.n	8001108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fb94 	bl	800080c <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fb90 	bl	800080c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b64      	cmp	r3, #100	; 0x64
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e200      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b5d      	ldr	r3, [pc, #372]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0xe4>
 8001106:	e014      	b.n	8001132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fb80 	bl	800080c <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fb7c 	bl	800080c <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e1ec      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	4b53      	ldr	r3, [pc, #332]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x10c>
 800112e:	e000      	b.n	8001132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d063      	beq.n	8001206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800113e:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114a:	4b49      	ldr	r3, [pc, #292]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b08      	cmp	r3, #8
 8001154:	d11c      	bne.n	8001190 <HAL_RCC_OscConfig+0x18c>
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d116      	bne.n	8001190 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_RCC_OscConfig+0x176>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d001      	beq.n	800117a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e1c0      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4939      	ldr	r1, [pc, #228]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	e03a      	b.n	8001206 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_RCC_OscConfig+0x270>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fb35 	bl	800080c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fb31 	bl	800080c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1a1      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4927      	ldr	r1, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_RCC_OscConfig+0x270>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb14 	bl	800080c <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e8:	f7ff fb10 	bl	800080c <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e180      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d03a      	beq.n	8001288 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d019      	beq.n	800124e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_RCC_OscConfig+0x274>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001220:	f7ff faf4 	bl	800080c <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff faf0 	bl	800080c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e160      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 face 	bl	80017e8 <RCC_Delay>
 800124c:	e01c      	b.n	8001288 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_RCC_OscConfig+0x274>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001254:	f7ff fada 	bl	800080c <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125a:	e00f      	b.n	800127c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fad6 	bl	800080c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d908      	bls.n	800127c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e146      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	42420000 	.word	0x42420000
 8001278:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b92      	ldr	r3, [pc, #584]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e9      	bne.n	800125c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80a6 	beq.w	80013e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b8b      	ldr	r3, [pc, #556]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10d      	bne.n	80012c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a87      	ldr	r2, [pc, #540]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b82      	ldr	r3, [pc, #520]	; (80014cc <HAL_RCC_OscConfig+0x4c8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d118      	bne.n	8001300 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ce:	4b7f      	ldr	r3, [pc, #508]	; (80014cc <HAL_RCC_OscConfig+0x4c8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7e      	ldr	r2, [pc, #504]	; (80014cc <HAL_RCC_OscConfig+0x4c8>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012da:	f7ff fa97 	bl	800080c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e2:	f7ff fa93 	bl	800080c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e103      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b75      	ldr	r3, [pc, #468]	; (80014cc <HAL_RCC_OscConfig+0x4c8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x312>
 8001308:	4b6f      	ldr	r3, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4a6e      	ldr	r2, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6213      	str	r3, [r2, #32]
 8001314:	e02d      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x334>
 800131e:	4b6a      	ldr	r3, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a69      	ldr	r2, [pc, #420]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	4b67      	ldr	r3, [pc, #412]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a66      	ldr	r2, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	e01c      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d10c      	bne.n	800135a <HAL_RCC_OscConfig+0x356>
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a60      	ldr	r2, [pc, #384]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a5d      	ldr	r2, [pc, #372]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	e00b      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 800135a:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a5a      	ldr	r2, [pc, #360]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6213      	str	r3, [r2, #32]
 8001366:	4b58      	ldr	r3, [pc, #352]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a57      	ldr	r2, [pc, #348]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	f023 0304 	bic.w	r3, r3, #4
 8001370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fa47 	bl	800080c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fa43 	bl	800080c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0b1      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0ee      	beq.n	8001382 <HAL_RCC_OscConfig+0x37e>
 80013a4:	e014      	b.n	80013d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fa31 	bl	800080c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ae:	f7ff fa2d 	bl	800080c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e09b      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c4:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1ee      	bne.n	80013ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d105      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a3b      	ldr	r2, [pc, #236]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8087 	beq.w	80014fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ec:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d061      	beq.n	80014bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d146      	bne.n	800148e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <HAL_RCC_OscConfig+0x4cc>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fa01 	bl	800080c <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff f9fd 	bl	800080c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e06d      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d108      	bne.n	8001448 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	4921      	ldr	r1, [pc, #132]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a19      	ldr	r1, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	430b      	orrs	r3, r1
 800145a:	491b      	ldr	r1, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x4cc>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff f9d1 	bl	800080c <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff f9cd 	bl	800080c <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e03d      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x46a>
 800148c:	e035      	b.n	80014fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_RCC_OscConfig+0x4cc>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff f9ba 	bl	800080c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff f9b6 	bl	800080c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e026      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x498>
 80014ba:	e01e      	b.n	80014fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d107      	bne.n	80014d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e019      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40007000 	.word	0x40007000
 80014d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_OscConfig+0x500>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0d0      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d910      	bls.n	800154c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 0207 	bic.w	r2, r3, #7
 8001532:	4965      	ldr	r1, [pc, #404]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b8      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800156e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	494d      	ldr	r1, [pc, #308]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d040      	beq.n	8001628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d115      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e07f      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e073      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06b      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f023 0203 	bic.w	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4936      	ldr	r1, [pc, #216]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f8:	f7ff f908 	bl	800080c <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff f904 	bl	800080c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e053      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 020c 	and.w	r2, r3, #12
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1eb      	bne.n	8001600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d210      	bcs.n	8001658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 0207 	bic.w	r2, r3, #7
 800163e:	4922      	ldr	r1, [pc, #136]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e032      	b.n	80016be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4916      	ldr	r1, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	490e      	ldr	r1, [pc, #56]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001696:	f000 f821 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800169a:	4602      	mov	r2, r0
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	490a      	ldr	r1, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80016a8:	5ccb      	ldrb	r3, [r1, r3]
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1cc>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f866 	bl	8000788 <HAL_InitTick>

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	08003040 	.word	0x08003040
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_RCC_GetSysClockFreq+0x94>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b04      	cmp	r3, #4
 8001704:	d002      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0x30>
 8001706:	2b08      	cmp	r3, #8
 8001708:	d003      	beq.n	8001712 <HAL_RCC_GetSysClockFreq+0x36>
 800170a:	e027      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_GetSysClockFreq+0x98>)
 800170e:	613b      	str	r3, [r7, #16]
      break;
 8001710:	e027      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	0c9b      	lsrs	r3, r3, #18
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_RCC_GetSysClockFreq+0x9c>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_RCC_GetSysClockFreq+0x94>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0c5b      	lsrs	r3, r3, #17
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	4a11      	ldr	r2, [pc, #68]	; (800177c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <HAL_RCC_GetSysClockFreq+0x98>)
 800173e:	fb03 f202 	mul.w	r2, r3, r2
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	fbb2 f3f3 	udiv	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e004      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	613b      	str	r3, [r7, #16]
      break;
 800175a:	e002      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetSysClockFreq+0x98>)
 800175e:	613b      	str	r3, [r7, #16]
      break;
 8001760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001762:	693b      	ldr	r3, [r7, #16]
}
 8001764:	4618      	mov	r0, r3
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	007a1200 	.word	0x007a1200
 8001778:	08003058 	.word	0x08003058
 800177c:	08003068 	.word	0x08003068
 8001780:	003d0900 	.word	0x003d0900

08001784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <HAL_RCC_GetHCLKFreq+0x10>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000000 	.word	0x20000000

08001798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800179c:	f7ff fff2 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	4903      	ldr	r1, [pc, #12]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ae:	5ccb      	ldrb	r3, [r1, r3]
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	08003050 	.word	0x08003050

080017c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c4:	f7ff ffde 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0adb      	lsrs	r3, r3, #11
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4903      	ldr	r1, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08003050 	.word	0x08003050

080017e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <RCC_Delay+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <RCC_Delay+0x38>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0a5b      	lsrs	r3, r3, #9
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001804:	bf00      	nop
  }
  while (Delay --);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e5a      	subs	r2, r3, #1
 800180a:	60fa      	str	r2, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f9      	bne.n	8001804 <RCC_Delay+0x1c>
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000000 	.word	0x20000000
 8001820:	10624dd3 	.word	0x10624dd3

08001824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e042      	b.n	80018bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7fe fe10 	bl	8000470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2224      	movs	r2, #36	; 0x24
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f82b 	bl	80018c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800187c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800188c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800189c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2220      	movs	r2, #32
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018fe:	f023 030c 	bic.w	r3, r3, #12
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	430b      	orrs	r3, r1
 800190a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2c      	ldr	r2, [pc, #176]	; (80019d8 <UART_SetConfig+0x114>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d103      	bne.n	8001934 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800192c:	f7ff ff48 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	e002      	b.n	800193a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001934:	f7ff ff30 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 8001938:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	009a      	lsls	r2, r3, #2
 8001944:	441a      	add	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <UART_SetConfig+0x118>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	0119      	lsls	r1, r3, #4
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009a      	lsls	r2, r3, #2
 8001964:	441a      	add	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <UART_SetConfig+0x118>)
 8001972:	fba3 0302 	umull	r0, r3, r3, r2
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2064      	movs	r0, #100	; 0x64
 800197a:	fb00 f303 	mul.w	r3, r0, r3
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	3332      	adds	r3, #50	; 0x32
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <UART_SetConfig+0x118>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001990:	4419      	add	r1, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009a      	lsls	r2, r3, #2
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <UART_SetConfig+0x118>)
 80019aa:	fba3 0302 	umull	r0, r3, r3, r2
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2064      	movs	r0, #100	; 0x64
 80019b2:	fb00 f303 	mul.w	r3, r0, r3
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	3332      	adds	r3, #50	; 0x32
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <UART_SetConfig+0x118>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	f003 020f 	and.w	r2, r3, #15
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	440a      	add	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013800 	.word	0x40013800
 80019dc:	51eb851f 	.word	0x51eb851f

080019e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f2:	2b84      	cmp	r3, #132	; 0x84
 80019f4:	d005      	beq.n	8001a02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	3303      	adds	r3, #3
 8001a00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a12:	f000 fae7 	bl	8001fe4 <vTaskStartScheduler>
  
  return osOK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af04      	add	r7, sp, #16
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d020      	beq.n	8001a70 <osThreadCreate+0x54>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01c      	beq.n	8001a70 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685c      	ldr	r4, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681d      	ldr	r5, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691e      	ldr	r6, [r3, #16]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ffc9 	bl	80019e0 <makeFreeRtosPriority>
 8001a4e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a58:	9202      	str	r2, [sp, #8]
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	9100      	str	r1, [sp, #0]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	4632      	mov	r2, r6
 8001a62:	4629      	mov	r1, r5
 8001a64:	4620      	mov	r0, r4
 8001a66:	f000 f8e8 	bl	8001c3a <xTaskCreateStatic>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e01c      	b.n	8001aaa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685c      	ldr	r4, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a7c:	b29e      	uxth	r6, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ffab 	bl	80019e0 <makeFreeRtosPriority>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4632      	mov	r2, r6
 8001a98:	4629      	mov	r1, r5
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f000 f929 	bl	8001cf2 <xTaskCreate>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ab4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <osDelay+0x16>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	e000      	b.n	8001acc <osDelay+0x18>
 8001aca:	2301      	movs	r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fa55 	bl	8001f7c <vTaskDelay>
  
  return osOK;
 8001ad2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f103 0208 	add.w	r2, r3, #8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f103 0208 	add.w	r2, r3, #8
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f103 0208 	add.w	r2, r3, #8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8e:	d103      	bne.n	8001b98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e00c      	b.n	8001bb2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e002      	b.n	8001ba6 <vListInsert+0x2e>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d2f6      	bcs.n	8001ba0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6892      	ldr	r2, [r2, #8]
 8001bfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6852      	ldr	r2, [r2, #4]
 8001c08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d103      	bne.n	8001c1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1e5a      	subs	r2, r3, #1
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b08e      	sub	sp, #56	; 0x38
 8001c3e:	af04      	add	r7, sp, #16
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c60:	bf00      	nop
 8001c62:	e7fe      	b.n	8001c62 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <xTaskCreateStatic+0x46>
	__asm volatile
 8001c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6e:	f383 8811 	msr	BASEPRI, r3
 8001c72:	f3bf 8f6f 	isb	sy
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	61fb      	str	r3, [r7, #28]
}
 8001c7c:	bf00      	nop
 8001c7e:	e7fe      	b.n	8001c7e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c80:	23b4      	movs	r3, #180	; 0xb4
 8001c82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2bb4      	cmp	r3, #180	; 0xb4
 8001c88:	d00a      	beq.n	8001ca0 <xTaskCreateStatic+0x66>
	__asm volatile
 8001c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8e:	f383 8811 	msr	BASEPRI, r3
 8001c92:	f3bf 8f6f 	isb	sy
 8001c96:	f3bf 8f4f 	dsb	sy
 8001c9a:	61bb      	str	r3, [r7, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	e7fe      	b.n	8001c9e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01e      	beq.n	8001ce4 <xTaskCreateStatic+0xaa>
 8001ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9303      	str	r3, [sp, #12]
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f850 	bl	8001d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cde:	f000 f8e3 	bl	8001ea8 <prvAddNewTaskToReadyList>
 8001ce2:	e001      	b.n	8001ce8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001ce8:	697b      	ldr	r3, [r7, #20]
	}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b08c      	sub	sp, #48	; 0x30
 8001cf6:	af04      	add	r7, sp, #16
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 feb2 	bl	8002a70 <pvPortMalloc>
 8001d0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00e      	beq.n	8001d32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001d14:	20b4      	movs	r0, #180	; 0xb4
 8001d16:	f000 feab 	bl	8002a70 <pvPortMalloc>
 8001d1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
 8001d28:	e005      	b.n	8001d36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f000 ff64 	bl	8002bf8 <vPortFree>
 8001d30:	e001      	b.n	8001d36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9303      	str	r3, [sp, #12]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f80e 	bl	8001d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d60:	69f8      	ldr	r0, [r7, #28]
 8001d62:	f000 f8a1 	bl	8001ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	e002      	b.n	8001d72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d72:	69bb      	ldr	r3, [r7, #24]
	}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d94:	3b01      	subs	r3, #1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f023 0307 	bic.w	r3, r3, #7
 8001da2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00a      	beq.n	8001dc4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	617b      	str	r3, [r7, #20]
}
 8001dc0:	bf00      	nop
 8001dc2:	e7fe      	b.n	8001dc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	e012      	b.n	8001df0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	4413      	add	r3, r2
 8001dd0:	7819      	ldrb	r1, [r3, #0]
 8001dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3334      	adds	r3, #52	; 0x34
 8001dda:	460a      	mov	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	d9e9      	bls.n	8001dca <prvInitialiseNewTask+0x4e>
 8001df6:	e000      	b.n	8001dfa <prvInitialiseNewTask+0x7e>
		{
			break;
 8001df8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d901      	bls.n	8001e0c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e08:	2306      	movs	r3, #6
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e20:	3304      	adds	r3, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fe79 	bl	8001b1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe74 	bl	8001b1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	f1c3 0207 	rsb	r2, r3, #7
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	334c      	adds	r3, #76	; 0x4c
 8001e5c:	2260      	movs	r2, #96	; 0x60
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 f803 	bl	8002e6c <memset>
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <prvInitialiseNewTask+0x120>)
 8001e6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <prvInitialiseNewTask+0x124>)
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <prvInitialiseNewTask+0x128>)
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	69b8      	ldr	r0, [r7, #24]
 8001e7e:	f000 fc47 	bl	8002710 <pxPortInitialiseStack>
 8001e82:	4602      	mov	r2, r0
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	0800308c 	.word	0x0800308c
 8001ea0:	080030ac 	.word	0x080030ac
 8001ea4:	0800306c 	.word	0x0800306c

08001ea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001eb0:	f000 fd1c 	bl	80028ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <prvAddNewTaskToReadyList+0xb8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <prvAddNewTaskToReadyList+0xb8>)
 8001ebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001ec6:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <prvAddNewTaskToReadyList+0xb8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d110      	bne.n	8001ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ed4:	f000 fad2 	bl	800247c <prvInitialiseTaskLists>
 8001ed8:	e00d      	b.n	8001ef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <prvAddNewTaskToReadyList+0xc0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d802      	bhi.n	8001ef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <prvAddNewTaskToReadyList+0xc4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <prvAddNewTaskToReadyList+0xc4>)
 8001efe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	2201      	movs	r2, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <prvAddNewTaskToReadyList+0xc8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <prvAddNewTaskToReadyList+0xc8>)
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <prvAddNewTaskToReadyList+0xcc>)
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7ff fe02 	bl	8001b32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f2e:	f000 fd0d 	bl	800294c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <prvAddNewTaskToReadyList+0xc0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00e      	beq.n	8001f58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <prvAddNewTaskToReadyList+0xbc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d207      	bcs.n	8001f58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <prvAddNewTaskToReadyList+0xd0>)
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200005ac 	.word	0x200005ac
 8001f64:	200004ac 	.word	0x200004ac
 8001f68:	200005b8 	.word	0x200005b8
 8001f6c:	200005c8 	.word	0x200005c8
 8001f70:	200005b4 	.word	0x200005b4
 8001f74:	200004b0 	.word	0x200004b0
 8001f78:	e000ed04 	.word	0xe000ed04

08001f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d017      	beq.n	8001fbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <vTaskDelay+0x60>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <vTaskDelay+0x30>
	__asm volatile
 8001f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	60bb      	str	r3, [r7, #8]
}
 8001fa8:	bf00      	nop
 8001faa:	e7fe      	b.n	8001faa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001fac:	f000 f884 	bl	80020b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fb46 	bl	8002644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001fb8:	f000 f88c 	bl	80020d4 <xTaskResumeAll>
 8001fbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d107      	bne.n	8001fd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <vTaskDelay+0x64>)
 8001fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200005d4 	.word	0x200005d4
 8001fe0:	e000ed04 	.word	0xe000ed04

08001fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001ff2:	463a      	mov	r2, r7
 8001ff4:	1d39      	adds	r1, r7, #4
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f8a8 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	9202      	str	r2, [sp, #8]
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	2300      	movs	r3, #0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2300      	movs	r3, #0
 8002010:	460a      	mov	r2, r1
 8002012:	4921      	ldr	r1, [pc, #132]	; (8002098 <vTaskStartScheduler+0xb4>)
 8002014:	4821      	ldr	r0, [pc, #132]	; (800209c <vTaskStartScheduler+0xb8>)
 8002016:	f7ff fe10 	bl	8001c3a <xTaskCreateStatic>
 800201a:	4603      	mov	r3, r0
 800201c:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <vTaskStartScheduler+0xbc>)
 800201e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <vTaskStartScheduler+0xbc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002028:	2301      	movs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e001      	b.n	8002032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d11b      	bne.n	8002070 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	613b      	str	r3, [r7, #16]
}
 800204a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <vTaskStartScheduler+0xc0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	334c      	adds	r3, #76	; 0x4c
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <vTaskStartScheduler+0xc4>)
 8002054:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <vTaskStartScheduler+0xc8>)
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <vTaskStartScheduler+0xcc>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <vTaskStartScheduler+0xd0>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800206a:	f000 fbcd 	bl	8002808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800206e:	e00e      	b.n	800208e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002076:	d10a      	bne.n	800208e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	60fb      	str	r3, [r7, #12]
}
 800208a:	bf00      	nop
 800208c:	e7fe      	b.n	800208c <vTaskStartScheduler+0xa8>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	08003038 	.word	0x08003038
 800209c:	0800244d 	.word	0x0800244d
 80020a0:	200005d0 	.word	0x200005d0
 80020a4:	200004ac 	.word	0x200004ac
 80020a8:	20000010 	.word	0x20000010
 80020ac:	200005cc 	.word	0x200005cc
 80020b0:	200005b8 	.word	0x200005b8
 80020b4:	200005b0 	.word	0x200005b0

080020b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <vTaskSuspendAll+0x18>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <vTaskSuspendAll+0x18>)
 80020c4:	6013      	str	r3, [r2, #0]
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200005d4 	.word	0x200005d4

080020d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <xTaskResumeAll+0x114>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <xTaskResumeAll+0x2c>
	__asm volatile
 80020ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	603b      	str	r3, [r7, #0]
}
 80020fc:	bf00      	nop
 80020fe:	e7fe      	b.n	80020fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002100:	f000 fbf4 	bl	80028ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002104:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <xTaskResumeAll+0x114>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3b01      	subs	r3, #1
 800210a:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <xTaskResumeAll+0x114>)
 800210c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <xTaskResumeAll+0x114>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d161      	bne.n	80021da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002116:	4b35      	ldr	r3, [pc, #212]	; (80021ec <xTaskResumeAll+0x118>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d05d      	beq.n	80021da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800211e:	e02e      	b.n	800217e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <xTaskResumeAll+0x11c>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3318      	adds	r3, #24
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fd5b 	bl	8001be8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd56 	bl	8001be8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2201      	movs	r2, #1
 8002142:	409a      	lsls	r2, r3
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <xTaskResumeAll+0x120>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <xTaskResumeAll+0x120>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <xTaskResumeAll+0x124>)
 800215c:	441a      	add	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3304      	adds	r3, #4
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7ff fce4 	bl	8001b32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <xTaskResumeAll+0x128>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	429a      	cmp	r2, r3
 8002176:	d302      	bcc.n	800217e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <xTaskResumeAll+0x12c>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <xTaskResumeAll+0x11c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1cc      	bne.n	8002120 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800218c:	f000 fa18 	bl	80025c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <xTaskResumeAll+0x130>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d010      	beq.n	80021be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800219c:	f000 f836 	bl	800220c <xTaskIncrementTick>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <xTaskResumeAll+0x12c>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f1      	bne.n	800219c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <xTaskResumeAll+0x130>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <xTaskResumeAll+0x12c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <xTaskResumeAll+0x134>)
 80021cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80021da:	f000 fbb7 	bl	800294c <vPortExitCritical>

	return xAlreadyYielded;
 80021de:	68bb      	ldr	r3, [r7, #8]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200005d4 	.word	0x200005d4
 80021ec:	200005ac 	.word	0x200005ac
 80021f0:	2000056c 	.word	0x2000056c
 80021f4:	200005b4 	.word	0x200005b4
 80021f8:	200004b0 	.word	0x200004b0
 80021fc:	200004ac 	.word	0x200004ac
 8002200:	200005c0 	.word	0x200005c0
 8002204:	200005bc 	.word	0x200005bc
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002216:	4b51      	ldr	r3, [pc, #324]	; (800235c <xTaskIncrementTick+0x150>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 808d 	bne.w	800233a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002220:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <xTaskIncrementTick+0x154>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002228:	4a4d      	ldr	r2, [pc, #308]	; (8002360 <xTaskIncrementTick+0x154>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d120      	bne.n	8002276 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002234:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <xTaskIncrementTick+0x158>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <xTaskIncrementTick+0x48>
	__asm volatile
 800223e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	603b      	str	r3, [r7, #0]
}
 8002250:	bf00      	nop
 8002252:	e7fe      	b.n	8002252 <xTaskIncrementTick+0x46>
 8002254:	4b43      	ldr	r3, [pc, #268]	; (8002364 <xTaskIncrementTick+0x158>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <xTaskIncrementTick+0x15c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a41      	ldr	r2, [pc, #260]	; (8002364 <xTaskIncrementTick+0x158>)
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4a41      	ldr	r2, [pc, #260]	; (8002368 <xTaskIncrementTick+0x15c>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b40      	ldr	r3, [pc, #256]	; (800236c <xTaskIncrementTick+0x160>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a3f      	ldr	r2, [pc, #252]	; (800236c <xTaskIncrementTick+0x160>)
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	f000 f9a5 	bl	80025c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <xTaskIncrementTick+0x164>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d34d      	bcc.n	800231c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002280:	4b38      	ldr	r3, [pc, #224]	; (8002364 <xTaskIncrementTick+0x158>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <xTaskIncrementTick+0x82>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <xTaskIncrementTick+0x84>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002294:	4b36      	ldr	r3, [pc, #216]	; (8002370 <xTaskIncrementTick+0x164>)
 8002296:	f04f 32ff 	mov.w	r2, #4294967295
 800229a:	601a      	str	r2, [r3, #0]
					break;
 800229c:	e03e      	b.n	800231c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <xTaskIncrementTick+0x158>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d203      	bcs.n	80022be <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80022b6:	4a2e      	ldr	r2, [pc, #184]	; (8002370 <xTaskIncrementTick+0x164>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6013      	str	r3, [r2, #0]
						break;
 80022bc:	e02e      	b.n	800231c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3304      	adds	r3, #4
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fc90 	bl	8001be8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	3318      	adds	r3, #24
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fc87 	bl	8001be8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	2201      	movs	r2, #1
 80022e0:	409a      	lsls	r2, r3
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <xTaskIncrementTick+0x168>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <xTaskIncrementTick+0x168>)
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <xTaskIncrementTick+0x16c>)
 80022fa:	441a      	add	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f7ff fc15 	bl	8001b32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <xTaskIncrementTick+0x170>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	429a      	cmp	r2, r3
 8002314:	d3b4      	bcc.n	8002280 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002316:	2301      	movs	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800231a:	e7b1      	b.n	8002280 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800231c:	4b17      	ldr	r3, [pc, #92]	; (800237c <xTaskIncrementTick+0x170>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002322:	4915      	ldr	r1, [pc, #84]	; (8002378 <xTaskIncrementTick+0x16c>)
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d907      	bls.n	8002344 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002334:	2301      	movs	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e004      	b.n	8002344 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <xTaskIncrementTick+0x174>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <xTaskIncrementTick+0x174>)
 8002342:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <xTaskIncrementTick+0x178>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800234c:	2301      	movs	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002350:	697b      	ldr	r3, [r7, #20]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200005d4 	.word	0x200005d4
 8002360:	200005b0 	.word	0x200005b0
 8002364:	20000564 	.word	0x20000564
 8002368:	20000568 	.word	0x20000568
 800236c:	200005c4 	.word	0x200005c4
 8002370:	200005cc 	.word	0x200005cc
 8002374:	200005b4 	.word	0x200005b4
 8002378:	200004b0 	.word	0x200004b0
 800237c:	200004ac 	.word	0x200004ac
 8002380:	200005bc 	.word	0x200005bc
 8002384:	200005c0 	.word	0x200005c0

08002388 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <vTaskSwitchContext+0xac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <vTaskSwitchContext+0xb0>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800239c:	e044      	b.n	8002428 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <vTaskSwitchContext+0xb0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <vTaskSwitchContext+0xb4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80023b2:	7afb      	ldrb	r3, [r7, #11]
 80023b4:	f1c3 031f 	rsb	r3, r3, #31
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	4921      	ldr	r1, [pc, #132]	; (8002440 <vTaskSwitchContext+0xb8>)
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	607b      	str	r3, [r7, #4]
}
 80023e0:	bf00      	nop
 80023e2:	e7fe      	b.n	80023e2 <vTaskSwitchContext+0x5a>
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4a14      	ldr	r2, [pc, #80]	; (8002440 <vTaskSwitchContext+0xb8>)
 80023f0:	4413      	add	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	3308      	adds	r3, #8
 8002406:	429a      	cmp	r2, r3
 8002408:	d104      	bne.n	8002414 <vTaskSwitchContext+0x8c>
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <vTaskSwitchContext+0xbc>)
 800241c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <vTaskSwitchContext+0xbc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	334c      	adds	r3, #76	; 0x4c
 8002424:	4a08      	ldr	r2, [pc, #32]	; (8002448 <vTaskSwitchContext+0xc0>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200005d4 	.word	0x200005d4
 8002438:	200005c0 	.word	0x200005c0
 800243c:	200005b4 	.word	0x200005b4
 8002440:	200004b0 	.word	0x200004b0
 8002444:	200004ac 	.word	0x200004ac
 8002448:	20000010 	.word	0x20000010

0800244c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002454:	f000 f852 	bl	80024fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <prvIdleTask+0x28>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d9f9      	bls.n	8002454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <prvIdleTask+0x2c>)
 8002462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002470:	e7f0      	b.n	8002454 <prvIdleTask+0x8>
 8002472:	bf00      	nop
 8002474:	200004b0 	.word	0x200004b0
 8002478:	e000ed04 	.word	0xe000ed04

0800247c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	e00c      	b.n	80024a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4a12      	ldr	r2, [pc, #72]	; (80024dc <prvInitialiseTaskLists+0x60>)
 8002494:	4413      	add	r3, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fb20 	bl	8001adc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3301      	adds	r3, #1
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d9ef      	bls.n	8002488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80024a8:	480d      	ldr	r0, [pc, #52]	; (80024e0 <prvInitialiseTaskLists+0x64>)
 80024aa:	f7ff fb17 	bl	8001adc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024ae:	480d      	ldr	r0, [pc, #52]	; (80024e4 <prvInitialiseTaskLists+0x68>)
 80024b0:	f7ff fb14 	bl	8001adc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <prvInitialiseTaskLists+0x6c>)
 80024b6:	f7ff fb11 	bl	8001adc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024ba:	480c      	ldr	r0, [pc, #48]	; (80024ec <prvInitialiseTaskLists+0x70>)
 80024bc:	f7ff fb0e 	bl	8001adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <prvInitialiseTaskLists+0x74>)
 80024c2:	f7ff fb0b 	bl	8001adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <prvInitialiseTaskLists+0x78>)
 80024c8:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <prvInitialiseTaskLists+0x64>)
 80024ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <prvInitialiseTaskLists+0x7c>)
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <prvInitialiseTaskLists+0x68>)
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200004b0 	.word	0x200004b0
 80024e0:	2000053c 	.word	0x2000053c
 80024e4:	20000550 	.word	0x20000550
 80024e8:	2000056c 	.word	0x2000056c
 80024ec:	20000580 	.word	0x20000580
 80024f0:	20000598 	.word	0x20000598
 80024f4:	20000564 	.word	0x20000564
 80024f8:	20000568 	.word	0x20000568

080024fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002502:	e019      	b.n	8002538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002504:	f000 f9f2 	bl	80028ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <prvCheckTasksWaitingTermination+0x50>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fb67 	bl	8001be8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <prvCheckTasksWaitingTermination+0x54>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3b01      	subs	r3, #1
 8002520:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <prvCheckTasksWaitingTermination+0x54>)
 8002522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <prvCheckTasksWaitingTermination+0x58>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3b01      	subs	r3, #1
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <prvCheckTasksWaitingTermination+0x58>)
 800252c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800252e:	f000 fa0d 	bl	800294c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f810 	bl	8002558 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <prvCheckTasksWaitingTermination+0x58>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e1      	bne.n	8002504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000580 	.word	0x20000580
 8002550:	200005ac 	.word	0x200005ac
 8002554:	20000594 	.word	0x20000594

08002558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	334c      	adds	r3, #76	; 0x4c
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fc97 	bl	8002e98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fb3d 	bl	8002bf8 <vPortFree>
				vPortFree( pxTCB );
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fb3a 	bl	8002bf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002584:	e018      	b.n	80025b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d103      	bne.n	8002598 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fb31 	bl	8002bf8 <vPortFree>
	}
 8002596:	e00f      	b.n	80025b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d00a      	beq.n	80025b8 <prvDeleteTCB+0x60>
	__asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	60fb      	str	r3, [r7, #12]
}
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <prvDeleteTCB+0x5e>
	}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <prvResetNextTaskUnblockTime+0x40>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <prvResetNextTaskUnblockTime+0x14>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <prvResetNextTaskUnblockTime+0x16>
 80025d4:	2300      	movs	r3, #0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <prvResetNextTaskUnblockTime+0x44>)
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025e2:	e008      	b.n	80025f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <prvResetNextTaskUnblockTime+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a04      	ldr	r2, [pc, #16]	; (8002604 <prvResetNextTaskUnblockTime+0x44>)
 80025f4:	6013      	str	r3, [r2, #0]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000564 	.word	0x20000564
 8002604:	200005cc 	.word	0x200005cc

08002608 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <xTaskGetSchedulerState+0x34>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002616:	2301      	movs	r3, #1
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	e008      	b.n	800262e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <xTaskGetSchedulerState+0x38>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002624:	2302      	movs	r3, #2
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	e001      	b.n	800262e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800262e:	687b      	ldr	r3, [r7, #4]
	}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	200005b8 	.word	0x200005b8
 8002640:	200005d4 	.word	0x200005d4

08002644 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3304      	adds	r3, #4
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fac4 	bl	8001be8 <uxListRemove>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	2201      	movs	r2, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4013      	ands	r3, r2
 800267a:	4a20      	ldr	r2, [pc, #128]	; (80026fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800267c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d10a      	bne.n	800269c <prvAddCurrentTaskToDelayedList+0x58>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3304      	adds	r3, #4
 8002692:	4619      	mov	r1, r3
 8002694:	481a      	ldr	r0, [pc, #104]	; (8002700 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002696:	f7ff fa4c 	bl	8001b32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800269a:	e026      	b.n	80026ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d209      	bcs.n	80026c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <prvAddCurrentTaskToDelayedList+0xc0>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3304      	adds	r3, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7ff fa59 	bl	8001b78 <vListInsert>
}
 80026c6:	e010      	b.n	80026ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <prvAddCurrentTaskToDelayedList+0xc4>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f7ff fa4f 	bl	8001b78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <prvAddCurrentTaskToDelayedList+0xc8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d202      	bcs.n	80026ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80026e4:	4a09      	ldr	r2, [pc, #36]	; (800270c <prvAddCurrentTaskToDelayedList+0xc8>)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6013      	str	r3, [r2, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200005b0 	.word	0x200005b0
 80026f8:	200004ac 	.word	0x200004ac
 80026fc:	200005b4 	.word	0x200005b4
 8002700:	20000598 	.word	0x20000598
 8002704:	20000568 	.word	0x20000568
 8002708:	20000564 	.word	0x20000564
 800270c:	200005cc 	.word	0x200005cc

08002710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3b04      	subs	r3, #4
 8002720:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3b04      	subs	r3, #4
 800272e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f023 0201 	bic.w	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3b04      	subs	r3, #4
 800273e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002740:	4a08      	ldr	r2, [pc, #32]	; (8002764 <pxPortInitialiseStack+0x54>)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3b14      	subs	r3, #20
 800274a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3b20      	subs	r3, #32
 8002756:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002758:	68fb      	ldr	r3, [r7, #12]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	08002769 	.word	0x08002769

08002768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <prvTaskExitError+0x54>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d00a      	beq.n	8002792 <prvTaskExitError+0x2a>
	__asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	60fb      	str	r3, [r7, #12]
}
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <prvTaskExitError+0x28>
	__asm volatile
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	60bb      	str	r3, [r7, #8]
}
 80027a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027a6:	bf00      	nop
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0fc      	beq.n	80027a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <pxCurrentTCBConst2>)
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	6808      	ldr	r0, [r1, #0]
 80027c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027ca:	f380 8809 	msr	PSP, r0
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f380 8811 	msr	BASEPRI, r0
 80027da:	f04e 0e0d 	orr.w	lr, lr, #13
 80027de:	4770      	bx	lr

080027e0 <pxCurrentTCBConst2>:
 80027e0:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop

080027e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80027e8:	4806      	ldr	r0, [pc, #24]	; (8002804 <prvPortStartFirstTask+0x1c>)
 80027ea:	6800      	ldr	r0, [r0, #0]
 80027ec:	6800      	ldr	r0, [r0, #0]
 80027ee:	f380 8808 	msr	MSP, r0
 80027f2:	b662      	cpsie	i
 80027f4:	b661      	cpsie	f
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	df00      	svc	0
 8002800:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002802:	bf00      	nop
 8002804:	e000ed08 	.word	0xe000ed08

08002808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <xPortStartScheduler+0xd0>)
 8002810:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <xPortStartScheduler+0xd4>)
 8002834:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <xPortStartScheduler+0xd8>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800283c:	e009      	b.n	8002852 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800283e:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <xPortStartScheduler+0xd8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <xPortStartScheduler+0xd8>)
 8002846:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d0ef      	beq.n	800283e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <xPortStartScheduler+0xd8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	d00a      	beq.n	8002880 <xPortStartScheduler+0x78>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	60bb      	str	r3, [r7, #8]
}
 800287c:	bf00      	nop
 800287e:	e7fe      	b.n	800287e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <xPortStartScheduler+0xd8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <xPortStartScheduler+0xd8>)
 8002888:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <xPortStartScheduler+0xd8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <xPortStartScheduler+0xd8>)
 8002894:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <xPortStartScheduler+0xdc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <xPortStartScheduler+0xdc>)
 80028a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <xPortStartScheduler+0xdc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <xPortStartScheduler+0xdc>)
 80028b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80028b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80028b6:	f000 f8b9 	bl	8002a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <xPortStartScheduler+0xe0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80028c0:	f7ff ff92 	bl	80027e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80028c4:	f7ff fd60 	bl	8002388 <vTaskSwitchContext>
	prvTaskExitError();
 80028c8:	f7ff ff4e 	bl	8002768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000e400 	.word	0xe000e400
 80028dc:	200005d8 	.word	0x200005d8
 80028e0:	200005dc 	.word	0x200005dc
 80028e4:	e000ed20 	.word	0xe000ed20
 80028e8:	2000000c 	.word	0x2000000c

080028ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
	__asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	607b      	str	r3, [r7, #4]
}
 8002904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <vPortEnterCritical+0x58>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <vPortEnterCritical+0x58>)
 800290e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <vPortEnterCritical+0x58>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d10f      	bne.n	8002938 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <vPortEnterCritical+0x5c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <vPortEnterCritical+0x4c>
	__asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	603b      	str	r3, [r7, #0]
}
 8002934:	bf00      	nop
 8002936:	e7fe      	b.n	8002936 <vPortEnterCritical+0x4a>
	}
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	2000000c 	.word	0x2000000c
 8002948:	e000ed04 	.word	0xe000ed04

0800294c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <vPortExitCritical+0x4c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <vPortExitCritical+0x24>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	607b      	str	r3, [r7, #4]
}
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <vPortExitCritical+0x4c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3b01      	subs	r3, #1
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <vPortExitCritical+0x4c>)
 8002978:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <vPortExitCritical+0x4c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <vPortExitCritical+0x42>
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800298c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	2000000c 	.word	0x2000000c
 800299c:	00000000 	.word	0x00000000

080029a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80029a0:	f3ef 8009 	mrs	r0, PSP
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <pxCurrentTCBConst>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029b0:	6010      	str	r0, [r2, #0]
 80029b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80029b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80029ba:	f380 8811 	msr	BASEPRI, r0
 80029be:	f7ff fce3 	bl	8002388 <vTaskSwitchContext>
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f380 8811 	msr	BASEPRI, r0
 80029ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	6808      	ldr	r0, [r1, #0]
 80029d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029d6:	f380 8809 	msr	PSP, r0
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	4770      	bx	lr

080029e0 <pxCurrentTCBConst>:
 80029e0:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop

080029e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
	__asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	607b      	str	r3, [r7, #4]
}
 8002a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a02:	f7ff fc03 	bl	800220c <xTaskIncrementTick>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <xPortSysTickHandler+0x40>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	2300      	movs	r3, #0
 8002a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f383 8811 	msr	BASEPRI, r3
}
 8002a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <vPortSetupTimerInterrupt+0x30>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <vPortSetupTimerInterrupt+0x34>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <vPortSetupTimerInterrupt+0x38>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <vPortSetupTimerInterrupt+0x3c>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <vPortSetupTimerInterrupt+0x40>)
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a4e:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <vPortSetupTimerInterrupt+0x30>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e010 	.word	0xe000e010
 8002a60:	e000e018 	.word	0xe000e018
 8002a64:	20000000 	.word	0x20000000
 8002a68:	10624dd3 	.word	0x10624dd3
 8002a6c:	e000e014 	.word	0xe000e014

08002a70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002a7c:	f7ff fb1c 	bl	80020b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002a80:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <pvPortMalloc+0x174>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002a88:	f000 f910 	bl	8002cac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a8c:	4b56      	ldr	r3, [pc, #344]	; (8002be8 <pvPortMalloc+0x178>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f040 808e 	bne.w	8002bb6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01d      	beq.n	8002adc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d014      	beq.n	8002adc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f023 0307 	bic.w	r3, r3, #7
 8002ab8:	3308      	adds	r3, #8
 8002aba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <pvPortMalloc+0x6c>
	__asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	617b      	str	r3, [r7, #20]
}
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d069      	beq.n	8002bb6 <pvPortMalloc+0x146>
 8002ae2:	4b42      	ldr	r3, [pc, #264]	; (8002bec <pvPortMalloc+0x17c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d864      	bhi.n	8002bb6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002aec:	4b40      	ldr	r3, [pc, #256]	; (8002bf0 <pvPortMalloc+0x180>)
 8002aee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002af0:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <pvPortMalloc+0x180>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002af6:	e004      	b.n	8002b02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d903      	bls.n	8002b14 <pvPortMalloc+0xa4>
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f1      	bne.n	8002af8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <pvPortMalloc+0x174>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d04b      	beq.n	8002bb6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2208      	movs	r2, #8
 8002b24:	4413      	add	r3, r2
 8002b26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1ad2      	subs	r2, r2, r3
 8002b38:	2308      	movs	r3, #8
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d91f      	bls.n	8002b80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <pvPortMalloc+0xf8>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	613b      	str	r3, [r7, #16]
}
 8002b64:	bf00      	nop
 8002b66:	e7fe      	b.n	8002b66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1ad2      	subs	r2, r2, r3
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b7a:	69b8      	ldr	r0, [r7, #24]
 8002b7c:	f000 f8f8 	bl	8002d70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <pvPortMalloc+0x17c>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <pvPortMalloc+0x17c>)
 8002b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <pvPortMalloc+0x17c>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <pvPortMalloc+0x184>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d203      	bcs.n	8002ba2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <pvPortMalloc+0x17c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <pvPortMalloc+0x184>)
 8002ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <pvPortMalloc+0x178>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002bb6:	f7ff fa8d 	bl	80020d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <pvPortMalloc+0x16a>
	__asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	60fb      	str	r3, [r7, #12]
}
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <pvPortMalloc+0x168>
	return pvReturn;
 8002bda:	69fb      	ldr	r3, [r7, #28]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200011e8 	.word	0x200011e8
 8002be8:	200011f4 	.word	0x200011f4
 8002bec:	200011ec 	.word	0x200011ec
 8002bf0:	200011e0 	.word	0x200011e0
 8002bf4:	200011f0 	.word	0x200011f0

08002bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d048      	beq.n	8002c9c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	425b      	negs	r3, r3
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4413      	add	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <vPortFree+0xac>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <vPortFree+0x44>
	__asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	60fb      	str	r3, [r7, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	e7fe      	b.n	8002c3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <vPortFree+0x62>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	60bb      	str	r3, [r7, #8]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <vPortFree+0xac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d019      	beq.n	8002c9c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d115      	bne.n	8002c9c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <vPortFree+0xac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c80:	f7ff fa1a 	bl	80020b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <vPortFree+0xb0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <vPortFree+0xb0>)
 8002c90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c92:	6938      	ldr	r0, [r7, #16]
 8002c94:	f000 f86c 	bl	8002d70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002c98:	f7ff fa1c 	bl	80020d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200011f4 	.word	0x200011f4
 8002ca8:	200011ec 	.word	0x200011ec

08002cac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002cb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <prvHeapInit+0xac>)
 8002cba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3307      	adds	r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0307 	bic.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <prvHeapInit+0xac>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <prvHeapInit+0xb0>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <prvHeapInit+0xb0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0307 	bic.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <prvHeapInit+0xb4>)
 8002d0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <prvHeapInit+0xb4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <prvHeapInit+0xb4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <prvHeapInit+0xb4>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <prvHeapInit+0xb8>)
 8002d3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <prvHeapInit+0xbc>)
 8002d42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <prvHeapInit+0xc0>)
 8002d46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d4a:	601a      	str	r2, [r3, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200005e0 	.word	0x200005e0
 8002d5c:	200011e0 	.word	0x200011e0
 8002d60:	200011e8 	.word	0x200011e8
 8002d64:	200011f0 	.word	0x200011f0
 8002d68:	200011ec 	.word	0x200011ec
 8002d6c:	200011f4 	.word	0x200011f4

08002d70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <prvInsertBlockIntoFreeList+0xa8>)
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e002      	b.n	8002d84 <prvInsertBlockIntoFreeList+0x14>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d8f7      	bhi.n	8002d7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d108      	bne.n	8002db2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	441a      	add	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d118      	bne.n	8002df8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <prvInsertBlockIntoFreeList+0xac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d00d      	beq.n	8002dee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	441a      	add	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e008      	b.n	8002e00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <prvInsertBlockIntoFreeList+0xac>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e003      	b.n	8002e00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d002      	beq.n	8002e0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	200011e0 	.word	0x200011e0
 8002e1c:	200011e8 	.word	0x200011e8

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2600      	movs	r6, #0
 8002e24:	4d0c      	ldr	r5, [pc, #48]	; (8002e58 <__libc_init_array+0x38>)
 8002e26:	4c0d      	ldr	r4, [pc, #52]	; (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1b64      	subs	r4, r4, r5
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	f000 f8e2 	bl	8002ff8 <_init>
 8002e34:	2600      	movs	r6, #0
 8002e36:	4d0a      	ldr	r5, [pc, #40]	; (8002e60 <__libc_init_array+0x40>)
 8002e38:	4c0a      	ldr	r4, [pc, #40]	; (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1b64      	subs	r4, r4, r5
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a6      	cmp	r6, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e48:	4798      	blx	r3
 8002e4a:	3601      	adds	r6, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e52:	4798      	blx	r3
 8002e54:	3601      	adds	r6, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	080030cc 	.word	0x080030cc
 8002e5c:	080030cc 	.word	0x080030cc
 8002e60:	080030cc 	.word	0x080030cc
 8002e64:	080030d0 	.word	0x080030d0

08002e68 <__retarget_lock_acquire_recursive>:
 8002e68:	4770      	bx	lr

08002e6a <__retarget_lock_release_recursive>:
 8002e6a:	4770      	bx	lr

08002e6c <memset>:
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4402      	add	r2, r0
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d100      	bne.n	8002e76 <memset+0xa>
 8002e74:	4770      	bx	lr
 8002e76:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7a:	e7f9      	b.n	8002e70 <memset+0x4>

08002e7c <cleanup_glue>:
 8002e7c:	b538      	push	{r3, r4, r5, lr}
 8002e7e:	460c      	mov	r4, r1
 8002e80:	6809      	ldr	r1, [r1, #0]
 8002e82:	4605      	mov	r5, r0
 8002e84:	b109      	cbz	r1, 8002e8a <cleanup_glue+0xe>
 8002e86:	f7ff fff9 	bl	8002e7c <cleanup_glue>
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e92:	f000 b869 	b.w	8002f68 <_free_r>
	...

08002e98 <_reclaim_reent>:
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <_reclaim_reent+0xb4>)
 8002e9a:	b570      	push	{r4, r5, r6, lr}
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	4283      	cmp	r3, r0
 8002ea2:	d051      	beq.n	8002f48 <_reclaim_reent+0xb0>
 8002ea4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ea6:	b143      	cbz	r3, 8002eba <_reclaim_reent+0x22>
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d14a      	bne.n	8002f44 <_reclaim_reent+0xac>
 8002eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	b111      	cbz	r1, 8002eba <_reclaim_reent+0x22>
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	f000 f857 	bl	8002f68 <_free_r>
 8002eba:	6961      	ldr	r1, [r4, #20]
 8002ebc:	b111      	cbz	r1, 8002ec4 <_reclaim_reent+0x2c>
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f000 f852 	bl	8002f68 <_free_r>
 8002ec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ec6:	b111      	cbz	r1, 8002ece <_reclaim_reent+0x36>
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 f84d 	bl	8002f68 <_free_r>
 8002ece:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002ed0:	b111      	cbz	r1, 8002ed8 <_reclaim_reent+0x40>
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 f848 	bl	8002f68 <_free_r>
 8002ed8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002eda:	b111      	cbz	r1, 8002ee2 <_reclaim_reent+0x4a>
 8002edc:	4620      	mov	r0, r4
 8002ede:	f000 f843 	bl	8002f68 <_free_r>
 8002ee2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002ee4:	b111      	cbz	r1, 8002eec <_reclaim_reent+0x54>
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f000 f83e 	bl	8002f68 <_free_r>
 8002eec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002eee:	b111      	cbz	r1, 8002ef6 <_reclaim_reent+0x5e>
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f000 f839 	bl	8002f68 <_free_r>
 8002ef6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002ef8:	b111      	cbz	r1, 8002f00 <_reclaim_reent+0x68>
 8002efa:	4620      	mov	r0, r4
 8002efc:	f000 f834 	bl	8002f68 <_free_r>
 8002f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f02:	b111      	cbz	r1, 8002f0a <_reclaim_reent+0x72>
 8002f04:	4620      	mov	r0, r4
 8002f06:	f000 f82f 	bl	8002f68 <_free_r>
 8002f0a:	69a3      	ldr	r3, [r4, #24]
 8002f0c:	b1e3      	cbz	r3, 8002f48 <_reclaim_reent+0xb0>
 8002f0e:	4620      	mov	r0, r4
 8002f10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f12:	4798      	blx	r3
 8002f14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f16:	b1b9      	cbz	r1, 8002f48 <_reclaim_reent+0xb0>
 8002f18:	4620      	mov	r0, r4
 8002f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f1e:	f7ff bfad 	b.w	8002e7c <cleanup_glue>
 8002f22:	5949      	ldr	r1, [r1, r5]
 8002f24:	b941      	cbnz	r1, 8002f38 <_reclaim_reent+0xa0>
 8002f26:	3504      	adds	r5, #4
 8002f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f2a:	2d80      	cmp	r5, #128	; 0x80
 8002f2c:	68d9      	ldr	r1, [r3, #12]
 8002f2e:	d1f8      	bne.n	8002f22 <_reclaim_reent+0x8a>
 8002f30:	4620      	mov	r0, r4
 8002f32:	f000 f819 	bl	8002f68 <_free_r>
 8002f36:	e7ba      	b.n	8002eae <_reclaim_reent+0x16>
 8002f38:	680e      	ldr	r6, [r1, #0]
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f000 f814 	bl	8002f68 <_free_r>
 8002f40:	4631      	mov	r1, r6
 8002f42:	e7ef      	b.n	8002f24 <_reclaim_reent+0x8c>
 8002f44:	2500      	movs	r5, #0
 8002f46:	e7ef      	b.n	8002f28 <_reclaim_reent+0x90>
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000010 	.word	0x20000010

08002f50 <__malloc_lock>:
 8002f50:	4801      	ldr	r0, [pc, #4]	; (8002f58 <__malloc_lock+0x8>)
 8002f52:	f7ff bf89 	b.w	8002e68 <__retarget_lock_acquire_recursive>
 8002f56:	bf00      	nop
 8002f58:	200011f8 	.word	0x200011f8

08002f5c <__malloc_unlock>:
 8002f5c:	4801      	ldr	r0, [pc, #4]	; (8002f64 <__malloc_unlock+0x8>)
 8002f5e:	f7ff bf84 	b.w	8002e6a <__retarget_lock_release_recursive>
 8002f62:	bf00      	nop
 8002f64:	200011f8 	.word	0x200011f8

08002f68 <_free_r>:
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	4605      	mov	r5, r0
 8002f6c:	2900      	cmp	r1, #0
 8002f6e:	d040      	beq.n	8002ff2 <_free_r+0x8a>
 8002f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f74:	1f0c      	subs	r4, r1, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bfb8      	it	lt
 8002f7a:	18e4      	addlt	r4, r4, r3
 8002f7c:	f7ff ffe8 	bl	8002f50 <__malloc_lock>
 8002f80:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <_free_r+0x8c>)
 8002f82:	6813      	ldr	r3, [r2, #0]
 8002f84:	b933      	cbnz	r3, 8002f94 <_free_r+0x2c>
 8002f86:	6063      	str	r3, [r4, #4]
 8002f88:	6014      	str	r4, [r2, #0]
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f90:	f7ff bfe4 	b.w	8002f5c <__malloc_unlock>
 8002f94:	42a3      	cmp	r3, r4
 8002f96:	d908      	bls.n	8002faa <_free_r+0x42>
 8002f98:	6820      	ldr	r0, [r4, #0]
 8002f9a:	1821      	adds	r1, r4, r0
 8002f9c:	428b      	cmp	r3, r1
 8002f9e:	bf01      	itttt	eq
 8002fa0:	6819      	ldreq	r1, [r3, #0]
 8002fa2:	685b      	ldreq	r3, [r3, #4]
 8002fa4:	1809      	addeq	r1, r1, r0
 8002fa6:	6021      	streq	r1, [r4, #0]
 8002fa8:	e7ed      	b.n	8002f86 <_free_r+0x1e>
 8002faa:	461a      	mov	r2, r3
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	b10b      	cbz	r3, 8002fb4 <_free_r+0x4c>
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	d9fa      	bls.n	8002faa <_free_r+0x42>
 8002fb4:	6811      	ldr	r1, [r2, #0]
 8002fb6:	1850      	adds	r0, r2, r1
 8002fb8:	42a0      	cmp	r0, r4
 8002fba:	d10b      	bne.n	8002fd4 <_free_r+0x6c>
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	4401      	add	r1, r0
 8002fc0:	1850      	adds	r0, r2, r1
 8002fc2:	4283      	cmp	r3, r0
 8002fc4:	6011      	str	r1, [r2, #0]
 8002fc6:	d1e0      	bne.n	8002f8a <_free_r+0x22>
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4401      	add	r1, r0
 8002fce:	6011      	str	r1, [r2, #0]
 8002fd0:	6053      	str	r3, [r2, #4]
 8002fd2:	e7da      	b.n	8002f8a <_free_r+0x22>
 8002fd4:	d902      	bls.n	8002fdc <_free_r+0x74>
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	602b      	str	r3, [r5, #0]
 8002fda:	e7d6      	b.n	8002f8a <_free_r+0x22>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	1821      	adds	r1, r4, r0
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	bf01      	itttt	eq
 8002fe4:	6819      	ldreq	r1, [r3, #0]
 8002fe6:	685b      	ldreq	r3, [r3, #4]
 8002fe8:	1809      	addeq	r1, r1, r0
 8002fea:	6021      	streq	r1, [r4, #0]
 8002fec:	6063      	str	r3, [r4, #4]
 8002fee:	6054      	str	r4, [r2, #4]
 8002ff0:	e7cb      	b.n	8002f8a <_free_r+0x22>
 8002ff2:	bd38      	pop	{r3, r4, r5, pc}
 8002ff4:	200011fc 	.word	0x200011fc

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
