
OS_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080052d4  080052d4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052d4  080052d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080052dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001990  20000078  08005354  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  08005354  00021a08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc07  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002835  00000000  00000000  0002fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000324e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00033140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a0  00000000  00000000  00033cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e18d  00000000  00000000  0004be58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1d1  00000000  00000000  00059fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e41b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  000e4208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080051b0 	.word	0x080051b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080051b0 	.word	0x080051b0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000094 	.word	0x20000094
 800017c:	20000148 	.word	0x20000148

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09a      	sub	sp, #104	; 0x68
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fd05 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f8ad 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f995 	bl	80004bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f96d 	bl	8000470 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f8ed 	bl	8000374 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800019a:	f000 f915 	bl	80003c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800019e:	f000 f93d 	bl	800041c <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80001a2:	2300      	movs	r3, #0
 80001a4:	663b      	str	r3, [r7, #96]	; 0x60
 80001a6:	2300      	movs	r3, #0
 80001a8:	667b      	str	r3, [r7, #100]	; 0x64
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80001aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80001ae:	2101      	movs	r1, #1
 80001b0:	4618      	mov	r0, r3
 80001b2:	f002 fafb 	bl	80027ac <osSemaphoreCreate>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a3c      	ldr	r2, [pc, #240]	; (80002ac <main+0x12c>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 80001bc:	2300      	movs	r3, #0
 80001be:	65bb      	str	r3, [r7, #88]	; 0x58
 80001c0:	2300      	movs	r3, #0
 80001c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 80001c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80001c8:	2101      	movs	r1, #1
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 faee 	bl	80027ac <osSemaphoreCreate>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4a37      	ldr	r2, [pc, #220]	; (80002b0 <main+0x130>)
 80001d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001d6:	4b37      	ldr	r3, [pc, #220]	; (80002b4 <main+0x134>)
 80001d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001dc:	461d      	mov	r5, r3
 80001de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 fa7b 	bl	80026ec <osThreadCreate>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a2f      	ldr	r2, [pc, #188]	; (80002b8 <main+0x138>)
 80001fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80001fc:	4b2f      	ldr	r3, [pc, #188]	; (80002bc <main+0x13c>)
 80001fe:	f107 0420 	add.w	r4, r7, #32
 8000202:	461d      	mov	r5, r3
 8000204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000210:	f107 0320 	add.w	r3, r7, #32
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fa68 	bl	80026ec <osThreadCreate>
 800021c:	4603      	mov	r3, r0
 800021e:	4a28      	ldr	r2, [pc, #160]	; (80002c0 <main+0x140>)
 8000220:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000222:	4b28      	ldr	r3, [pc, #160]	; (80002c4 <main+0x144>)
 8000224:	1d3c      	adds	r4, r7, #4
 8000226:	461d      	mov	r5, r3
 8000228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f002 fa57 	bl	80026ec <osThreadCreate>
 800023e:	4603      	mov	r3, r0
 8000240:	4a21      	ldr	r2, [pc, #132]	; (80002c8 <main+0x148>)
 8000242:	6013      	str	r3, [r2, #0]
//  osThreadDef(myTask04, StartTask04, osPriorityBelowNormal, 0, 128);
//  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  myQueue01Handle = xQueueCreate(30,sizeof(f_recei_1));
 8000244:	2200      	movs	r2, #0
 8000246:	2132      	movs	r1, #50	; 0x32
 8000248:	201e      	movs	r0, #30
 800024a:	f002 fc70 	bl	8002b2e <xQueueGenericCreate>
 800024e:	4603      	mov	r3, r0
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <main+0x14c>)
 8000252:	6013      	str	r3, [r2, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, sizeof(f_recei_1));
 8000254:	2232      	movs	r2, #50	; 0x32
 8000256:	491e      	ldr	r1, [pc, #120]	; (80002d0 <main+0x150>)
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <main+0x154>)
 800025a:	f001 fe92 	bl	8001f82 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800025e:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <main+0x158>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <main+0x158>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f022 0204 	bic.w	r2, r2, #4
 800026c:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, sizeof(f_recei_1));
 800026e:	2232      	movs	r2, #50	; 0x32
 8000270:	491a      	ldr	r1, [pc, #104]	; (80002dc <main+0x15c>)
 8000272:	481b      	ldr	r0, [pc, #108]	; (80002e0 <main+0x160>)
 8000274:	f001 fe85 	bl	8001f82 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <main+0x164>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <main+0x164>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f022 0204 	bic.w	r2, r2, #4
 8000286:	601a      	str	r2, [r3, #0]
  xSemaphoreTake(myBinarySem01Handle,1000);
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <main+0x12c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000290:	4618      	mov	r0, r3
 8000292:	f002 ff15 	bl	80030c0 <xQueueSemaphoreTake>
  xSemaphoreTake(myBinarySem02Handle,1000);
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <main+0x130>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 ff0e 	bl	80030c0 <xQueueSemaphoreTake>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002a4:	f002 fa1b 	bl	80026de <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x128>
 80002aa:	bf00      	nop
 80002ac:	20000520 	.word	0x20000520
 80002b0:	20000524 	.word	0x20000524
 80002b4:	080051ec 	.word	0x080051ec
 80002b8:	20000510 	.word	0x20000510
 80002bc:	08005208 	.word	0x08005208
 80002c0:	20000514 	.word	0x20000514
 80002c4:	08005224 	.word	0x08005224
 80002c8:	20000518 	.word	0x20000518
 80002cc:	2000051c 	.word	0x2000051c
 80002d0:	20000348 	.word	0x20000348
 80002d4:	200003b0 	.word	0x200003b0
 80002d8:	20000488 	.word	0x20000488
 80002dc:	2000037c 	.word	0x2000037c
 80002e0:	200003f8 	.word	0x200003f8
 80002e4:	200004cc 	.word	0x200004cc

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f004 fe94 	bl	8005024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000326:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0318 	add.w	r3, r7, #24
 8000330:	4618      	mov	r0, r3
 8000332:	f001 f943 	bl	80015bc <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 fa86 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2302      	movs	r3, #2
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fbb0 	bl	8001ac0 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000366:	f000 fa71 	bl	800084c <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3740      	adds	r7, #64	; 0x40
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <MX_USART1_UART_Init+0x50>)
 800037c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003ac:	f001 fd16 	bl	8001ddc <HAL_UART_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003b6:	f000 fa49 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200003b0 	.word	0x200003b0
 80003c4:	40013800 	.word	0x40013800

080003c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <MX_USART2_UART_Init+0x50>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 8000400:	f001 fcec 	bl	8001ddc <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800040a:	f000 fa1f 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200003f8 	.word	0x200003f8
 8000418:	40004400 	.word	0x40004400

0800041c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000422:	4a12      	ldr	r2, [pc, #72]	; (800046c <MX_USART3_UART_Init+0x50>)
 8000424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1200;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000428:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800042c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000442:	220c      	movs	r2, #12
 8000444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000454:	f001 fcc2 	bl	8001ddc <HAL_UART_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800045e:	f000 f9f5 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000440 	.word	0x20000440
 800046c:	40004800 	.word	0x40004800

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_DMA_Init+0x48>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <MX_DMA_Init+0x48>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <MX_DMA_Init+0x48>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2105      	movs	r1, #5
 8000492:	200f      	movs	r0, #15
 8000494:	f000 fcb7 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000498:	200f      	movs	r0, #15
 800049a:	f000 fcd0 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2105      	movs	r1, #5
 80004a2:	2010      	movs	r0, #16
 80004a4:	f000 fcaf 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004a8:	2010      	movs	r0, #16
 80004aa:	f000 fcc8 	bl	8000e3e <HAL_NVIC_EnableIRQ>

}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a23      	ldr	r2, [pc, #140]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0310 	and.w	r3, r3, #16
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0320 	and.w	r3, r3, #32
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_GPIO_Init+0xa8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MX_GPIO_Init+0xa8>)
 8000506:	f043 0304 	orr.w	r3, r3, #4
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_GPIO_Init+0xa8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0304 	and.w	r3, r3, #4
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_GPIO_Init+0xa8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <MX_GPIO_Init+0xa8>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_GPIO_Init+0xa8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0308 	and.w	r3, r3, #8
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000536:	480c      	ldr	r0, [pc, #48]	; (8000568 <MX_GPIO_Init+0xac>)
 8000538:	f001 f80e 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800053c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2302      	movs	r3, #2
 800054c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4619      	mov	r1, r3
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_GPIO_Init+0xac>)
 8000556:	f000 fe7b 	bl	8001250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055a:	bf00      	nop
 800055c:	3720      	adds	r7, #32
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	40011000 	.word	0x40011000

0800056c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	807b      	strh	r3, [r7, #2]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
	if(huart->Instance == USART1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d108      	bne.n	8000598 <HAL_UARTEx_RxEventCallback+0x2c>
		xSemaphoreGiveFromISR(myBinarySem01Handle, &xHigherPriorityTaskWoken);
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f107 020c 	add.w	r2, r7, #12
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fc27 	bl	8002de4 <xQueueGiveFromISR>
 8000596:	e00c      	b.n	80005b2 <HAL_UARTEx_RxEventCallback+0x46>
	else if (huart->Instance == USART2)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_UARTEx_RxEventCallback+0x6c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d107      	bne.n	80005b2 <HAL_UARTEx_RxEventCallback+0x46>
		xSemaphoreGiveFromISR(myBinarySem02Handle, &xHigherPriorityTaskWoken);
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_UARTEx_RxEventCallback+0x70>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f107 020c 	add.w	r2, r7, #12
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fc19 	bl	8002de4 <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d007      	beq.n	80005c8 <HAL_UARTEx_RxEventCallback+0x5c>
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x74>)
 80005ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	f3bf 8f6f 	isb	sy
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40013800 	.word	0x40013800
 80005d4:	20000520 	.word	0x20000520
 80005d8:	40004400 	.word	0x40004400
 80005dc:	20000524 	.word	0x20000524
 80005e0:	e000ed04 	.word	0xe000ed04

080005e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b090      	sub	sp, #64	; 0x40
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint8_t count;
	uint8_t data[50];
  /* Infinite loop */
  for(;;)
  {
		  switch(state)
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <StartDefaultTask+0xfc>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d034      	beq.n	800065e <StartDefaultTask+0x7a>
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	dc5b      	bgt.n	80006b0 <StartDefaultTask+0xcc>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <StartDefaultTask+0x1e>
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d011      	beq.n	8000624 <StartDefaultTask+0x40>
 8000600:	e056      	b.n	80006b0 <StartDefaultTask+0xcc>
		  {
		  case overflow:
			  timeStart = HAL_GetTick();
 8000602:	f000 fb1f 	bl	8000c44 <HAL_GetTick>
 8000606:	63f8      	str	r0, [r7, #60]	; 0x3c
			  vTaskSuspend(myTask02Handle);
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <StartDefaultTask+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f983 	bl	8003918 <vTaskSuspend>
			  vTaskSuspend(myTask03Handle);
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <StartDefaultTask+0x104>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f003 f97e 	bl	8003918 <vTaskSuspend>
			  state = wait;
 800061c:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <StartDefaultTask+0xfc>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
			  break;
 8000622:	e045      	b.n	80006b0 <StartDefaultTask+0xcc>
		  case wait:
			  if(HAL_GetTick() - timeStart > 1000)
 8000624:	f000 fb0e 	bl	8000c44 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000632:	d93c      	bls.n	80006ae <StartDefaultTask+0xca>
			  {
				  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	482c      	ldr	r0, [pc, #176]	; (80006ec <StartDefaultTask+0x108>)
 800063a:	f000 ffa5 	bl	8001588 <HAL_GPIO_TogglePin>
				  timeStart  = HAL_GetTick();
 800063e:	f000 fb01 	bl	8000c44 <HAL_GetTick>
 8000642:	63f8      	str	r0, [r7, #60]	; 0x3c
				  count++;
 8000644:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000648:	3301      	adds	r3, #1
 800064a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				  if(count == 20)
 800064e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000652:	2b14      	cmp	r3, #20
 8000654:	d12b      	bne.n	80006ae <StartDefaultTask+0xca>
					  state = trans;
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <StartDefaultTask+0xfc>)
 8000658:	2202      	movs	r2, #2
 800065a:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800065c:	e027      	b.n	80006ae <StartDefaultTask+0xca>
		  case trans:
			  count = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			  vTaskResume(myTask02Handle);
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <StartDefaultTask+0x100>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fa21 	bl	8003ab0 <vTaskResume>
			  vTaskResume(myTask03Handle);
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <StartDefaultTask+0x104>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fa1c 	bl	8003ab0 <vTaskResume>
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, sizeof(f_recei_1));
 8000678:	2232      	movs	r2, #50	; 0x32
 800067a:	491d      	ldr	r1, [pc, #116]	; (80006f0 <StartDefaultTask+0x10c>)
 800067c:	481d      	ldr	r0, [pc, #116]	; (80006f4 <StartDefaultTask+0x110>)
 800067e:	f001 fc80 	bl	8001f82 <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <StartDefaultTask+0x114>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <StartDefaultTask+0x114>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f022 0204 	bic.w	r2, r2, #4
 8000690:	601a      	str	r2, [r3, #0]

			  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, sizeof(f_recei_1));
 8000692:	2232      	movs	r2, #50	; 0x32
 8000694:	4919      	ldr	r1, [pc, #100]	; (80006fc <StartDefaultTask+0x118>)
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <StartDefaultTask+0x11c>)
 8000698:	f001 fc73 	bl	8001f82 <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <StartDefaultTask+0x120>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <StartDefaultTask+0x120>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f022 0204 	bic.w	r2, r2, #4
 80006aa:	601a      	str	r2, [r3, #0]
			  break;
 80006ac:	e000      	b.n	80006b0 <StartDefaultTask+0xcc>
			  break;
 80006ae:	bf00      	nop
		  }

			if(xQueueReceive(myQueue01Handle, data, 0) == pdTRUE)
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <StartDefaultTask+0x124>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f107 0108 	add.w	r1, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fc20 	bl	8002f00 <xQueueReceive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d107      	bne.n	80006d6 <StartDefaultTask+0xf2>
				HAL_UART_Transmit(&huart3, data, 50, 1000);
 80006c6:	f107 0108 	add.w	r1, r7, #8
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	2232      	movs	r2, #50	; 0x32
 80006d0:	480e      	ldr	r0, [pc, #56]	; (800070c <StartDefaultTask+0x128>)
 80006d2:	f001 fbd3 	bl	8001e7c <HAL_UART_Transmit>




    osDelay(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f002 f854 	bl	8002784 <osDelay>
		  switch(state)
 80006dc:	e786      	b.n	80005ec <StartDefaultTask+0x8>
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000514 	.word	0x20000514
 80006e8:	20000518 	.word	0x20000518
 80006ec:	40011000 	.word	0x40011000
 80006f0:	20000348 	.word	0x20000348
 80006f4:	200003b0 	.word	0x200003b0
 80006f8:	20000488 	.word	0x20000488
 80006fc:	2000037c 	.word	0x2000037c
 8000700:	200003f8 	.word	0x200003f8
 8000704:	200004cc 	.word	0x200004cc
 8000708:	2000051c 	.word	0x2000051c
 800070c:	20000440 	.word	0x20000440

08000710 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem01Handle,2000) == pdTRUE)
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <StartTask02+0x84>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fccd 	bl	80030c0 <xQueueSemaphoreTake>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d12f      	bne.n	800078c <StartTask02+0x7c>
	  {
		  if(uxQueueSpacesAvailable(myQueue01Handle) != 0)
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <StartTask02+0x88>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fdd1 	bl	80032d8 <uxQueueSpacesAvailable>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d01c      	beq.n	8000776 <StartTask02+0x66>
		  {
			  __HAL_DMA_DISABLE(&hdma_usart1_rx);
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <StartTask02+0x8c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <StartTask02+0x8c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0201 	bic.w	r2, r2, #1
 800074a:	601a      	str	r2, [r3, #0]
			  xQueueSend(myQueue01Handle,f_recei_1,0);
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <StartTask02+0x88>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	2200      	movs	r2, #0
 8000754:	4912      	ldr	r1, [pc, #72]	; (80007a0 <StartTask02+0x90>)
 8000756:	f002 fa47 	bl	8002be8 <xQueueGenericSend>
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, sizeof(f_recei_1));
 800075a:	2232      	movs	r2, #50	; 0x32
 800075c:	4910      	ldr	r1, [pc, #64]	; (80007a0 <StartTask02+0x90>)
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <StartTask02+0x94>)
 8000760:	f001 fc0f 	bl	8001f82 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <StartTask02+0x8c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <StartTask02+0x8c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0204 	bic.w	r2, r2, #4
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	e00a      	b.n	800078c <StartTask02+0x7c>
		  }
		  else
		  {
			  __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <StartTask02+0x8c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <StartTask02+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f022 0201 	bic.w	r2, r2, #1
 8000784:	601a      	str	r2, [r3, #0]
			  state = overflow;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <StartTask02+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	  else
	  {

	  }

    osDelay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f001 fff9 	bl	8002784 <osDelay>
	  if(xSemaphoreTake(myBinarySem01Handle,2000) == pdTRUE)
 8000792:	e7c1      	b.n	8000718 <StartTask02+0x8>
 8000794:	20000520 	.word	0x20000520
 8000798:	2000051c 	.word	0x2000051c
 800079c:	20000488 	.word	0x20000488
 80007a0:	20000348 	.word	0x20000348
 80007a4:	200003b0 	.word	0x200003b0
 80007a8:	20000000 	.word	0x20000000

080007ac <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t check = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem02Handle,2000) == pdTRUE)
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <StartTask03+0x88>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fc7d 	bl	80030c0 <xQueueSemaphoreTake>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d12f      	bne.n	800082c <StartTask03+0x80>
	  {
		  if(uxQueueSpacesAvailable(myQueue01Handle) != 0)
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <StartTask03+0x8c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fd81 	bl	80032d8 <uxQueueSpacesAvailable>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d01c      	beq.n	8000816 <StartTask03+0x6a>
		  {
			  __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <StartTask03+0x90>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <StartTask03+0x90>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f022 0201 	bic.w	r2, r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
			  xQueueSend(myQueue01Handle,f_recei_2,0);
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <StartTask03+0x8c>)
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	2300      	movs	r3, #0
 80007f2:	2200      	movs	r2, #0
 80007f4:	4912      	ldr	r1, [pc, #72]	; (8000840 <StartTask03+0x94>)
 80007f6:	f002 f9f7 	bl	8002be8 <xQueueGenericSend>
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, sizeof(f_recei_1));
 80007fa:	2232      	movs	r2, #50	; 0x32
 80007fc:	4910      	ldr	r1, [pc, #64]	; (8000840 <StartTask03+0x94>)
 80007fe:	4811      	ldr	r0, [pc, #68]	; (8000844 <StartTask03+0x98>)
 8000800:	f001 fbbf 	bl	8001f82 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <StartTask03+0x90>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <StartTask03+0x90>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f022 0204 	bic.w	r2, r2, #4
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	e00a      	b.n	800082c <StartTask03+0x80>
		  }
		  else
		  {
			  __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <StartTask03+0x90>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <StartTask03+0x90>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f022 0201 	bic.w	r2, r2, #1
 8000824:	601a      	str	r2, [r3, #0]
			  state = overflow;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <StartTask03+0x9c>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {

	  }
	  osDelay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f001 ffa9 	bl	8002784 <osDelay>
	  if(xSemaphoreTake(myBinarySem02Handle,2000) == pdTRUE)
 8000832:	e7c1      	b.n	80007b8 <StartTask03+0xc>
 8000834:	20000524 	.word	0x20000524
 8000838:	2000051c 	.word	0x2000051c
 800083c:	200004cc 	.word	0x200004cc
 8000840:	2000037c 	.word	0x2000037c
 8000844:	200003f8 	.word	0x200003f8
 8000848:	20000000 	.word	0x20000000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_MspInit+0x4c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_MspInit+0x4c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_MspInit+0x4c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 fab6 	bl	8000e06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a79      	ldr	r2, [pc, #484]	; (8000aa8 <HAL_UART_MspInit+0x200>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d158      	bne.n	800097a <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c8:	4b78      	ldr	r3, [pc, #480]	; (8000aac <HAL_UART_MspInit+0x204>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a77      	ldr	r2, [pc, #476]	; (8000aac <HAL_UART_MspInit+0x204>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b75      	ldr	r3, [pc, #468]	; (8000aac <HAL_UART_MspInit+0x204>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008dc:	61fb      	str	r3, [r7, #28]
 80008de:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b72      	ldr	r3, [pc, #456]	; (8000aac <HAL_UART_MspInit+0x204>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a71      	ldr	r2, [pc, #452]	; (8000aac <HAL_UART_MspInit+0x204>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b6f      	ldr	r3, [pc, #444]	; (8000aac <HAL_UART_MspInit+0x204>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4619      	mov	r1, r3
 800090c:	4868      	ldr	r0, [pc, #416]	; (8000ab0 <HAL_UART_MspInit+0x208>)
 800090e:	f000 fc9f 	bl	8001250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4619      	mov	r1, r3
 8000926:	4862      	ldr	r0, [pc, #392]	; (8000ab0 <HAL_UART_MspInit+0x208>)
 8000928:	f000 fc92 	bl	8001250 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800092c:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 800092e:	4a62      	ldr	r2, [pc, #392]	; (8000ab8 <HAL_UART_MspInit+0x210>)
 8000930:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000944:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000950:	4b58      	ldr	r3, [pc, #352]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000956:	4b57      	ldr	r3, [pc, #348]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800095c:	4855      	ldr	r0, [pc, #340]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 800095e:	f000 fa89 	bl	8000e74 <HAL_DMA_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000968:	f7ff ff70 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a51      	ldr	r2, [pc, #324]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 8000970:	63da      	str	r2, [r3, #60]	; 0x3c
 8000972:	4a50      	ldr	r2, [pc, #320]	; (8000ab4 <HAL_UART_MspInit+0x20c>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000978:	e092      	b.n	8000aa0 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a4f      	ldr	r2, [pc, #316]	; (8000abc <HAL_UART_MspInit+0x214>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d156      	bne.n	8000a32 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000984:	4b49      	ldr	r3, [pc, #292]	; (8000aac <HAL_UART_MspInit+0x204>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a48      	ldr	r2, [pc, #288]	; (8000aac <HAL_UART_MspInit+0x204>)
 800098a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	4b46      	ldr	r3, [pc, #280]	; (8000aac <HAL_UART_MspInit+0x204>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b43      	ldr	r3, [pc, #268]	; (8000aac <HAL_UART_MspInit+0x204>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a42      	ldr	r2, [pc, #264]	; (8000aac <HAL_UART_MspInit+0x204>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b40      	ldr	r3, [pc, #256]	; (8000aac <HAL_UART_MspInit+0x204>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b4:	2304      	movs	r3, #4
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	4619      	mov	r1, r3
 80009c6:	483a      	ldr	r0, [pc, #232]	; (8000ab0 <HAL_UART_MspInit+0x208>)
 80009c8:	f000 fc42 	bl	8001250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009cc:	2308      	movs	r3, #8
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4619      	mov	r1, r3
 80009de:	4834      	ldr	r0, [pc, #208]	; (8000ab0 <HAL_UART_MspInit+0x208>)
 80009e0:	f000 fc36 	bl	8001250 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009e4:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 80009e6:	4a37      	ldr	r2, [pc, #220]	; (8000ac4 <HAL_UART_MspInit+0x21c>)
 80009e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f0:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a14:	482a      	ldr	r0, [pc, #168]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 8000a16:	f000 fa2d 	bl	8000e74 <HAL_DMA_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8000a20:	f7ff ff14 	bl	800084c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a26      	ldr	r2, [pc, #152]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 8000a28:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <HAL_UART_MspInit+0x218>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a30:	e036      	b.n	8000aa0 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <HAL_UART_MspInit+0x220>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d131      	bne.n	8000aa0 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <HAL_UART_MspInit+0x204>)
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	4a1a      	ldr	r2, [pc, #104]	; (8000aac <HAL_UART_MspInit+0x204>)
 8000a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a46:	61d3      	str	r3, [r2, #28]
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_UART_MspInit+0x204>)
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_UART_MspInit+0x204>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_UART_MspInit+0x204>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_UART_MspInit+0x204>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4812      	ldr	r0, [pc, #72]	; (8000acc <HAL_UART_MspInit+0x224>)
 8000a82:	f000 fbe5 	bl	8001250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <HAL_UART_MspInit+0x224>)
 8000a9c:	f000 fbd8 	bl	8001250 <HAL_GPIO_Init>
}
 8000aa0:	bf00      	nop
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40013800 	.word	0x40013800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	20000488 	.word	0x20000488
 8000ab8:	40020058 	.word	0x40020058
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	200004cc 	.word	0x200004cc
 8000ac4:	4002006c 	.word	0x4002006c
 8000ac8:	40004800 	.word	0x40004800
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f88f 	bl	8000c20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b02:	f003 fc4f 	bl	80043a4 <xTaskGetSchedulerState>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d001      	beq.n	8000b10 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b0c:	f003 fffc 	bl	8004b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <DMA1_Channel5_IRQHandler+0x10>)
 8000b1a:	f000 fa65 	bl	8000fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000488 	.word	0x20000488

08000b28 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA1_Channel6_IRQHandler+0x10>)
 8000b2e:	f000 fa5b 	bl	8000fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200004cc 	.word	0x200004cc

08000b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <Reset_Handler>:
 8000b48:	f7ff fff8 	bl	8000b3c <SystemInit>
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <LoopFillZerobss+0xe>)
 8000b4e:	490c      	ldr	r1, [pc, #48]	; (8000b80 <LoopFillZerobss+0x12>)
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <LoopFillZerobss+0x16>)
 8000b52:	2300      	movs	r3, #0
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:
 8000b56:	58d4      	ldr	r4, [r2, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:
 8000b5c:	18c4      	adds	r4, r0, r3
 8000b5e:	428c      	cmp	r4, r1
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <LoopFillZerobss+0x1a>)
 8000b64:	4c09      	ldr	r4, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1e>)
 8000b66:	2300      	movs	r3, #0
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:
 8000b6e:	42a2      	cmp	r2, r4
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>
 8000b72:	f004 fa23 	bl	8004fbc <__libc_init_array>
 8000b76:	f7ff fb03 	bl	8000180 <main>
 8000b7a:	4770      	bx	lr
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000078 	.word	0x20000078
 8000b84:	080052dc 	.word	0x080052dc
 8000b88:	20000078 	.word	0x20000078
 8000b8c:	20001a08 	.word	0x20001a08

08000b90 <ADC1_2_IRQHandler>:
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x28>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f923 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fe52 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f93b 	bl	8000e5a <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 f903 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000004 	.word	0x20000004
 8000c18:	2000000c 	.word	0x2000000c
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x1c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x20>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <HAL_IncTick+0x20>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	2000000c 	.word	0x2000000c
 8000c40:	20000528 	.word	0x20000528

08000c44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <HAL_GetTick+0x10>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	20000528 	.word	0x20000528

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <__NVIC_EnableIRQ+0x34>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd0:	f7ff ff90 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff2d 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff42 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff35 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa2 	bl	8000dac <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e043      	b.n	8000f12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_DMA_Init+0xa8>)
 8000e92:	4413      	add	r3, r2
 8000e94:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <HAL_DMA_Init+0xac>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	009a      	lsls	r2, r3, #2
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <HAL_DMA_Init+0xb0>)
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ebe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ec2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	bffdfff8 	.word	0xbffdfff8
 8000f20:	cccccccd 	.word	0xcccccccd
 8000f24:	40020000 	.word	0x40020000

08000f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <HAL_DMA_Start_IT+0x20>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e04b      	b.n	8000fe0 <HAL_DMA_Start_IT+0xb8>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d13a      	bne.n	8000fd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0201 	bic.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f937 	bl	80011f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d008      	beq.n	8000fa0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 020e 	orr.w	r2, r2, #14
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e00f      	b.n	8000fc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0204 	bic.w	r2, r2, #4
 8000fae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 020a 	orr.w	r2, r2, #10
 8000fbe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e005      	b.n	8000fde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	2204      	movs	r2, #4
 8001006:	409a      	lsls	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d04f      	beq.n	80010b0 <HAL_DMA_IRQHandler+0xc8>
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	2b00      	cmp	r3, #0
 8001018:	d04a      	beq.n	80010b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0320 	and.w	r3, r3, #32
 8001024:	2b00      	cmp	r3, #0
 8001026:	d107      	bne.n	8001038 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0204 	bic.w	r2, r2, #4
 8001036:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a66      	ldr	r2, [pc, #408]	; (80011d8 <HAL_DMA_IRQHandler+0x1f0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d029      	beq.n	8001096 <HAL_DMA_IRQHandler+0xae>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a65      	ldr	r2, [pc, #404]	; (80011dc <HAL_DMA_IRQHandler+0x1f4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d022      	beq.n	8001092 <HAL_DMA_IRQHandler+0xaa>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a63      	ldr	r2, [pc, #396]	; (80011e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01a      	beq.n	800108c <HAL_DMA_IRQHandler+0xa4>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a62      	ldr	r2, [pc, #392]	; (80011e4 <HAL_DMA_IRQHandler+0x1fc>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d012      	beq.n	8001086 <HAL_DMA_IRQHandler+0x9e>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a60      	ldr	r2, [pc, #384]	; (80011e8 <HAL_DMA_IRQHandler+0x200>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00a      	beq.n	8001080 <HAL_DMA_IRQHandler+0x98>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a5f      	ldr	r2, [pc, #380]	; (80011ec <HAL_DMA_IRQHandler+0x204>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d102      	bne.n	800107a <HAL_DMA_IRQHandler+0x92>
 8001074:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001078:	e00e      	b.n	8001098 <HAL_DMA_IRQHandler+0xb0>
 800107a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800107e:	e00b      	b.n	8001098 <HAL_DMA_IRQHandler+0xb0>
 8001080:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001084:	e008      	b.n	8001098 <HAL_DMA_IRQHandler+0xb0>
 8001086:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800108a:	e005      	b.n	8001098 <HAL_DMA_IRQHandler+0xb0>
 800108c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001090:	e002      	b.n	8001098 <HAL_DMA_IRQHandler+0xb0>
 8001092:	2340      	movs	r3, #64	; 0x40
 8001094:	e000      	b.n	8001098 <HAL_DMA_IRQHandler+0xb0>
 8001096:	2304      	movs	r3, #4
 8001098:	4a55      	ldr	r2, [pc, #340]	; (80011f0 <HAL_DMA_IRQHandler+0x208>)
 800109a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 8094 	beq.w	80011ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010ae:	e08e      	b.n	80011ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	2202      	movs	r2, #2
 80010b6:	409a      	lsls	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d056      	beq.n	800116e <HAL_DMA_IRQHandler+0x186>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d051      	beq.n	800116e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10b      	bne.n	80010f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 020a 	bic.w	r2, r2, #10
 80010e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a38      	ldr	r2, [pc, #224]	; (80011d8 <HAL_DMA_IRQHandler+0x1f0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d029      	beq.n	800114e <HAL_DMA_IRQHandler+0x166>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a37      	ldr	r2, [pc, #220]	; (80011dc <HAL_DMA_IRQHandler+0x1f4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d022      	beq.n	800114a <HAL_DMA_IRQHandler+0x162>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a35      	ldr	r2, [pc, #212]	; (80011e0 <HAL_DMA_IRQHandler+0x1f8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d01a      	beq.n	8001144 <HAL_DMA_IRQHandler+0x15c>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a34      	ldr	r2, [pc, #208]	; (80011e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d012      	beq.n	800113e <HAL_DMA_IRQHandler+0x156>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <HAL_DMA_IRQHandler+0x200>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00a      	beq.n	8001138 <HAL_DMA_IRQHandler+0x150>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a31      	ldr	r2, [pc, #196]	; (80011ec <HAL_DMA_IRQHandler+0x204>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d102      	bne.n	8001132 <HAL_DMA_IRQHandler+0x14a>
 800112c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001130:	e00e      	b.n	8001150 <HAL_DMA_IRQHandler+0x168>
 8001132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001136:	e00b      	b.n	8001150 <HAL_DMA_IRQHandler+0x168>
 8001138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113c:	e008      	b.n	8001150 <HAL_DMA_IRQHandler+0x168>
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	e005      	b.n	8001150 <HAL_DMA_IRQHandler+0x168>
 8001144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001148:	e002      	b.n	8001150 <HAL_DMA_IRQHandler+0x168>
 800114a:	2320      	movs	r3, #32
 800114c:	e000      	b.n	8001150 <HAL_DMA_IRQHandler+0x168>
 800114e:	2302      	movs	r3, #2
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <HAL_DMA_IRQHandler+0x208>)
 8001152:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	2b00      	cmp	r3, #0
 8001162:	d034      	beq.n	80011ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800116c:	e02f      	b.n	80011ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2208      	movs	r2, #8
 8001174:	409a      	lsls	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d028      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x1e8>
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d023      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 020e 	bic.w	r2, r2, #14
 8001196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a0:	2101      	movs	r1, #1
 80011a2:	fa01 f202 	lsl.w	r2, r1, r2
 80011a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	4798      	blx	r3
    }
  }
  return;
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
}
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020008 	.word	0x40020008
 80011dc:	4002001c 	.word	0x4002001c
 80011e0:	40020030 	.word	0x40020030
 80011e4:	40020044 	.word	0x40020044
 80011e8:	40020058 	.word	0x40020058
 80011ec:	4002006c 	.word	0x4002006c
 80011f0:	40020000 	.word	0x40020000

080011f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f202 	lsl.w	r2, r1, r2
 8001210:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d108      	bne.n	8001234 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001232:	e007      	b.n	8001244 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e169      	b.n	8001538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001264:	2201      	movs	r2, #1
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8158 	bne.w	8001532 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a9a      	ldr	r2, [pc, #616]	; (80014f0 <HAL_GPIO_Init+0x2a0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d05e      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 800128c:	4a98      	ldr	r2, [pc, #608]	; (80014f0 <HAL_GPIO_Init+0x2a0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d875      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 8001292:	4a98      	ldr	r2, [pc, #608]	; (80014f4 <HAL_GPIO_Init+0x2a4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d058      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 8001298:	4a96      	ldr	r2, [pc, #600]	; (80014f4 <HAL_GPIO_Init+0x2a4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d86f      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 800129e:	4a96      	ldr	r2, [pc, #600]	; (80014f8 <HAL_GPIO_Init+0x2a8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d052      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012a4:	4a94      	ldr	r2, [pc, #592]	; (80014f8 <HAL_GPIO_Init+0x2a8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d869      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012aa:	4a94      	ldr	r2, [pc, #592]	; (80014fc <HAL_GPIO_Init+0x2ac>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d04c      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012b0:	4a92      	ldr	r2, [pc, #584]	; (80014fc <HAL_GPIO_Init+0x2ac>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d863      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012b6:	4a92      	ldr	r2, [pc, #584]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d046      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012bc:	4a90      	ldr	r2, [pc, #576]	; (8001500 <HAL_GPIO_Init+0x2b0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d85d      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d82a      	bhi.n	800131c <HAL_GPIO_Init+0xcc>
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d859      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <HAL_GPIO_Init+0x80>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	08001325 	.word	0x08001325
 80012d8:	08001337 	.word	0x08001337
 80012dc:	08001379 	.word	0x08001379
 80012e0:	0800137f 	.word	0x0800137f
 80012e4:	0800137f 	.word	0x0800137f
 80012e8:	0800137f 	.word	0x0800137f
 80012ec:	0800137f 	.word	0x0800137f
 80012f0:	0800137f 	.word	0x0800137f
 80012f4:	0800137f 	.word	0x0800137f
 80012f8:	0800137f 	.word	0x0800137f
 80012fc:	0800137f 	.word	0x0800137f
 8001300:	0800137f 	.word	0x0800137f
 8001304:	0800137f 	.word	0x0800137f
 8001308:	0800137f 	.word	0x0800137f
 800130c:	0800137f 	.word	0x0800137f
 8001310:	0800137f 	.word	0x0800137f
 8001314:	0800132d 	.word	0x0800132d
 8001318:	08001341 	.word	0x08001341
 800131c:	4a79      	ldr	r2, [pc, #484]	; (8001504 <HAL_GPIO_Init+0x2b4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001322:	e02c      	b.n	800137e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e029      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	3304      	adds	r3, #4
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e024      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e01f      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	330c      	adds	r3, #12
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e01a      	b.n	8001380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001352:	2304      	movs	r3, #4
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e013      	b.n	8001380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	611a      	str	r2, [r3, #16]
          break;
 800136a:	e009      	b.n	8001380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	615a      	str	r2, [r3, #20]
          break;
 8001376:	e003      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x130>
          break;
 800137e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	d801      	bhi.n	800138a <HAL_GPIO_Init+0x13a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e001      	b.n	800138e <HAL_GPIO_Init+0x13e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3304      	adds	r3, #4
 800138e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d802      	bhi.n	800139c <HAL_GPIO_Init+0x14c>
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x152>
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	3b08      	subs	r3, #8
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	210f      	movs	r1, #15
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	6a39      	ldr	r1, [r7, #32]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 80b1 	beq.w	8001532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d0:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <HAL_GPIO_Init+0x2b8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e8:	4a48      	ldr	r2, [pc, #288]	; (800150c <HAL_GPIO_Init+0x2bc>)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a40      	ldr	r2, [pc, #256]	; (8001510 <HAL_GPIO_Init+0x2c0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d013      	beq.n	800143c <HAL_GPIO_Init+0x1ec>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a3f      	ldr	r2, [pc, #252]	; (8001514 <HAL_GPIO_Init+0x2c4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d00d      	beq.n	8001438 <HAL_GPIO_Init+0x1e8>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d007      	beq.n	8001434 <HAL_GPIO_Init+0x1e4>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a3d      	ldr	r2, [pc, #244]	; (800151c <HAL_GPIO_Init+0x2cc>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d101      	bne.n	8001430 <HAL_GPIO_Init+0x1e0>
 800142c:	2303      	movs	r3, #3
 800142e:	e006      	b.n	800143e <HAL_GPIO_Init+0x1ee>
 8001430:	2304      	movs	r3, #4
 8001432:	e004      	b.n	800143e <HAL_GPIO_Init+0x1ee>
 8001434:	2302      	movs	r3, #2
 8001436:	e002      	b.n	800143e <HAL_GPIO_Init+0x1ee>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_GPIO_Init+0x1ee>
 800143c:	2300      	movs	r3, #0
 800143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001440:	f002 0203 	and.w	r2, r2, #3
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	4093      	lsls	r3, r2
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800144e:	492f      	ldr	r1, [pc, #188]	; (800150c <HAL_GPIO_Init+0x2bc>)
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001468:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	492c      	ldr	r1, [pc, #176]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	43db      	mvns	r3, r3
 800147e:	4928      	ldr	r1, [pc, #160]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 8001480:	4013      	ands	r3, r2
 8001482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	4922      	ldr	r1, [pc, #136]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	60cb      	str	r3, [r1, #12]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	491e      	ldr	r1, [pc, #120]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4918      	ldr	r1, [pc, #96]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4914      	ldr	r1, [pc, #80]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d021      	beq.n	8001524 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	490e      	ldr	r1, [pc, #56]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e021      	b.n	8001532 <HAL_GPIO_Init+0x2e2>
 80014ee:	bf00      	nop
 80014f0:	10320000 	.word	0x10320000
 80014f4:	10310000 	.word	0x10310000
 80014f8:	10220000 	.word	0x10220000
 80014fc:	10210000 	.word	0x10210000
 8001500:	10120000 	.word	0x10120000
 8001504:	10110000 	.word	0x10110000
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000
 8001510:	40010800 	.word	0x40010800
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40011000 	.word	0x40011000
 800151c:	40011400 	.word	0x40011400
 8001520:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_GPIO_Init+0x304>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	43db      	mvns	r3, r3
 800152c:	4909      	ldr	r1, [pc, #36]	; (8001554 <HAL_GPIO_Init+0x304>)
 800152e:	4013      	ands	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3301      	adds	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	f47f ae8e 	bne.w	8001264 <HAL_GPIO_Init+0x14>
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	372c      	adds	r7, #44	; 0x2c
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40010400 	.word	0x40010400

08001558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
 8001564:	4613      	mov	r3, r2
 8001566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001568:	787b      	ldrb	r3, [r7, #1]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001574:	e003      	b.n	800157e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	041a      	lsls	r2, r3, #16
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	611a      	str	r2, [r3, #16]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43d9      	mvns	r1, r3
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	400b      	ands	r3, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	611a      	str	r2, [r3, #16]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e272      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8087 	beq.w	80016ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015dc:	4b92      	ldr	r3, [pc, #584]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d00c      	beq.n	8001602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e8:	4b8f      	ldr	r3, [pc, #572]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d112      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
 80015f4:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d10b      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001602:	4b89      	ldr	r3, [pc, #548]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d06c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x12c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d168      	bne.n	80016e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e24c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x76>
 8001624:	4b80      	ldr	r3, [pc, #512]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a7f      	ldr	r2, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e02e      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x98>
 800163a:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b78      	ldr	r3, [pc, #480]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a77      	ldr	r2, [pc, #476]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0xbc>
 800165e:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a71      	ldr	r2, [pc, #452]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b68      	ldr	r3, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a67      	ldr	r2, [pc, #412]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fad4 	bl	8000c44 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fad0 	bl	8000c44 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e200      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe4>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fac0 	bl	8000c44 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fabc 	bl	8000c44 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1ec      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x10c>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f6:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1c0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4939      	ldr	r1, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fa75 	bl	8000c44 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fa71 	bl	8000c44 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1a1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4927      	ldr	r1, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fa54 	bl	8000c44 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fa50 	bl	8000c44 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e180      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d03a      	beq.n	8001840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d019      	beq.n	8001806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fa34 	bl	8000c44 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fa30 	bl	8000c44 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e160      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 face 	bl	8001da0 <RCC_Delay>
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fa1a 	bl	8000c44 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	e00f      	b.n	8001834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fa16 	bl	8000c44 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d908      	bls.n	8001834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e146      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	42420000 	.word	0x42420000
 8001830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	4b92      	ldr	r3, [pc, #584]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e9      	bne.n	8001814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a6 	beq.w	800199a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001852:	4b8b      	ldr	r3, [pc, #556]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b88      	ldr	r3, [pc, #544]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a87      	ldr	r2, [pc, #540]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b85      	ldr	r3, [pc, #532]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	4b82      	ldr	r3, [pc, #520]	; (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d118      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	4b7f      	ldr	r3, [pc, #508]	; (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7e      	ldr	r2, [pc, #504]	; (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff f9d7 	bl	8000c44 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff f9d3 	bl	8000c44 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e103      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <HAL_RCC_OscConfig+0x4c8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x312>
 80018c0:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4a6e      	ldr	r2, [pc, #440]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	e02d      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x334>
 80018d6:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a66      	ldr	r2, [pc, #408]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	e01c      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x356>
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a60      	ldr	r2, [pc, #384]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a5d      	ldr	r2, [pc, #372]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 8001912:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a5a      	ldr	r2, [pc, #360]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a57      	ldr	r2, [pc, #348]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d015      	beq.n	800195e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff f987 	bl	8000c44 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff f983 	bl	8000c44 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e0b1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ee      	beq.n	800193a <HAL_RCC_OscConfig+0x37e>
 800195c:	e014      	b.n	8001988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff f971 	bl	8000c44 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff f96d 	bl	8000c44 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e09b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	4b40      	ldr	r3, [pc, #256]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198e:	4b3c      	ldr	r3, [pc, #240]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8087 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d061      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d146      	bne.n	8001a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff f941 	bl	8000c44 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f93d 	bl	8000c44 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e06d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	4921      	ldr	r1, [pc, #132]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a19      	ldr	r1, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	430b      	orrs	r3, r1
 8001a12:	491b      	ldr	r1, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f911 	bl	8000c44 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f90d 	bl	8000c44 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e03d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46a>
 8001a44:	e035      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_RCC_OscConfig+0x4cc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f8fa 	bl	8000c44 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f8f6 	bl	8000c44 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e026      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x498>
 8001a72:	e01e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e019      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40007000 	.word	0x40007000
 8001a88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x500>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d0      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4965      	ldr	r1, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d040      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e073      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06b      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4936      	ldr	r1, [pc, #216]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb0:	f7ff f848 	bl	8000c44 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff f844 	bl	8000c44 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e053      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d210      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4922      	ldr	r1, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1cc>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1d0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe ffa6 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08005248 	.word	0x08005248
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x36>
 8001cc2:	e027      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc6:	613b      	str	r3, [r7, #16]
      break;
 8001cc8:	e027      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	0c9b      	lsrs	r3, r3, #18
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d010      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	0c5b      	lsrs	r3, r3, #17
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf6:	fb03 f202 	mul.w	r2, r3, r2
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e004      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	613b      	str	r3, [r7, #16]
      break;
 8001d12:	e002      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d16:	613b      	str	r3, [r7, #16]
      break;
 8001d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1a:	693b      	ldr	r3, [r7, #16]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	007a1200 	.word	0x007a1200
 8001d30:	08005260 	.word	0x08005260
 8001d34:	08005270 	.word	0x08005270
 8001d38:	003d0900 	.word	0x003d0900

08001d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff2 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08005258 	.word	0x08005258

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0adb      	lsrs	r3, r3, #11
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08005258 	.word	0x08005258

08001da0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <RCC_Delay+0x34>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <RCC_Delay+0x38>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0a5b      	lsrs	r3, r3, #9
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dbc:	bf00      	nop
  }
  while (Delay --);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	60fa      	str	r2, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f9      	bne.n	8001dbc <RCC_Delay+0x1c>
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	20000004 	.word	0x20000004
 8001dd8:	10624dd3 	.word	0x10624dd3

08001ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e042      	b.n	8001e74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fd50 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	; 0x24
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fbb7 	bl	8002594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d16d      	bne.n	8001f78 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_UART_Transmit+0x2c>
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e066      	b.n	8001f7a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2221      	movs	r2, #33	; 0x21
 8001eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eba:	f7fe fec3 	bl	8000c44 <HAL_GetTick>
 8001ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	88fa      	ldrh	r2, [r7, #6]
 8001ec4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	88fa      	ldrh	r2, [r7, #6]
 8001eca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed4:	d108      	bne.n	8001ee8 <HAL_UART_Transmit+0x6c>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d104      	bne.n	8001ee8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	e003      	b.n	8001ef0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ef0:	e02a      	b.n	8001f48 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f9b6 	bl	800226e <UART_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e036      	b.n	8001f7a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10b      	bne.n	8001f2a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	3302      	adds	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	e007      	b.n	8001f3a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1cf      	bne.n	8001ef2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f986 	bl	800226e <UART_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e006      	b.n	8001f7a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e000      	b.n	8001f7a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f78:	2302      	movs	r3, #2
  }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b08c      	sub	sp, #48	; 0x30
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d14a      	bne.n	8002032 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e043      	b.n	8002034 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f9c4 	bl	800234c <UART_Start_Receive_DMA>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001fca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d12c      	bne.n	800202c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d125      	bne.n	8002026 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	e853 3f00 	ldrex	r3, [r3]
 8001ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	330c      	adds	r3, #12
 800200e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002010:	627a      	str	r2, [r7, #36]	; 0x24
 8002012:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002014:	6a39      	ldr	r1, [r7, #32]
 8002016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002018:	e841 2300 	strex	r3, r2, [r1]
 800201c:	61fb      	str	r3, [r7, #28]
   return(result);
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e5      	bne.n	8001ff0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002024:	e002      	b.n	800202c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800202c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002030:	e000      	b.n	8002034 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002032:	2302      	movs	r3, #2
  }
}
 8002034:	4618      	mov	r0, r3
 8002036:	3730      	adds	r7, #48	; 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b09c      	sub	sp, #112	; 0x70
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d172      	bne.n	8002174 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800208e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002090:	2200      	movs	r2, #0
 8002092:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	330c      	adds	r3, #12
 800209a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209e:	e853 3f00 	ldrex	r3, [r3]
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80020ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	330c      	adds	r3, #12
 80020b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020bc:	e841 2300 	strex	r3, r2, [r1]
 80020c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e5      	bne.n	8002094 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3314      	adds	r3, #20
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d2:	e853 3f00 	ldrex	r3, [r3]
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80020d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	667b      	str	r3, [r7, #100]	; 0x64
 80020e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3314      	adds	r3, #20
 80020e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020e8:	647a      	str	r2, [r7, #68]	; 0x44
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020f0:	e841 2300 	strex	r3, r2, [r1]
 80020f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e5      	bne.n	80020c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3314      	adds	r3, #20
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	e853 3f00 	ldrex	r3, [r3]
 800210a:	623b      	str	r3, [r7, #32]
   return(result);
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002112:	663b      	str	r3, [r7, #96]	; 0x60
 8002114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3314      	adds	r3, #20
 800211a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800211c:	633a      	str	r2, [r7, #48]	; 0x30
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002120:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002124:	e841 2300 	strex	r3, r2, [r1]
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e5      	bne.n	80020fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	2b01      	cmp	r3, #1
 800213e:	d119      	bne.n	8002174 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	330c      	adds	r3, #12
 8002146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	e853 3f00 	ldrex	r3, [r3]
 800214e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 0310 	bic.w	r3, r3, #16
 8002156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	330c      	adds	r3, #12
 800215e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002160:	61fa      	str	r2, [r7, #28]
 8002162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002164:	69b9      	ldr	r1, [r7, #24]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	e841 2300 	strex	r3, r2, [r1]
 800216c:	617b      	str	r3, [r7, #20]
   return(result);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e5      	bne.n	8002140 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002176:	2200      	movs	r2, #0
 8002178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800217a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	2b01      	cmp	r3, #1
 8002180:	d106      	bne.n	8002190 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002186:	4619      	mov	r1, r3
 8002188:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800218a:	f7fe f9ef 	bl	800056c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800218e:	e002      	b.n	8002196 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002190:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002192:	f7ff ff53 	bl	800203c <HAL_UART_RxCpltCallback>
}
 8002196:	bf00      	nop
 8002198:	3770      	adds	r7, #112	; 0x70
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7fe f9d1 	bl	800056c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80021ca:	e002      	b.n	80021d2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff ff3e 	bl	800204e <HAL_UART_RxHalfCpltCallback>
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b21      	cmp	r3, #33	; 0x21
 800220c:	d108      	bne.n	8002220 <UART_DMAError+0x46>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800221a:	68b8      	ldr	r0, [r7, #8]
 800221c:	f000 f930 	bl	8002480 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b22      	cmp	r3, #34	; 0x22
 8002240:	d108      	bne.n	8002254 <UART_DMAError+0x7a>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2200      	movs	r2, #0
 800224c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800224e:	68b8      	ldr	r0, [r7, #8]
 8002250:	f000 f93d 	bl	80024ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f043 0210 	orr.w	r2, r3, #16
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002260:	68b8      	ldr	r0, [r7, #8]
 8002262:	f7ff fefd 	bl	8002060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b090      	sub	sp, #64	; 0x40
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227e:	e050      	b.n	8002322 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002286:	d04c      	beq.n	8002322 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <UART_WaitOnFlagUntilTimeout+0x30>
 800228e:	f7fe fcd9 	bl	8000c44 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800229a:	429a      	cmp	r2, r3
 800229c:	d241      	bcs.n	8002322 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	330c      	adds	r3, #12
 80022bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022be:	637a      	str	r2, [r7, #52]	; 0x34
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c6:	e841 2300 	strex	r3, r2, [r1]
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e5      	bne.n	800229e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3314      	adds	r3, #20
 80022d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	e853 3f00 	ldrex	r3, [r3]
 80022e0:	613b      	str	r3, [r7, #16]
   return(result);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3314      	adds	r3, #20
 80022f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f2:	623a      	str	r2, [r7, #32]
 80022f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f6:	69f9      	ldr	r1, [r7, #28]
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e5      	bne.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e00f      	b.n	8002342 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	429a      	cmp	r2, r3
 800233e:	d09f      	beq.n	8002280 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3740      	adds	r7, #64	; 0x40
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b098      	sub	sp, #96	; 0x60
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	88fa      	ldrh	r2, [r7, #6]
 8002364:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2222      	movs	r2, #34	; 0x22
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	4a3e      	ldr	r2, [pc, #248]	; (8002474 <UART_Start_Receive_DMA+0x128>)
 800237a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	4a3d      	ldr	r2, [pc, #244]	; (8002478 <UART_Start_Receive_DMA+0x12c>)
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	4a3c      	ldr	r2, [pc, #240]	; (800247c <UART_Start_Receive_DMA+0x130>)
 800238a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	2200      	movs	r2, #0
 8002392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	f7fe fdbc 	bl	8000f28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80023b0:	2300      	movs	r3, #0
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d019      	beq.n	8002402 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	330c      	adds	r3, #12
 80023d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d8:	e853 3f00 	ldrex	r3, [r3]
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80023de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80023fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e5      	bne.n	80023ce <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	657b      	str	r3, [r7, #84]	; 0x54
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3314      	adds	r3, #20
 8002420:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002422:	63ba      	str	r2, [r7, #56]	; 0x38
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e5      	bne.n	8002402 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3314      	adds	r3, #20
 800243c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	e853 3f00 	ldrex	r3, [r3]
 8002444:	617b      	str	r3, [r7, #20]
   return(result);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244c:	653b      	str	r3, [r7, #80]	; 0x50
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3314      	adds	r3, #20
 8002454:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002456:	627a      	str	r2, [r7, #36]	; 0x24
 8002458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	6a39      	ldr	r1, [r7, #32]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	61fb      	str	r3, [r7, #28]
   return(result);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e5      	bne.n	8002436 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3760      	adds	r7, #96	; 0x60
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	08002073 	.word	0x08002073
 8002478:	0800219f 	.word	0x0800219f
 800247c:	080021db 	.word	0x080021db

08002480 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	330c      	adds	r3, #12
 800248e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	e853 3f00 	ldrex	r3, [r3]
 8002496:	60bb      	str	r3, [r7, #8]
   return(result);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	330c      	adds	r3, #12
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	61ba      	str	r2, [r7, #24]
 80024aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ac:	6979      	ldr	r1, [r7, #20]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	e841 2300 	strex	r3, r2, [r1]
 80024b4:	613b      	str	r3, [r7, #16]
   return(result);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e5      	bne.n	8002488 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80024c4:	bf00      	nop
 80024c6:	3724      	adds	r7, #36	; 0x24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b095      	sub	sp, #84	; 0x54
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	e853 3f00 	ldrex	r3, [r3]
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	330c      	adds	r3, #12
 80024f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024f6:	643a      	str	r2, [r7, #64]	; 0x40
 80024f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e5      	bne.n	80024d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3314      	adds	r3, #20
 8002510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	61fb      	str	r3, [r7, #28]
   return(result);
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	64bb      	str	r3, [r7, #72]	; 0x48
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800252a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e5      	bne.n	800250a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	2b01      	cmp	r3, #1
 8002544:	d119      	bne.n	800257a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	e853 3f00 	ldrex	r3, [r3]
 8002554:	60bb      	str	r3, [r7, #8]
   return(result);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f023 0310 	bic.w	r3, r3, #16
 800255c:	647b      	str	r3, [r7, #68]	; 0x44
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	330c      	adds	r3, #12
 8002564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002566:	61ba      	str	r2, [r7, #24]
 8002568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256a:	6979      	ldr	r1, [r7, #20]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	e841 2300 	strex	r3, r2, [r1]
 8002572:	613b      	str	r3, [r7, #16]
   return(result);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e5      	bne.n	8002546 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002588:	bf00      	nop
 800258a:	3754      	adds	r7, #84	; 0x54
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
	...

08002594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ce:	f023 030c 	bic.w	r3, r3, #12
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	430b      	orrs	r3, r1
 80025da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <UART_SetConfig+0x114>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d103      	bne.n	8002604 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025fc:	f7ff fbbc 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	e002      	b.n	800260a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002604:	f7ff fba4 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8002608:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	4a22      	ldr	r2, [pc, #136]	; (80026ac <UART_SetConfig+0x118>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	0119      	lsls	r1, r3, #4
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <UART_SetConfig+0x118>)
 8002642:	fba3 0302 	umull	r0, r3, r3, r2
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2064      	movs	r0, #100	; 0x64
 800264a:	fb00 f303 	mul.w	r3, r0, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	3332      	adds	r3, #50	; 0x32
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <UART_SetConfig+0x118>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002660:	4419      	add	r1, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009a      	lsls	r2, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fbb2 f2f3 	udiv	r2, r2, r3
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <UART_SetConfig+0x118>)
 800267a:	fba3 0302 	umull	r0, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2064      	movs	r0, #100	; 0x64
 8002682:	fb00 f303 	mul.w	r3, r0, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	3332      	adds	r3, #50	; 0x32
 800268c:	4a07      	ldr	r2, [pc, #28]	; (80026ac <UART_SetConfig+0x118>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	440a      	add	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40013800 	.word	0x40013800
 80026ac:	51eb851f 	.word	0x51eb851f

080026b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c2:	2b84      	cmp	r3, #132	; 0x84
 80026c4:	d005      	beq.n	80026d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	3303      	adds	r3, #3
 80026d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026e2:	f001 fa43 	bl	8003b6c <vTaskStartScheduler>
  
  return osOK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}

080026ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af04      	add	r7, sp, #16
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d020      	beq.n	8002740 <osThreadCreate+0x54>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01c      	beq.n	8002740 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685c      	ldr	r4, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681d      	ldr	r5, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691e      	ldr	r6, [r3, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ffc9 	bl	80026b0 <makeFreeRtosPriority>
 800271e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002728:	9202      	str	r2, [sp, #8]
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	9100      	str	r1, [sp, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4632      	mov	r2, r6
 8002732:	4629      	mov	r1, r5
 8002734:	4620      	mov	r0, r4
 8002736:	f000 ff19 	bl	800356c <xTaskCreateStatic>
 800273a:	4603      	mov	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e01c      	b.n	800277a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685c      	ldr	r4, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800274c:	b29e      	uxth	r6, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ffab 	bl	80026b0 <makeFreeRtosPriority>
 800275a:	4602      	mov	r2, r0
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4632      	mov	r2, r6
 8002768:	4629      	mov	r1, r5
 800276a:	4620      	mov	r0, r4
 800276c:	f000 ff5a 	bl	8003624 <xTaskCreate>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002784 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <osDelay+0x16>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	e000      	b.n	800279c <osDelay+0x18>
 800279a:	2301      	movs	r3, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f001 f887 	bl	80038b0 <vTaskDelay>
  
  return osOK;
 80027a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00f      	beq.n	80027de <osSemaphoreCreate+0x32>
    if (count == 1) {
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10a      	bne.n	80027da <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	9200      	str	r2, [sp, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2100      	movs	r1, #0
 80027d0:	2001      	movs	r0, #1
 80027d2:	f000 f935 	bl	8002a40 <xQueueGenericCreateStatic>
 80027d6:	4603      	mov	r3, r0
 80027d8:	e016      	b.n	8002808 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	e014      	b.n	8002808 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d110      	bne.n	8002806 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80027e4:	2203      	movs	r2, #3
 80027e6:	2100      	movs	r1, #0
 80027e8:	2001      	movs	r0, #1
 80027ea:	f000 f9a0 	bl	8002b2e <xQueueGenericCreate>
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <osSemaphoreCreate+0x56>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f9f3 	bl	8002be8 <xQueueGenericSend>
      return sema;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	e000      	b.n	8002808 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002806:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 0208 	add.w	r2, r3, #8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 0208 	add.w	r2, r3, #8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0208 	add.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c2:	d103      	bne.n	80028cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e00c      	b.n	80028e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3308      	adds	r3, #8
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e002      	b.n	80028da <vListInsert+0x2e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d2f6      	bcs.n	80028d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6852      	ldr	r2, [r2, #4]
 800293c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d103      	bne.n	8002950 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800299a:	f002 f837 	bl	8004a0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	3b01      	subs	r3, #1
 80029cc:	68f9      	ldr	r1, [r7, #12]
 80029ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	441a      	add	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d114      	bne.n	8002a1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01a      	beq.n	8002a2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3310      	adds	r3, #16
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fb0d 	bl	800401c <xTaskRemoveFromEventList>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d012      	beq.n	8002a2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <xQueueGenericReset+0xcc>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	e009      	b.n	8002a2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3310      	adds	r3, #16
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fef6 	bl	8002810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fef1 	bl	8002810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a2e:	f002 f81d 	bl	8004a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	e000ed04 	.word	0xe000ed04

08002a40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a66:	bf00      	nop
 8002a68:	e7fe      	b.n	8002a68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <xQueueGenericCreateStatic+0x52>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <xQueueGenericCreateStatic+0x56>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <xQueueGenericCreateStatic+0x58>
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	623b      	str	r3, [r7, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	e7fe      	b.n	8002ab0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <xQueueGenericCreateStatic+0x7e>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <xQueueGenericCreateStatic+0x82>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <xQueueGenericCreateStatic+0x84>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	61fb      	str	r3, [r7, #28]
}
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ade:	2348      	movs	r3, #72	; 0x48
 8002ae0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b48      	cmp	r3, #72	; 0x48
 8002ae6:	d00a      	beq.n	8002afe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	61bb      	str	r3, [r7, #24]
}
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b10:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f843 	bl	8002baa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3730      	adds	r7, #48	; 0x30
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b08a      	sub	sp, #40	; 0x28
 8002b32:	af02      	add	r7, sp, #8
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10a      	bne.n	8002b58 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	613b      	str	r3, [r7, #16]
}
 8002b54:	bf00      	nop
 8002b56:	e7fe      	b.n	8002b56 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e004      	b.n	8002b6e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3348      	adds	r3, #72	; 0x48
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 f84a 	bl	8004c0c <pvPortMalloc>
 8002b78:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00f      	beq.n	8002ba0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	3348      	adds	r3, #72	; 0x48
 8002b84:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f805 	bl	8002baa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e002      	b.n	8002bcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bd8:	2101      	movs	r1, #1
 8002bda:	69b8      	ldr	r0, [r7, #24]
 8002bdc:	f7ff fec8 	bl	8002970 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	; 0x38
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xQueueGenericSend+0x32>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d103      	bne.n	8002c28 <xQueueGenericSend+0x40>
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <xQueueGenericSend+0x44>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <xQueueGenericSend+0x46>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <xQueueGenericSend+0x60>
	__asm volatile
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c44:	bf00      	nop
 8002c46:	e7fe      	b.n	8002c46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d103      	bne.n	8002c56 <xQueueGenericSend+0x6e>
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <xQueueGenericSend+0x72>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <xQueueGenericSend+0x74>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	623b      	str	r3, [r7, #32]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c76:	f001 fb95 	bl	80043a4 <xTaskGetSchedulerState>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <xQueueGenericSend+0x9e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <xQueueGenericSend+0xa2>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <xQueueGenericSend+0xa4>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	61fb      	str	r3, [r7, #28]
}
 8002ca2:	bf00      	nop
 8002ca4:	e7fe      	b.n	8002ca4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ca6:	f001 feb1 	bl	8004a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d302      	bcc.n	8002cbc <xQueueGenericSend+0xd4>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d129      	bne.n	8002d10 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc2:	f000 fb43 	bl	800334c <prvCopyDataToQueue>
 8002cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	3324      	adds	r3, #36	; 0x24
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 f9a1 	bl	800401c <xTaskRemoveFromEventList>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ce0:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <xQueueGenericSend+0x1f8>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	e00a      	b.n	8002d08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cf8:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <xQueueGenericSend+0x1f8>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d08:	f001 feb0 	bl	8004a6c <vPortExitCritical>
				return pdPASS;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e063      	b.n	8002dd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d103      	bne.n	8002d1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d16:	f001 fea9 	bl	8004a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e05c      	b.n	8002dd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 f9d9 	bl	80040e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d32:	f001 fe9b 	bl	8004a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d36:	f000 ff83 	bl	8003c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d3a:	f001 fe67 	bl	8004a0c <vPortEnterCritical>
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4a:	d103      	bne.n	8002d54 <xQueueGenericSend+0x16c>
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d60:	d103      	bne.n	8002d6a <xQueueGenericSend+0x182>
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d6a:	f001 fe7f 	bl	8004a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d6e:	1d3a      	adds	r2, r7, #4
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 f9c8 	bl	800410c <xTaskCheckForTimeOut>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d124      	bne.n	8002dcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d84:	f000 fbda 	bl	800353c <prvIsQueueFull>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d018      	beq.n	8002dc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	3310      	adds	r3, #16
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 f91c 	bl	8003fd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d9e:	f000 fb65 	bl	800346c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002da2:	f000 ff5b 	bl	8003c5c <xTaskResumeAll>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f47f af7c 	bne.w	8002ca6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <xQueueGenericSend+0x1f8>)
 8002db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	e772      	b.n	8002ca6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc2:	f000 fb53 	bl	800346c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dc6:	f000 ff49 	bl	8003c5c <xTaskResumeAll>
 8002dca:	e76c      	b.n	8002ca6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dce:	f000 fb4d 	bl	800346c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dd2:	f000 ff43 	bl	8003c5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dd6:	2300      	movs	r3, #0
		}
	}
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3738      	adds	r7, #56	; 0x38
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	e000ed04 	.word	0xe000ed04

08002de4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08e      	sub	sp, #56	; 0x38
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	623b      	str	r3, [r7, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <xQueueGiveFromISR+0x48>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	61fb      	str	r3, [r7, #28]
}
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <xQueueGiveFromISR+0x58>
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <xQueueGiveFromISR+0x5c>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <xQueueGiveFromISR+0x5e>
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <xQueueGiveFromISR+0x78>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	61bb      	str	r3, [r7, #24]
}
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e5c:	f001 fe98 	bl	8004b90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e60:	f3ef 8211 	mrs	r2, BASEPRI
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	617a      	str	r2, [r7, #20]
 8002e76:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e78:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d22b      	bcs.n	8002ee4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea6:	d112      	bne.n	8002ece <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d016      	beq.n	8002ede <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	3324      	adds	r3, #36	; 0x24
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 f8b1 	bl	800401c <xTaskRemoveFromEventList>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e007      	b.n	8002ede <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	b25a      	sxtb	r2, r3
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee2:	e001      	b.n	8002ee8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ef2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3738      	adds	r7, #56	; 0x38
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	; 0x30
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <xQueueReceive+0x30>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	623b      	str	r3, [r7, #32]
}
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <xQueueReceive+0x3e>
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <xQueueReceive+0x42>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueReceive+0x44>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueReceive+0x5e>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	61fb      	str	r3, [r7, #28]
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f5e:	f001 fa21 	bl	80043a4 <xTaskGetSchedulerState>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <xQueueReceive+0x6e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <xQueueReceive+0x72>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <xQueueReceive+0x74>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <xQueueReceive+0x8e>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	61bb      	str	r3, [r7, #24]
}
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f8e:	f001 fd3d 	bl	8004a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01f      	beq.n	8002fde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa2:	f000 fa3d 	bl	8003420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00f      	beq.n	8002fd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	3310      	adds	r3, #16
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 f82e 	bl	800401c <xTaskRemoveFromEventList>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	; (80030bc <xQueueReceive+0x1bc>)
 8002fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fd6:	f001 fd49 	bl	8004a6c <vPortExitCritical>
				return pdPASS;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e069      	b.n	80030b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fe4:	f001 fd42 	bl	8004a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e062      	b.n	80030b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ff2:	f107 0310 	add.w	r3, r7, #16
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 f872 	bl	80040e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003000:	f001 fd34 	bl	8004a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003004:	f000 fe1c 	bl	8003c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003008:	f001 fd00 	bl	8004a0c <vPortEnterCritical>
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003012:	b25b      	sxtb	r3, r3
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003018:	d103      	bne.n	8003022 <xQueueReceive+0x122>
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003028:	b25b      	sxtb	r3, r3
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302e:	d103      	bne.n	8003038 <xQueueReceive+0x138>
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003038:	f001 fd18 	bl	8004a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800303c:	1d3a      	adds	r2, r7, #4
 800303e:	f107 0310 	add.w	r3, r7, #16
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f001 f861 	bl	800410c <xTaskCheckForTimeOut>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d123      	bne.n	8003098 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003052:	f000 fa5d 	bl	8003510 <prvIsQueueEmpty>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d017      	beq.n	800308c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	3324      	adds	r3, #36	; 0x24
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f000 ffb5 	bl	8003fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800306a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800306c:	f000 f9fe 	bl	800346c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003070:	f000 fdf4 	bl	8003c5c <xTaskResumeAll>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d189      	bne.n	8002f8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <xQueueReceive+0x1bc>)
 800307c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	e780      	b.n	8002f8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800308c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308e:	f000 f9ed 	bl	800346c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003092:	f000 fde3 	bl	8003c5c <xTaskResumeAll>
 8003096:	e77a      	b.n	8002f8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800309a:	f000 f9e7 	bl	800346c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800309e:	f000 fddd 	bl	8003c5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a4:	f000 fa34 	bl	8003510 <prvIsQueueEmpty>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f43f af6f 	beq.w	8002f8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3730      	adds	r7, #48	; 0x30
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	623b      	str	r3, [r7, #32]
}
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	61fb      	str	r3, [r7, #28]
}
 800310c:	bf00      	nop
 800310e:	e7fe      	b.n	800310e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003110:	f001 f948 	bl	80043a4 <xTaskGetSchedulerState>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <xQueueSemaphoreTake+0x60>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <xQueueSemaphoreTake+0x64>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <xQueueSemaphoreTake+0x66>
 8003124:	2300      	movs	r3, #0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	61bb      	str	r3, [r7, #24]
}
 800313c:	bf00      	nop
 800313e:	e7fe      	b.n	800313e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003140:	f001 fc64 	bl	8004a0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d024      	beq.n	800319a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	1e5a      	subs	r2, r3, #1
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d104      	bne.n	800316a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003160:	f001 faea 	bl	8004738 <pvTaskIncrementMutexHeldCount>
 8003164:	4602      	mov	r2, r0
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00f      	beq.n	8003192 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	3310      	adds	r3, #16
 8003176:	4618      	mov	r0, r3
 8003178:	f000 ff50 	bl	800401c <xTaskRemoveFromEventList>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003182:	4b54      	ldr	r3, [pc, #336]	; (80032d4 <xQueueSemaphoreTake+0x214>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003192:	f001 fc6b 	bl	8004a6c <vPortExitCritical>
				return pdPASS;
 8003196:	2301      	movs	r3, #1
 8003198:	e097      	b.n	80032ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d111      	bne.n	80031c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	617b      	str	r3, [r7, #20]
}
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031bc:	f001 fc56 	bl	8004a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e082      	b.n	80032ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 ff86 	bl	80040e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031d8:	f001 fc48 	bl	8004a6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031dc:	f000 fd30 	bl	8003c40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031e0:	f001 fc14 	bl	8004a0c <vPortEnterCritical>
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f0:	d103      	bne.n	80031fa <xQueueSemaphoreTake+0x13a>
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003200:	b25b      	sxtb	r3, r3
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003206:	d103      	bne.n	8003210 <xQueueSemaphoreTake+0x150>
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003210:	f001 fc2c 	bl	8004a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003214:	463a      	mov	r2, r7
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 ff75 	bl	800410c <xTaskCheckForTimeOut>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d132      	bne.n	800328e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800322a:	f000 f971 	bl	8003510 <prvIsQueueEmpty>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d026      	beq.n	8003282 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800323c:	f001 fbe6 	bl	8004a0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	f001 f8cb 	bl	80043e0 <xTaskPriorityInherit>
 800324a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800324c:	f001 fc0e 	bl	8004a6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	3324      	adds	r3, #36	; 0x24
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f000 febb 	bl	8003fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800325e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003260:	f000 f904 	bl	800346c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003264:	f000 fcfa 	bl	8003c5c <xTaskResumeAll>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	f47f af68 	bne.w	8003140 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003270:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <xQueueSemaphoreTake+0x214>)
 8003272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	e75e      	b.n	8003140 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003284:	f000 f8f2 	bl	800346c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003288:	f000 fce8 	bl	8003c5c <xTaskResumeAll>
 800328c:	e758      	b.n	8003140 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800328e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003290:	f000 f8ec 	bl	800346c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003294:	f000 fce2 	bl	8003c5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800329a:	f000 f939 	bl	8003510 <prvIsQueueEmpty>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f43f af4d 	beq.w	8003140 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032ac:	f001 fbae 	bl	8004a0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032b2:	f000 f834 	bl	800331e <prvGetDisinheritPriorityAfterTimeout>
 80032b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 f99a 	bl	80045f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032c4:	f001 fbd2 	bl	8004a6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3738      	adds	r7, #56	; 0x38
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	60fb      	str	r3, [r7, #12]
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8003300:	f001 fb84 	bl	8004a0c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8003310:	f001 fbac 	bl	8004a6c <vPortExitCritical>

	return uxReturn;
 8003314:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f1c3 0307 	rsb	r3, r3, #7
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e001      	b.n	8003340 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003340:	68fb      	ldr	r3, [r7, #12]
	}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d14d      	bne.n	800340e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4618      	mov	r0, r3
 8003378:	f001 f8b8 	bl	80044ec <xTaskPriorityDisinherit>
 800337c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	e043      	b.n	800340e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d119      	bne.n	80033c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6898      	ldr	r0, [r3, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	461a      	mov	r2, r3
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	f001 fe36 	bl	8005008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	441a      	add	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d32b      	bcc.n	800340e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	e026      	b.n	800340e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68d8      	ldr	r0, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	461a      	mov	r2, r3
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	f001 fe1c 	bl	8005008 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	425b      	negs	r3, r3
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d207      	bcs.n	80033fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	425b      	negs	r3, r3
 80033f6:	441a      	add	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d105      	bne.n	800340e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	3b01      	subs	r3, #1
 800340c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003416:	697b      	ldr	r3, [r7, #20]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d018      	beq.n	8003464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d303      	bcc.n	8003454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68d9      	ldr	r1, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	461a      	mov	r2, r3
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f001 fdd2 	bl	8005008 <memcpy>
	}
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003474:	f001 faca 	bl	8004a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800347e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003480:	e011      	b.n	80034a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3324      	adds	r3, #36	; 0x24
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fdc4 	bl	800401c <xTaskRemoveFromEventList>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800349a:	f000 fe99 	bl	80041d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	dce9      	bgt.n	8003482 <prvUnlockQueue+0x16>
 80034ae:	e000      	b.n	80034b2 <prvUnlockQueue+0x46>
					break;
 80034b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	22ff      	movs	r2, #255	; 0xff
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034ba:	f001 fad7 	bl	8004a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034be:	f001 faa5 	bl	8004a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ca:	e011      	b.n	80034f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d012      	beq.n	80034fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3310      	adds	r3, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fd9f 	bl	800401c <xTaskRemoveFromEventList>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034e4:	f000 fe74 	bl	80041d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034e8:	7bbb      	ldrb	r3, [r7, #14]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	dce9      	bgt.n	80034cc <prvUnlockQueue+0x60>
 80034f8:	e000      	b.n	80034fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003504:	f001 fab2 	bl	8004a6c <vPortExitCritical>
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003518:	f001 fa78 	bl	8004a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003524:	2301      	movs	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e001      	b.n	800352e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800352e:	f001 fa9d 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003544:	f001 fa62 	bl	8004a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	429a      	cmp	r2, r3
 8003552:	d102      	bne.n	800355a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003554:	2301      	movs	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e001      	b.n	800355e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800355e:	f001 fa85 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08e      	sub	sp, #56	; 0x38
 8003570:	af04      	add	r7, sp, #16
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	623b      	str	r3, [r7, #32]
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	61fb      	str	r3, [r7, #28]
}
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035b2:	23b4      	movs	r3, #180	; 0xb4
 80035b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2bb4      	cmp	r3, #180	; 0xb4
 80035ba:	d00a      	beq.n	80035d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	61bb      	str	r3, [r7, #24]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01e      	beq.n	8003616 <xTaskCreateStatic+0xaa>
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01b      	beq.n	8003616 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035f0:	2300      	movs	r3, #0
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	9302      	str	r3, [sp, #8]
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f851 	bl	80036b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800360e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003610:	f000 f8e4 	bl	80037dc <prvAddNewTaskToReadyList>
 8003614:	e001      	b.n	800361a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800361a:	697b      	ldr	r3, [r7, #20]
	}
 800361c:	4618      	mov	r0, r3
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af04      	add	r7, sp, #16
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fae7 	bl	8004c0c <pvPortMalloc>
 800363e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00e      	beq.n	8003664 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003646:	20b4      	movs	r0, #180	; 0xb4
 8003648:	f001 fae0 	bl	8004c0c <pvPortMalloc>
 800364c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
 800365a:	e005      	b.n	8003668 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800365c:	6978      	ldr	r0, [r7, #20]
 800365e:	f001 fb99 	bl	8004d94 <vPortFree>
 8003662:	e001      	b.n	8003668 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	2300      	movs	r3, #0
 800367a:	9303      	str	r3, [sp, #12]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	9302      	str	r3, [sp, #8]
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f80f 	bl	80036b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003692:	69f8      	ldr	r0, [r7, #28]
 8003694:	f000 f8a2 	bl	80037dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003698:	2301      	movs	r3, #1
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	e002      	b.n	80036a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800369e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036a4:	69bb      	ldr	r3, [r7, #24]
	}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036c8:	3b01      	subs	r3, #1
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f023 0307 	bic.w	r3, r3, #7
 80036d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	617b      	str	r3, [r7, #20]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	e012      	b.n	8003724 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	7819      	ldrb	r1, [r3, #0]
 8003706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	3334      	adds	r3, #52	; 0x34
 800370e:	460a      	mov	r2, r1
 8003710:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3301      	adds	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b0f      	cmp	r3, #15
 8003728:	d9e9      	bls.n	80036fe <prvInitialiseNewTask+0x4e>
 800372a:	e000      	b.n	800372e <prvInitialiseNewTask+0x7e>
		{
			break;
 800372c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	2b06      	cmp	r3, #6
 800373a:	d901      	bls.n	8003740 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800373c:	2306      	movs	r3, #6
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	2200      	movs	r2, #0
 8003750:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f879 	bl	800284e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	3318      	adds	r3, #24
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff f874 	bl	800284e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	f1c3 0207 	rsb	r2, r3, #7
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	2200      	movs	r2, #0
 8003780:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	2200      	movs	r2, #0
 8003788:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	334c      	adds	r3, #76	; 0x4c
 8003790:	2260      	movs	r2, #96	; 0x60
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fc45 	bl	8005024 <memset>
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <prvInitialiseNewTask+0x120>)
 800379e:	651a      	str	r2, [r3, #80]	; 0x50
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <prvInitialiseNewTask+0x124>)
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <prvInitialiseNewTask+0x128>)
 80037aa:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	69b8      	ldr	r0, [r7, #24]
 80037b2:	f001 f83b 	bl	800482c <pxPortInitialiseStack>
 80037b6:	4602      	mov	r2, r0
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037c8:	bf00      	nop
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	08005294 	.word	0x08005294
 80037d4:	080052b4 	.word	0x080052b4
 80037d8:	08005274 	.word	0x08005274

080037dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037e4:	f001 f912 	bl	8004a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <prvAddNewTaskToReadyList+0xb8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a29      	ldr	r2, [pc, #164]	; (8003894 <prvAddNewTaskToReadyList+0xb8>)
 80037f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037fa:	4a27      	ldr	r2, [pc, #156]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <prvAddNewTaskToReadyList+0xb8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d110      	bne.n	800382a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003808:	f000 fd06 	bl	8004218 <prvInitialiseTaskLists>
 800380c:	e00d      	b.n	800382a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800380e:	4b23      	ldr	r3, [pc, #140]	; (800389c <prvAddNewTaskToReadyList+0xc0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003816:	4b20      	ldr	r3, [pc, #128]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	429a      	cmp	r2, r3
 8003822:	d802      	bhi.n	800382a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <prvAddNewTaskToReadyList+0xc4>)
 8003832:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	2201      	movs	r2, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <prvAddNewTaskToReadyList+0xc8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <prvAddNewTaskToReadyList+0xc8>)
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <prvAddNewTaskToReadyList+0xcc>)
 8003854:	441a      	add	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7ff f802 	bl	8002866 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003862:	f001 f903 	bl	8004a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <prvAddNewTaskToReadyList+0xc0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <prvAddNewTaskToReadyList+0xbc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d207      	bcs.n	800388c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <prvAddNewTaskToReadyList+0xd0>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	2000062c 	.word	0x2000062c
 8003898:	2000052c 	.word	0x2000052c
 800389c:	20000638 	.word	0x20000638
 80038a0:	20000648 	.word	0x20000648
 80038a4:	20000634 	.word	0x20000634
 80038a8:	20000530 	.word	0x20000530
 80038ac:	e000ed04 	.word	0xe000ed04

080038b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d017      	beq.n	80038f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <vTaskDelay+0x60>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <vTaskDelay+0x30>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	60bb      	str	r3, [r7, #8]
}
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038e0:	f000 f9ae 	bl	8003c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038e4:	2100      	movs	r1, #0
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 ff3a 	bl	8004760 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038ec:	f000 f9b6 	bl	8003c5c <xTaskResumeAll>
 80038f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <vTaskDelay+0x64>)
 80038fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000654 	.word	0x20000654
 8003914:	e000ed04 	.word	0xe000ed04

08003918 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003920:	f001 f874 	bl	8004a0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <vTaskSuspend+0x18>
 800392a:	4b3c      	ldr	r3, [pc, #240]	; (8003a1c <vTaskSuspend+0x104>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	e000      	b.n	8003932 <vTaskSuspend+0x1a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3304      	adds	r3, #4
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe ffef 	bl	800291c <uxListRemove>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d115      	bne.n	8003970 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	4935      	ldr	r1, [pc, #212]	; (8003a20 <vTaskSuspend+0x108>)
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <vTaskSuspend+0x58>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43da      	mvns	r2, r3
 8003966:	4b2f      	ldr	r3, [pc, #188]	; (8003a24 <vTaskSuspend+0x10c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4013      	ands	r3, r2
 800396c:	4a2d      	ldr	r2, [pc, #180]	; (8003a24 <vTaskSuspend+0x10c>)
 800396e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3318      	adds	r3, #24
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe ffcd 	bl	800291c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3304      	adds	r3, #4
 8003986:	4619      	mov	r1, r3
 8003988:	4827      	ldr	r0, [pc, #156]	; (8003a28 <vTaskSuspend+0x110>)
 800398a:	f7fe ff6c 	bl	8002866 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d103      	bne.n	80039a2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80039a2:	f001 f863 	bl	8004a6c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80039a6:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <vTaskSuspend+0x114>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80039ae:	f001 f82d 	bl	8004a0c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80039b2:	f000 fcd3 	bl	800435c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80039b6:	f001 f859 	bl	8004a6c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <vTaskSuspend+0x104>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d127      	bne.n	8003a14 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <vTaskSuspend+0x114>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d017      	beq.n	80039fc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <vTaskSuspend+0x118>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <vTaskSuspend+0xd2>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	60bb      	str	r3, [r7, #8]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <vTaskSuspend+0x11c>)
 80039ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039fa:	e00b      	b.n	8003a14 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <vTaskSuspend+0x110>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <vTaskSuspend+0x120>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d103      	bne.n	8003a10 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <vTaskSuspend+0x104>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
	}
 8003a0e:	e001      	b.n	8003a14 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003a10:	f000 fa7e 	bl	8003f10 <vTaskSwitchContext>
	}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	2000052c 	.word	0x2000052c
 8003a20:	20000530 	.word	0x20000530
 8003a24:	20000634 	.word	0x20000634
 8003a28:	20000618 	.word	0x20000618
 8003a2c:	20000638 	.word	0x20000638
 8003a30:	20000654 	.word	0x20000654
 8003a34:	e000ed04 	.word	0xe000ed04
 8003a38:	2000062c 	.word	0x2000062c

08003a3c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	60fb      	str	r3, [r7, #12]
}
 8003a64:	bf00      	nop
 8003a66:	e7fe      	b.n	8003a66 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <prvTaskIsTaskSuspended+0x6c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <prvTaskIsTaskSuspended+0x3a>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <prvTaskIsTaskSuspended+0x3c>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00f      	beq.n	8003a9c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <prvTaskIsTaskSuspended+0x70>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00a      	beq.n	8003a9c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <prvTaskIsTaskSuspended+0x56>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <prvTaskIsTaskSuspended+0x58>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a9c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000618 	.word	0x20000618
 8003aac:	200005ec 	.word	0x200005ec

08003ab0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <vTaskResume+0x28>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	60bb      	str	r3, [r7, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	e7fe      	b.n	8003ad6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d039      	beq.n	8003b52 <vTaskResume+0xa2>
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <vTaskResume+0xac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d034      	beq.n	8003b52 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003ae8:	f000 ff90 	bl	8004a0c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff ffa5 	bl	8003a3c <prvTaskIsTaskSuspended>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02a      	beq.n	8003b4e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe ff0d 	bl	800291c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	2201      	movs	r2, #1
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <vTaskResume+0xb0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <vTaskResume+0xb0>)
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <vTaskResume+0xb4>)
 8003b22:	441a      	add	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7fe fe9b 	bl	8002866 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <vTaskResume+0xac>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d307      	bcc.n	8003b4e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <vTaskResume+0xb8>)
 8003b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003b4e:	f000 ff8d 	bl	8004a6c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000052c 	.word	0x2000052c
 8003b60:	20000634 	.word	0x20000634
 8003b64:	20000530 	.word	0x20000530
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b7a:	463a      	mov	r2, r7
 8003b7c:	1d39      	adds	r1, r7, #4
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fae4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	9202      	str	r2, [sp, #8]
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	2300      	movs	r3, #0
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	2300      	movs	r3, #0
 8003b98:	460a      	mov	r2, r1
 8003b9a:	4921      	ldr	r1, [pc, #132]	; (8003c20 <vTaskStartScheduler+0xb4>)
 8003b9c:	4821      	ldr	r0, [pc, #132]	; (8003c24 <vTaskStartScheduler+0xb8>)
 8003b9e:	f7ff fce5 	bl	800356c <xTaskCreateStatic>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4a20      	ldr	r2, [pc, #128]	; (8003c28 <vTaskStartScheduler+0xbc>)
 8003ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ba8:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <vTaskStartScheduler+0xbc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e001      	b.n	8003bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d11b      	bne.n	8003bf8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	613b      	str	r3, [r7, #16]
}
 8003bd2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bd4:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <vTaskStartScheduler+0xc0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	334c      	adds	r3, #76	; 0x4c
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <vTaskStartScheduler+0xc4>)
 8003bdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <vTaskStartScheduler+0xc8>)
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003be4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <vTaskStartScheduler+0xcc>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <vTaskStartScheduler+0xd0>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bf2:	f000 fe99 	bl	8004928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bf6:	e00e      	b.n	8003c16 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfe:	d10a      	bne.n	8003c16 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	60fb      	str	r3, [r7, #12]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <vTaskStartScheduler+0xa8>
}
 8003c16:	bf00      	nop
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	08005240 	.word	0x08005240
 8003c24:	080041e9 	.word	0x080041e9
 8003c28:	20000650 	.word	0x20000650
 8003c2c:	2000052c 	.word	0x2000052c
 8003c30:	20000014 	.word	0x20000014
 8003c34:	2000064c 	.word	0x2000064c
 8003c38:	20000638 	.word	0x20000638
 8003c3c:	20000630 	.word	0x20000630

08003c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <vTaskSuspendAll+0x18>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	4a03      	ldr	r2, [pc, #12]	; (8003c58 <vTaskSuspendAll+0x18>)
 8003c4c:	6013      	str	r3, [r2, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000654 	.word	0x20000654

08003c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <xTaskResumeAll+0x114>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	603b      	str	r3, [r7, #0]
}
 8003c84:	bf00      	nop
 8003c86:	e7fe      	b.n	8003c86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c88:	f000 fec0 	bl	8004a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c8c:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <xTaskResumeAll+0x114>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	4a37      	ldr	r2, [pc, #220]	; (8003d70 <xTaskResumeAll+0x114>)
 8003c94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <xTaskResumeAll+0x114>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d161      	bne.n	8003d62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c9e:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <xTaskResumeAll+0x118>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d05d      	beq.n	8003d62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca6:	e02e      	b.n	8003d06 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ca8:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <xTaskResumeAll+0x11c>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fe31 	bl	800291c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fe2c 	bl	800291c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	2201      	movs	r2, #1
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <xTaskResumeAll+0x120>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	4a2a      	ldr	r2, [pc, #168]	; (8003d7c <xTaskResumeAll+0x120>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <xTaskResumeAll+0x124>)
 8003ce4:	441a      	add	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7fe fdba 	bl	8002866 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <xTaskResumeAll+0x128>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d302      	bcc.n	8003d06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003d00:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <xTaskResumeAll+0x12c>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <xTaskResumeAll+0x11c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1cc      	bne.n	8003ca8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d14:	f000 fb22 	bl	800435c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <xTaskResumeAll+0x130>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d24:	f000 f836 	bl	8003d94 <xTaskIncrementTick>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <xTaskResumeAll+0x12c>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f1      	bne.n	8003d24 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003d40:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <xTaskResumeAll+0x130>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <xTaskResumeAll+0x12c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <xTaskResumeAll+0x134>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d62:	f000 fe83 	bl	8004a6c <vPortExitCritical>

	return xAlreadyYielded;
 8003d66:	68bb      	ldr	r3, [r7, #8]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000654 	.word	0x20000654
 8003d74:	2000062c 	.word	0x2000062c
 8003d78:	200005ec 	.word	0x200005ec
 8003d7c:	20000634 	.word	0x20000634
 8003d80:	20000530 	.word	0x20000530
 8003d84:	2000052c 	.word	0x2000052c
 8003d88:	20000640 	.word	0x20000640
 8003d8c:	2000063c 	.word	0x2000063c
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9e:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <xTaskIncrementTick+0x150>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 808d 	bne.w	8003ec2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003da8:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <xTaskIncrementTick+0x154>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003db0:	4a4d      	ldr	r2, [pc, #308]	; (8003ee8 <xTaskIncrementTick+0x154>)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d120      	bne.n	8003dfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <xTaskIncrementTick+0x158>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <xTaskIncrementTick+0x48>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	603b      	str	r3, [r7, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xTaskIncrementTick+0x46>
 8003ddc:	4b43      	ldr	r3, [pc, #268]	; (8003eec <xTaskIncrementTick+0x158>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b43      	ldr	r3, [pc, #268]	; (8003ef0 <xTaskIncrementTick+0x15c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a41      	ldr	r2, [pc, #260]	; (8003eec <xTaskIncrementTick+0x158>)
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4a41      	ldr	r2, [pc, #260]	; (8003ef0 <xTaskIncrementTick+0x15c>)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	4b40      	ldr	r3, [pc, #256]	; (8003ef4 <xTaskIncrementTick+0x160>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a3f      	ldr	r2, [pc, #252]	; (8003ef4 <xTaskIncrementTick+0x160>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	f000 faaf 	bl	800435c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dfe:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <xTaskIncrementTick+0x164>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d34d      	bcc.n	8003ea4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e08:	4b38      	ldr	r3, [pc, #224]	; (8003eec <xTaskIncrementTick+0x158>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <xTaskIncrementTick+0x82>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <xTaskIncrementTick+0x84>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d004      	beq.n	8003e26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <xTaskIncrementTick+0x164>)
 8003e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e22:	601a      	str	r2, [r3, #0]
					break;
 8003e24:	e03e      	b.n	8003ea4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e26:	4b31      	ldr	r3, [pc, #196]	; (8003eec <xTaskIncrementTick+0x158>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d203      	bcs.n	8003e46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ef8 <xTaskIncrementTick+0x164>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6013      	str	r3, [r2, #0]
						break;
 8003e44:	e02e      	b.n	8003ea4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fd66 	bl	800291c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fd5d 	bl	800291c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	2201      	movs	r2, #1
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	4b24      	ldr	r3, [pc, #144]	; (8003efc <xTaskIncrementTick+0x168>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	4a22      	ldr	r2, [pc, #136]	; (8003efc <xTaskIncrementTick+0x168>)
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <xTaskIncrementTick+0x16c>)
 8003e82:	441a      	add	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7fe fceb 	bl	8002866 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <xTaskIncrementTick+0x170>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3b4      	bcc.n	8003e08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea2:	e7b1      	b.n	8003e08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ea4:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <xTaskIncrementTick+0x170>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	4915      	ldr	r1, [pc, #84]	; (8003f00 <xTaskIncrementTick+0x16c>)
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d907      	bls.n	8003ecc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e004      	b.n	8003ecc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <xTaskIncrementTick+0x174>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <xTaskIncrementTick+0x174>)
 8003eca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <xTaskIncrementTick+0x178>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ed8:	697b      	ldr	r3, [r7, #20]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000654 	.word	0x20000654
 8003ee8:	20000630 	.word	0x20000630
 8003eec:	200005e4 	.word	0x200005e4
 8003ef0:	200005e8 	.word	0x200005e8
 8003ef4:	20000644 	.word	0x20000644
 8003ef8:	2000064c 	.word	0x2000064c
 8003efc:	20000634 	.word	0x20000634
 8003f00:	20000530 	.word	0x20000530
 8003f04:	2000052c 	.word	0x2000052c
 8003f08:	2000063c 	.word	0x2000063c
 8003f0c:	20000640 	.word	0x20000640

08003f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f16:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <vTaskSwitchContext+0xac>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f1e:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <vTaskSwitchContext+0xb0>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f24:	e044      	b.n	8003fb0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <vTaskSwitchContext+0xb0>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <vTaskSwitchContext+0xb4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	f1c3 031f 	rsb	r3, r3, #31
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	4921      	ldr	r1, [pc, #132]	; (8003fc8 <vTaskSwitchContext+0xb8>)
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	607b      	str	r3, [r7, #4]
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <vTaskSwitchContext+0x5a>
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <vTaskSwitchContext+0xb8>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d104      	bne.n	8003f9c <vTaskSwitchContext+0x8c>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <vTaskSwitchContext+0xbc>)
 8003fa4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <vTaskSwitchContext+0xbc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	334c      	adds	r3, #76	; 0x4c
 8003fac:	4a08      	ldr	r2, [pc, #32]	; (8003fd0 <vTaskSwitchContext+0xc0>)
 8003fae:	6013      	str	r3, [r2, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000654 	.word	0x20000654
 8003fc0:	20000640 	.word	0x20000640
 8003fc4:	20000634 	.word	0x20000634
 8003fc8:	20000530 	.word	0x20000530
 8003fcc:	2000052c 	.word	0x2000052c
 8003fd0:	20000014 	.word	0x20000014

08003fd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <vTaskPlaceOnEventList+0x44>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3318      	adds	r3, #24
 8004000:	4619      	mov	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fe fc52 	bl	80028ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004008:	2101      	movs	r1, #1
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	f000 fba8 	bl	8004760 <prvAddCurrentTaskToDelayedList>
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	2000052c 	.word	0x2000052c

0800401c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	60fb      	str	r3, [r7, #12]
}
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	3318      	adds	r3, #24
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fc65 	bl	800291c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004052:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <xTaskRemoveFromEventList+0xac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d11c      	bne.n	8004094 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fc5c 	bl	800291c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2201      	movs	r2, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <xTaskRemoveFromEventList+0xb0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	4a16      	ldr	r2, [pc, #88]	; (80040cc <xTaskRemoveFromEventList+0xb0>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <xTaskRemoveFromEventList+0xb4>)
 8004084:	441a      	add	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fe fbea 	bl	8002866 <vListInsertEnd>
 8004092:	e005      	b.n	80040a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	3318      	adds	r3, #24
 8004098:	4619      	mov	r1, r3
 800409a:	480e      	ldr	r0, [pc, #56]	; (80040d4 <xTaskRemoveFromEventList+0xb8>)
 800409c:	f7fe fbe3 	bl	8002866 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <xTaskRemoveFromEventList+0xbc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d905      	bls.n	80040ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <xTaskRemoveFromEventList+0xc0>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e001      	b.n	80040be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80040be:	697b      	ldr	r3, [r7, #20]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000654 	.word	0x20000654
 80040cc:	20000634 	.word	0x20000634
 80040d0:	20000530 	.word	0x20000530
 80040d4:	200005ec 	.word	0x200005ec
 80040d8:	2000052c 	.word	0x2000052c
 80040dc:	20000640 	.word	0x20000640

080040e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <vTaskInternalSetTimeOutState+0x24>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <vTaskInternalSetTimeOutState+0x28>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	605a      	str	r2, [r3, #4]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000644 	.word	0x20000644
 8004108:	20000630 	.word	0x20000630

0800410c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	613b      	str	r3, [r7, #16]
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60fb      	str	r3, [r7, #12]
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800414e:	f000 fc5d 	bl	8004a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <xTaskCheckForTimeOut+0xbc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800416a:	d102      	bne.n	8004172 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	e023      	b.n	80041ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <xTaskCheckForTimeOut+0xc0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d007      	beq.n	800418e <xTaskCheckForTimeOut+0x82>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	429a      	cmp	r2, r3
 8004186:	d302      	bcc.n	800418e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004188:	2301      	movs	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e015      	b.n	80041ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	429a      	cmp	r2, r3
 8004196:	d20b      	bcs.n	80041b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	1ad2      	subs	r2, r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff9b 	bl	80040e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e004      	b.n	80041ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041b6:	2301      	movs	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041ba:	f000 fc57 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 80041be:	69fb      	ldr	r3, [r7, #28]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000630 	.word	0x20000630
 80041cc:	20000644 	.word	0x20000644

080041d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <vTaskMissedYield+0x14>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000640 	.word	0x20000640

080041e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041f0:	f000 f852 	bl	8004298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <prvIdleTask+0x28>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d9f9      	bls.n	80041f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <prvIdleTask+0x2c>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800420c:	e7f0      	b.n	80041f0 <prvIdleTask+0x8>
 800420e:	bf00      	nop
 8004210:	20000530 	.word	0x20000530
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	e00c      	b.n	800423e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <prvInitialiseTaskLists+0x60>)
 8004230:	4413      	add	r3, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe faec 	bl	8002810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3301      	adds	r3, #1
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b06      	cmp	r3, #6
 8004242:	d9ef      	bls.n	8004224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004244:	480d      	ldr	r0, [pc, #52]	; (800427c <prvInitialiseTaskLists+0x64>)
 8004246:	f7fe fae3 	bl	8002810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800424a:	480d      	ldr	r0, [pc, #52]	; (8004280 <prvInitialiseTaskLists+0x68>)
 800424c:	f7fe fae0 	bl	8002810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004250:	480c      	ldr	r0, [pc, #48]	; (8004284 <prvInitialiseTaskLists+0x6c>)
 8004252:	f7fe fadd 	bl	8002810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004256:	480c      	ldr	r0, [pc, #48]	; (8004288 <prvInitialiseTaskLists+0x70>)
 8004258:	f7fe fada 	bl	8002810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800425c:	480b      	ldr	r0, [pc, #44]	; (800428c <prvInitialiseTaskLists+0x74>)
 800425e:	f7fe fad7 	bl	8002810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <prvInitialiseTaskLists+0x78>)
 8004264:	4a05      	ldr	r2, [pc, #20]	; (800427c <prvInitialiseTaskLists+0x64>)
 8004266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <prvInitialiseTaskLists+0x7c>)
 800426a:	4a05      	ldr	r2, [pc, #20]	; (8004280 <prvInitialiseTaskLists+0x68>)
 800426c:	601a      	str	r2, [r3, #0]
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000530 	.word	0x20000530
 800427c:	200005bc 	.word	0x200005bc
 8004280:	200005d0 	.word	0x200005d0
 8004284:	200005ec 	.word	0x200005ec
 8004288:	20000600 	.word	0x20000600
 800428c:	20000618 	.word	0x20000618
 8004290:	200005e4 	.word	0x200005e4
 8004294:	200005e8 	.word	0x200005e8

08004298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800429e:	e019      	b.n	80042d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042a0:	f000 fbb4 	bl	8004a0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042a4:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <prvCheckTasksWaitingTermination+0x50>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fb33 	bl	800291c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <prvCheckTasksWaitingTermination+0x54>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	4a0b      	ldr	r2, [pc, #44]	; (80042ec <prvCheckTasksWaitingTermination+0x54>)
 80042be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <prvCheckTasksWaitingTermination+0x58>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	4a0a      	ldr	r2, [pc, #40]	; (80042f0 <prvCheckTasksWaitingTermination+0x58>)
 80042c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ca:	f000 fbcf 	bl	8004a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f810 	bl	80042f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <prvCheckTasksWaitingTermination+0x58>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e1      	bne.n	80042a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000600 	.word	0x20000600
 80042ec:	2000062c 	.word	0x2000062c
 80042f0:	20000614 	.word	0x20000614

080042f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	334c      	adds	r3, #76	; 0x4c
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fea5 	bl	8005050 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fd3d 	bl	8004d94 <vPortFree>
				vPortFree( pxTCB );
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fd3a 	bl	8004d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004320:	e018      	b.n	8004354 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004328:	2b01      	cmp	r3, #1
 800432a:	d103      	bne.n	8004334 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fd31 	bl	8004d94 <vPortFree>
	}
 8004332:	e00f      	b.n	8004354 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800433a:	2b02      	cmp	r3, #2
 800433c:	d00a      	beq.n	8004354 <prvDeleteTCB+0x60>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	60fb      	str	r3, [r7, #12]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <prvDeleteTCB+0x5e>
	}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004362:	4b0e      	ldr	r3, [pc, #56]	; (800439c <prvResetNextTaskUnblockTime+0x40>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <prvResetNextTaskUnblockTime+0x14>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <prvResetNextTaskUnblockTime+0x16>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <prvResetNextTaskUnblockTime+0x44>)
 8004378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800437c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800437e:	e008      	b.n	8004392 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <prvResetNextTaskUnblockTime+0x40>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4a04      	ldr	r2, [pc, #16]	; (80043a0 <prvResetNextTaskUnblockTime+0x44>)
 8004390:	6013      	str	r3, [r2, #0]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	200005e4 	.word	0x200005e4
 80043a0:	2000064c 	.word	0x2000064c

080043a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <xTaskGetSchedulerState+0x34>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043b2:	2301      	movs	r3, #1
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	e008      	b.n	80043ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <xTaskGetSchedulerState+0x38>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043c0:	2302      	movs	r3, #2
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	e001      	b.n	80043ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043ca:	687b      	ldr	r3, [r7, #4]
	}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000638 	.word	0x20000638
 80043dc:	20000654 	.word	0x20000654

080043e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d06e      	beq.n	80044d4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <xTaskPriorityInherit+0x100>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	429a      	cmp	r2, r3
 8004402:	d25e      	bcs.n	80044c2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	db06      	blt.n	800441a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440c:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <xTaskPriorityInherit+0x100>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f1c3 0207 	rsb	r2, r3, #7
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6959      	ldr	r1, [r3, #20]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a2e      	ldr	r2, [pc, #184]	; (80044e4 <xTaskPriorityInherit+0x104>)
 800442c:	4413      	add	r3, r2
 800442e:	4299      	cmp	r1, r3
 8004430:	d101      	bne.n	8004436 <xTaskPriorityInherit+0x56>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <xTaskPriorityInherit+0x58>
 8004436:	2300      	movs	r3, #0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d03a      	beq.n	80044b2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe fa6b 	bl	800291c <uxListRemove>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d115      	bne.n	8004478 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4924      	ldr	r1, [pc, #144]	; (80044e4 <xTaskPriorityInherit+0x104>)
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <xTaskPriorityInherit+0x98>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	2201      	movs	r2, #1
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43da      	mvns	r2, r3
 800446e:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <xTaskPriorityInherit+0x108>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4013      	ands	r3, r2
 8004474:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <xTaskPriorityInherit+0x108>)
 8004476:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004478:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <xTaskPriorityInherit+0x100>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	2201      	movs	r2, #1
 8004488:	409a      	lsls	r2, r3
 800448a:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <xTaskPriorityInherit+0x108>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4313      	orrs	r3, r2
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <xTaskPriorityInherit+0x108>)
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <xTaskPriorityInherit+0x104>)
 80044a2:	441a      	add	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f7fe f9db 	bl	8002866 <vListInsertEnd>
 80044b0:	e004      	b.n	80044bc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <xTaskPriorityInherit+0x100>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e008      	b.n	80044d4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <xTaskPriorityInherit+0x100>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d201      	bcs.n	80044d4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044d4:	68fb      	ldr	r3, [r7, #12]
	}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	2000052c 	.word	0x2000052c
 80044e4:	20000530 	.word	0x20000530
 80044e8:	20000634 	.word	0x20000634

080044ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d06e      	beq.n	80045e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004502:	4b3a      	ldr	r3, [pc, #232]	; (80045ec <xTaskPriorityDisinherit+0x100>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	429a      	cmp	r2, r3
 800450a:	d00a      	beq.n	8004522 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	60fb      	str	r3, [r7, #12]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60bb      	str	r3, [r7, #8]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	1e5a      	subs	r2, r3, #1
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	429a      	cmp	r2, r3
 8004554:	d044      	beq.n	80045e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	2b00      	cmp	r3, #0
 800455c:	d140      	bne.n	80045e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3304      	adds	r3, #4
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe f9da 	bl	800291c <uxListRemove>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d115      	bne.n	800459a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	491f      	ldr	r1, [pc, #124]	; (80045f0 <xTaskPriorityDisinherit+0x104>)
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <xTaskPriorityDisinherit+0xae>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2201      	movs	r2, #1
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43da      	mvns	r2, r3
 8004590:	4b18      	ldr	r3, [pc, #96]	; (80045f4 <xTaskPriorityDisinherit+0x108>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4013      	ands	r3, r2
 8004596:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <xTaskPriorityDisinherit+0x108>)
 8004598:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	f1c3 0207 	rsb	r2, r3, #7
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	2201      	movs	r2, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <xTaskPriorityDisinherit+0x108>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	4a0d      	ldr	r2, [pc, #52]	; (80045f4 <xTaskPriorityDisinherit+0x108>)
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <xTaskPriorityDisinherit+0x104>)
 80045ce:	441a      	add	r2, r3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7fe f945 	bl	8002866 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045e0:	697b      	ldr	r3, [r7, #20]
	}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000052c 	.word	0x2000052c
 80045f0:	20000530 	.word	0x20000530
 80045f4:	20000634 	.word	0x20000634

080045f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004606:	2301      	movs	r3, #1
 8004608:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8088 	beq.w	8004722 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	60fb      	str	r3, [r7, #12]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d902      	bls.n	8004640 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	e002      	b.n	8004646 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	429a      	cmp	r2, r3
 800464e:	d068      	beq.n	8004722 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	429a      	cmp	r2, r3
 8004658:	d163      	bne.n	8004722 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	429a      	cmp	r2, r3
 8004662:	d10a      	bne.n	800467a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	60bb      	str	r3, [r7, #8]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	db04      	blt.n	8004698 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f1c3 0207 	rsb	r2, r3, #7
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	6959      	ldr	r1, [r3, #20]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4a22      	ldr	r2, [pc, #136]	; (8004730 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80046a8:	4413      	add	r3, r2
 80046aa:	4299      	cmp	r1, r3
 80046ac:	d101      	bne.n	80046b2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d034      	beq.n	8004722 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe f92d 	bl	800291c <uxListRemove>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d115      	bne.n	80046f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046cc:	4918      	ldr	r1, [pc, #96]	; (8004730 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	2201      	movs	r2, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43da      	mvns	r2, r3
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4013      	ands	r3, r2
 80046f0:	4a10      	ldr	r2, [pc, #64]	; (8004734 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80046f2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	2201      	movs	r2, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4313      	orrs	r3, r2
 8004702:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4a07      	ldr	r2, [pc, #28]	; (8004730 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004714:	441a      	add	r2, r3
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	3304      	adds	r3, #4
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f7fe f8a2 	bl	8002866 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004722:	bf00      	nop
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	2000052c 	.word	0x2000052c
 8004730:	20000530 	.word	0x20000530
 8004734:	20000634 	.word	0x20000634

08004738 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800473c:	4b07      	ldr	r3, [pc, #28]	; (800475c <pvTaskIncrementMutexHeldCount+0x24>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <pvTaskIncrementMutexHeldCount+0x24>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800474a:	3201      	adds	r2, #1
 800474c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800474e:	4b03      	ldr	r3, [pc, #12]	; (800475c <pvTaskIncrementMutexHeldCount+0x24>)
 8004750:	681b      	ldr	r3, [r3, #0]
	}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	2000052c 	.word	0x2000052c

08004760 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800476a:	4b29      	ldr	r3, [pc, #164]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004770:	4b28      	ldr	r3, [pc, #160]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3304      	adds	r3, #4
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe f8d0 	bl	800291c <uxListRemove>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	2201      	movs	r2, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43da      	mvns	r2, r3
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4013      	ands	r3, r2
 8004796:	4a20      	ldr	r2, [pc, #128]	; (8004818 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004798:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a0:	d10a      	bne.n	80047b8 <prvAddCurrentTaskToDelayedList+0x58>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	481a      	ldr	r0, [pc, #104]	; (800481c <prvAddCurrentTaskToDelayedList+0xbc>)
 80047b2:	f7fe f858 	bl	8002866 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047b6:	e026      	b.n	8004806 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047c0:	4b14      	ldr	r3, [pc, #80]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d209      	bcs.n	80047e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe f865 	bl	80028ac <vListInsert>
}
 80047e2:	e010      	b.n	8004806 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f7fe f85b 	bl	80028ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047f6:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d202      	bcs.n	8004806 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6013      	str	r3, [r2, #0]
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000630 	.word	0x20000630
 8004814:	2000052c 	.word	0x2000052c
 8004818:	20000634 	.word	0x20000634
 800481c:	20000618 	.word	0x20000618
 8004820:	200005e8 	.word	0x200005e8
 8004824:	200005e4 	.word	0x200005e4
 8004828:	2000064c 	.word	0x2000064c

0800482c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3b04      	subs	r3, #4
 800483c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3b04      	subs	r3, #4
 800484a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0201 	bic.w	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b04      	subs	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800485c:	4a08      	ldr	r2, [pc, #32]	; (8004880 <pxPortInitialiseStack+0x54>)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3b14      	subs	r3, #20
 8004866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b20      	subs	r3, #32
 8004872:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004874:	68fb      	ldr	r3, [r7, #12]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	08004885 	.word	0x08004885

08004884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <prvTaskExitError+0x54>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004896:	d00a      	beq.n	80048ae <prvTaskExitError+0x2a>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60fb      	str	r3, [r7, #12]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <prvTaskExitError+0x28>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60bb      	str	r3, [r7, #8]
}
 80048c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048c2:	bf00      	nop
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0fc      	beq.n	80048c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048ca:	bf00      	nop
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000010 	.word	0x20000010
 80048dc:	00000000 	.word	0x00000000

080048e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <pxCurrentTCBConst2>)
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	6808      	ldr	r0, [r1, #0]
 80048e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048ea:	f380 8809 	msr	PSP, r0
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8811 	msr	BASEPRI, r0
 80048fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80048fe:	4770      	bx	lr

08004900 <pxCurrentTCBConst2>:
 8004900:	2000052c 	.word	0x2000052c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004908:	4806      	ldr	r0, [pc, #24]	; (8004924 <prvPortStartFirstTask+0x1c>)
 800490a:	6800      	ldr	r0, [r0, #0]
 800490c:	6800      	ldr	r0, [r0, #0]
 800490e:	f380 8808 	msr	MSP, r0
 8004912:	b662      	cpsie	i
 8004914:	b661      	cpsie	f
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	df00      	svc	0
 8004920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004922:	bf00      	nop
 8004924:	e000ed08 	.word	0xe000ed08

08004928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <xPortStartScheduler+0xd0>)
 8004930:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	22ff      	movs	r2, #255	; 0xff
 800493e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <xPortStartScheduler+0xd4>)
 8004954:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004956:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004958:	2207      	movs	r2, #7
 800495a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495c:	e009      	b.n	8004972 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004966:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d0ef      	beq.n	800495e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b04      	cmp	r3, #4
 8004988:	d00a      	beq.n	80049a0 <xPortStartScheduler+0x78>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049b2:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049d6:	f000 f8b9 	bl	8004b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <xPortStartScheduler+0xe0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049e0:	f7ff ff92 	bl	8004908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049e4:	f7ff fa94 	bl	8003f10 <vTaskSwitchContext>
	prvTaskExitError();
 80049e8:	f7ff ff4c 	bl	8004884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	e000e400 	.word	0xe000e400
 80049fc:	20000658 	.word	0x20000658
 8004a00:	2000065c 	.word	0x2000065c
 8004a04:	e000ed20 	.word	0xe000ed20
 8004a08:	20000010 	.word	0x20000010

08004a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	607b      	str	r3, [r7, #4]
}
 8004a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10f      	bne.n	8004a58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <vPortEnterCritical+0x5c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	603b      	str	r3, [r7, #0]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vPortEnterCritical+0x4a>
	}
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000010 	.word	0x20000010
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <vPortExitCritical+0x24>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	607b      	str	r3, [r7, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <vPortExitCritical+0x42>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f383 8811 	msr	BASEPRI, r3
}
 8004aac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	20000010 	.word	0x20000010
 8004abc:	00000000 	.word	0x00000000

08004ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ac0:	f3ef 8009 	mrs	r0, PSP
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <pxCurrentTCBConst>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ad0:	6010      	str	r0, [r2, #0]
 8004ad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ad6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ada:	f380 8811 	msr	BASEPRI, r0
 8004ade:	f7ff fa17 	bl	8003f10 <vTaskSwitchContext>
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8811 	msr	BASEPRI, r0
 8004aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	6808      	ldr	r0, [r1, #0]
 8004af2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004af6:	f380 8809 	msr	PSP, r0
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	4770      	bx	lr

08004b00 <pxCurrentTCBConst>:
 8004b00:	2000052c 	.word	0x2000052c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop

08004b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	607b      	str	r3, [r7, #4]
}
 8004b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b22:	f7ff f937 	bl	8003d94 <xTaskIncrementTick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <xPortSysTickHandler+0x40>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <vPortSetupTimerInterrupt+0x30>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <vPortSetupTimerInterrupt+0x38>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <vPortSetupTimerInterrupt+0x3c>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <vPortSetupTimerInterrupt+0x40>)
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b6e:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <vPortSetupTimerInterrupt+0x30>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e010 	.word	0xe000e010
 8004b80:	e000e018 	.word	0xe000e018
 8004b84:	20000004 	.word	0x20000004
 8004b88:	10624dd3 	.word	0x10624dd3
 8004b8c:	e000e014 	.word	0xe000e014

08004b90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b96:	f3ef 8305 	mrs	r3, IPSR
 8004b9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d914      	bls.n	8004bcc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <vPortValidateInterruptPriority+0x6c>)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <vPortValidateInterruptPriority+0x70>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	7afa      	ldrb	r2, [r7, #11]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d20a      	bcs.n	8004bcc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	607b      	str	r3, [r7, #4]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <vPortValidateInterruptPriority+0x74>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <vPortValidateInterruptPriority+0x78>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d90a      	bls.n	8004bf2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	603b      	str	r3, [r7, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <vPortValidateInterruptPriority+0x60>
	}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	e000e3f0 	.word	0xe000e3f0
 8004c00:	20000658 	.word	0x20000658
 8004c04:	e000ed0c 	.word	0xe000ed0c
 8004c08:	2000065c 	.word	0x2000065c

08004c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c18:	f7ff f812 	bl	8003c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c1c:	4b58      	ldr	r3, [pc, #352]	; (8004d80 <pvPortMalloc+0x174>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c24:	f000 f910 	bl	8004e48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c28:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <pvPortMalloc+0x178>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f040 808e 	bne.w	8004d52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01d      	beq.n	8004c78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f023 0307 	bic.w	r3, r3, #7
 8004c54:	3308      	adds	r3, #8
 8004c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <pvPortMalloc+0x6c>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	617b      	str	r3, [r7, #20]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d069      	beq.n	8004d52 <pvPortMalloc+0x146>
 8004c7e:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <pvPortMalloc+0x17c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d864      	bhi.n	8004d52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c88:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <pvPortMalloc+0x180>)
 8004c8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c8c:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <pvPortMalloc+0x180>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c92:	e004      	b.n	8004c9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d903      	bls.n	8004cb0 <pvPortMalloc+0xa4>
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f1      	bne.n	8004c94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cb0:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <pvPortMalloc+0x174>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d04b      	beq.n	8004d52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	4413      	add	r3, r2
 8004cc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d91f      	bls.n	8004d1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <pvPortMalloc+0xf8>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	613b      	str	r3, [r7, #16]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d16:	69b8      	ldr	r0, [r7, #24]
 8004d18:	f000 f8f8 	bl	8004f0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d2a:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <pvPortMalloc+0x184>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d203      	bcs.n	8004d3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <pvPortMalloc+0x184>)
 8004d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <pvPortMalloc+0x178>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d52:	f7fe ff83 	bl	8003c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <pvPortMalloc+0x16a>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <pvPortMalloc+0x168>
	return pvReturn;
 8004d76:	69fb      	ldr	r3, [r7, #28]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	200019f0 	.word	0x200019f0
 8004d84:	200019fc 	.word	0x200019fc
 8004d88:	200019f4 	.word	0x200019f4
 8004d8c:	200019e8 	.word	0x200019e8
 8004d90:	200019f8 	.word	0x200019f8

08004d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d048      	beq.n	8004e38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004da6:	2308      	movs	r3, #8
 8004da8:	425b      	negs	r3, r3
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <vPortFree+0xac>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <vPortFree+0x44>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60fb      	str	r3, [r7, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <vPortFree+0x62>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60bb      	str	r3, [r7, #8]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <vPortFree+0xac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d019      	beq.n	8004e38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d115      	bne.n	8004e38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <vPortFree+0xac>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	401a      	ands	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e1c:	f7fe ff10 	bl	8003c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <vPortFree+0xb0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <vPortFree+0xb0>)
 8004e2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e2e:	6938      	ldr	r0, [r7, #16]
 8004e30:	f000 f86c 	bl	8004f0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e34:	f7fe ff12 	bl	8003c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	200019fc 	.word	0x200019fc
 8004e44:	200019f4 	.word	0x200019f4

08004e48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <prvHeapInit+0xac>)
 8004e56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3307      	adds	r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <prvHeapInit+0xac>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <prvHeapInit+0xb0>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <prvHeapInit+0xb0>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	4413      	add	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e94:	2208      	movs	r2, #8
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <prvHeapInit+0xb4>)
 8004ea8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004eaa:	4b14      	ldr	r3, [pc, #80]	; (8004efc <prvHeapInit+0xb4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <prvHeapInit+0xb4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	1ad2      	subs	r2, r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <prvHeapInit+0xb4>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <prvHeapInit+0xb8>)
 8004ed6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <prvHeapInit+0xbc>)
 8004ede:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <prvHeapInit+0xc0>)
 8004ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ee6:	601a      	str	r2, [r3, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000660 	.word	0x20000660
 8004ef8:	200019e8 	.word	0x200019e8
 8004efc:	200019f0 	.word	0x200019f0
 8004f00:	200019f8 	.word	0x200019f8
 8004f04:	200019f4 	.word	0x200019f4
 8004f08:	200019fc 	.word	0x200019fc

08004f0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f14:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <prvInsertBlockIntoFreeList+0xa8>)
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e002      	b.n	8004f20 <prvInsertBlockIntoFreeList+0x14>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d8f7      	bhi.n	8004f1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4413      	add	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d108      	bne.n	8004f4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d118      	bne.n	8004f94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvInsertBlockIntoFreeList+0xac>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d00d      	beq.n	8004f8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	441a      	add	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e008      	b.n	8004f9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <prvInsertBlockIntoFreeList+0xac>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e003      	b.n	8004f9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d002      	beq.n	8004faa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	200019e8 	.word	0x200019e8
 8004fb8:	200019f0 	.word	0x200019f0

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	4d0c      	ldr	r5, [pc, #48]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc2:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	f000 f8f0 	bl	80051b0 <_init>
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	4d0a      	ldr	r5, [pc, #40]	; (8004ffc <__libc_init_array+0x40>)
 8004fd4:	4c0a      	ldr	r4, [pc, #40]	; (8005000 <__libc_init_array+0x44>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	080052d4 	.word	0x080052d4
 8004ff8:	080052d4 	.word	0x080052d4
 8004ffc:	080052d4 	.word	0x080052d4
 8005000:	080052d8 	.word	0x080052d8

08005004 <__retarget_lock_acquire_recursive>:
 8005004:	4770      	bx	lr

08005006 <__retarget_lock_release_recursive>:
 8005006:	4770      	bx	lr

08005008 <memcpy>:
 8005008:	440a      	add	r2, r1
 800500a:	4291      	cmp	r1, r2
 800500c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005010:	d100      	bne.n	8005014 <memcpy+0xc>
 8005012:	4770      	bx	lr
 8005014:	b510      	push	{r4, lr}
 8005016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800501a:	4291      	cmp	r1, r2
 800501c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005020:	d1f9      	bne.n	8005016 <memcpy+0xe>
 8005022:	bd10      	pop	{r4, pc}

08005024 <memset>:
 8005024:	4603      	mov	r3, r0
 8005026:	4402      	add	r2, r0
 8005028:	4293      	cmp	r3, r2
 800502a:	d100      	bne.n	800502e <memset+0xa>
 800502c:	4770      	bx	lr
 800502e:	f803 1b01 	strb.w	r1, [r3], #1
 8005032:	e7f9      	b.n	8005028 <memset+0x4>

08005034 <cleanup_glue>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	460c      	mov	r4, r1
 8005038:	6809      	ldr	r1, [r1, #0]
 800503a:	4605      	mov	r5, r0
 800503c:	b109      	cbz	r1, 8005042 <cleanup_glue+0xe>
 800503e:	f7ff fff9 	bl	8005034 <cleanup_glue>
 8005042:	4621      	mov	r1, r4
 8005044:	4628      	mov	r0, r5
 8005046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800504a:	f000 b869 	b.w	8005120 <_free_r>
	...

08005050 <_reclaim_reent>:
 8005050:	4b2c      	ldr	r3, [pc, #176]	; (8005104 <_reclaim_reent+0xb4>)
 8005052:	b570      	push	{r4, r5, r6, lr}
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4604      	mov	r4, r0
 8005058:	4283      	cmp	r3, r0
 800505a:	d051      	beq.n	8005100 <_reclaim_reent+0xb0>
 800505c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800505e:	b143      	cbz	r3, 8005072 <_reclaim_reent+0x22>
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d14a      	bne.n	80050fc <_reclaim_reent+0xac>
 8005066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	b111      	cbz	r1, 8005072 <_reclaim_reent+0x22>
 800506c:	4620      	mov	r0, r4
 800506e:	f000 f857 	bl	8005120 <_free_r>
 8005072:	6961      	ldr	r1, [r4, #20]
 8005074:	b111      	cbz	r1, 800507c <_reclaim_reent+0x2c>
 8005076:	4620      	mov	r0, r4
 8005078:	f000 f852 	bl	8005120 <_free_r>
 800507c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800507e:	b111      	cbz	r1, 8005086 <_reclaim_reent+0x36>
 8005080:	4620      	mov	r0, r4
 8005082:	f000 f84d 	bl	8005120 <_free_r>
 8005086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005088:	b111      	cbz	r1, 8005090 <_reclaim_reent+0x40>
 800508a:	4620      	mov	r0, r4
 800508c:	f000 f848 	bl	8005120 <_free_r>
 8005090:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005092:	b111      	cbz	r1, 800509a <_reclaim_reent+0x4a>
 8005094:	4620      	mov	r0, r4
 8005096:	f000 f843 	bl	8005120 <_free_r>
 800509a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800509c:	b111      	cbz	r1, 80050a4 <_reclaim_reent+0x54>
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 f83e 	bl	8005120 <_free_r>
 80050a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80050a6:	b111      	cbz	r1, 80050ae <_reclaim_reent+0x5e>
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 f839 	bl	8005120 <_free_r>
 80050ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80050b0:	b111      	cbz	r1, 80050b8 <_reclaim_reent+0x68>
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f834 	bl	8005120 <_free_r>
 80050b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ba:	b111      	cbz	r1, 80050c2 <_reclaim_reent+0x72>
 80050bc:	4620      	mov	r0, r4
 80050be:	f000 f82f 	bl	8005120 <_free_r>
 80050c2:	69a3      	ldr	r3, [r4, #24]
 80050c4:	b1e3      	cbz	r3, 8005100 <_reclaim_reent+0xb0>
 80050c6:	4620      	mov	r0, r4
 80050c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050ca:	4798      	blx	r3
 80050cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80050ce:	b1b9      	cbz	r1, 8005100 <_reclaim_reent+0xb0>
 80050d0:	4620      	mov	r0, r4
 80050d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050d6:	f7ff bfad 	b.w	8005034 <cleanup_glue>
 80050da:	5949      	ldr	r1, [r1, r5]
 80050dc:	b941      	cbnz	r1, 80050f0 <_reclaim_reent+0xa0>
 80050de:	3504      	adds	r5, #4
 80050e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e2:	2d80      	cmp	r5, #128	; 0x80
 80050e4:	68d9      	ldr	r1, [r3, #12]
 80050e6:	d1f8      	bne.n	80050da <_reclaim_reent+0x8a>
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 f819 	bl	8005120 <_free_r>
 80050ee:	e7ba      	b.n	8005066 <_reclaim_reent+0x16>
 80050f0:	680e      	ldr	r6, [r1, #0]
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 f814 	bl	8005120 <_free_r>
 80050f8:	4631      	mov	r1, r6
 80050fa:	e7ef      	b.n	80050dc <_reclaim_reent+0x8c>
 80050fc:	2500      	movs	r5, #0
 80050fe:	e7ef      	b.n	80050e0 <_reclaim_reent+0x90>
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	bf00      	nop
 8005104:	20000014 	.word	0x20000014

08005108 <__malloc_lock>:
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <__malloc_lock+0x8>)
 800510a:	f7ff bf7b 	b.w	8005004 <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	20001a00 	.word	0x20001a00

08005114 <__malloc_unlock>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__malloc_unlock+0x8>)
 8005116:	f7ff bf76 	b.w	8005006 <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	20001a00 	.word	0x20001a00

08005120 <_free_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4605      	mov	r5, r0
 8005124:	2900      	cmp	r1, #0
 8005126:	d040      	beq.n	80051aa <_free_r+0x8a>
 8005128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512c:	1f0c      	subs	r4, r1, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	bfb8      	it	lt
 8005132:	18e4      	addlt	r4, r4, r3
 8005134:	f7ff ffe8 	bl	8005108 <__malloc_lock>
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <_free_r+0x8c>)
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	b933      	cbnz	r3, 800514c <_free_r+0x2c>
 800513e:	6063      	str	r3, [r4, #4]
 8005140:	6014      	str	r4, [r2, #0]
 8005142:	4628      	mov	r0, r5
 8005144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005148:	f7ff bfe4 	b.w	8005114 <__malloc_unlock>
 800514c:	42a3      	cmp	r3, r4
 800514e:	d908      	bls.n	8005162 <_free_r+0x42>
 8005150:	6820      	ldr	r0, [r4, #0]
 8005152:	1821      	adds	r1, r4, r0
 8005154:	428b      	cmp	r3, r1
 8005156:	bf01      	itttt	eq
 8005158:	6819      	ldreq	r1, [r3, #0]
 800515a:	685b      	ldreq	r3, [r3, #4]
 800515c:	1809      	addeq	r1, r1, r0
 800515e:	6021      	streq	r1, [r4, #0]
 8005160:	e7ed      	b.n	800513e <_free_r+0x1e>
 8005162:	461a      	mov	r2, r3
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	b10b      	cbz	r3, 800516c <_free_r+0x4c>
 8005168:	42a3      	cmp	r3, r4
 800516a:	d9fa      	bls.n	8005162 <_free_r+0x42>
 800516c:	6811      	ldr	r1, [r2, #0]
 800516e:	1850      	adds	r0, r2, r1
 8005170:	42a0      	cmp	r0, r4
 8005172:	d10b      	bne.n	800518c <_free_r+0x6c>
 8005174:	6820      	ldr	r0, [r4, #0]
 8005176:	4401      	add	r1, r0
 8005178:	1850      	adds	r0, r2, r1
 800517a:	4283      	cmp	r3, r0
 800517c:	6011      	str	r1, [r2, #0]
 800517e:	d1e0      	bne.n	8005142 <_free_r+0x22>
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4401      	add	r1, r0
 8005186:	6011      	str	r1, [r2, #0]
 8005188:	6053      	str	r3, [r2, #4]
 800518a:	e7da      	b.n	8005142 <_free_r+0x22>
 800518c:	d902      	bls.n	8005194 <_free_r+0x74>
 800518e:	230c      	movs	r3, #12
 8005190:	602b      	str	r3, [r5, #0]
 8005192:	e7d6      	b.n	8005142 <_free_r+0x22>
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	1821      	adds	r1, r4, r0
 8005198:	428b      	cmp	r3, r1
 800519a:	bf01      	itttt	eq
 800519c:	6819      	ldreq	r1, [r3, #0]
 800519e:	685b      	ldreq	r3, [r3, #4]
 80051a0:	1809      	addeq	r1, r1, r0
 80051a2:	6021      	streq	r1, [r4, #0]
 80051a4:	6063      	str	r3, [r4, #4]
 80051a6:	6054      	str	r4, [r2, #4]
 80051a8:	e7cb      	b.n	8005142 <_free_r+0x22>
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	20001a04 	.word	0x20001a04

080051b0 <_init>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr

080051bc <_fini>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr
