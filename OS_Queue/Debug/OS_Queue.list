
OS_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080052d4  080052d4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052d4  080052d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080052dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001990  20000078  08005354  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  08005354  00021a08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbf7  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002835  00000000  00000000  0002fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  000324d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00033130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a0  00000000  00000000  00033ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e186  00000000  00000000  0004be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1c3  00000000  00000000  00059fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4191  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003468  00000000  00000000  000e41e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080051b0 	.word	0x080051b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080051b0 	.word	0x080051b0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000094 	.word	0x20000094
 800017c:	20000148 	.word	0x20000148

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09a      	sub	sp, #104	; 0x68
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fd03 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f8ad 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f995 	bl	80004bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f96d 	bl	8000470 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f8ed 	bl	8000374 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800019a:	f000 f915 	bl	80003c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800019e:	f000 f93d 	bl	800041c <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80001a2:	2300      	movs	r3, #0
 80001a4:	663b      	str	r3, [r7, #96]	; 0x60
 80001a6:	2300      	movs	r3, #0
 80001a8:	667b      	str	r3, [r7, #100]	; 0x64
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80001aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80001ae:	2101      	movs	r1, #1
 80001b0:	4618      	mov	r0, r3
 80001b2:	f002 faf9 	bl	80027a8 <osSemaphoreCreate>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a3c      	ldr	r2, [pc, #240]	; (80002ac <main+0x12c>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 80001bc:	2300      	movs	r3, #0
 80001be:	65bb      	str	r3, [r7, #88]	; 0x58
 80001c0:	2300      	movs	r3, #0
 80001c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 80001c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80001c8:	2101      	movs	r1, #1
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 faec 	bl	80027a8 <osSemaphoreCreate>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4a37      	ldr	r2, [pc, #220]	; (80002b0 <main+0x130>)
 80001d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001d6:	4b37      	ldr	r3, [pc, #220]	; (80002b4 <main+0x134>)
 80001d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001dc:	461d      	mov	r5, r3
 80001de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 fa79 	bl	80026e8 <osThreadCreate>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a2f      	ldr	r2, [pc, #188]	; (80002b8 <main+0x138>)
 80001fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Sender1, osPriorityNormal, 0, 128);
 80001fc:	4b2f      	ldr	r3, [pc, #188]	; (80002bc <main+0x13c>)
 80001fe:	f107 0420 	add.w	r4, r7, #32
 8000202:	461d      	mov	r5, r3
 8000204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000210:	f107 0320 	add.w	r3, r7, #32
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fa66 	bl	80026e8 <osThreadCreate>
 800021c:	4603      	mov	r3, r0
 800021e:	4a28      	ldr	r2, [pc, #160]	; (80002c0 <main+0x140>)
 8000220:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, Sender2, osPriorityNormal, 0, 128);
 8000222:	4b28      	ldr	r3, [pc, #160]	; (80002c4 <main+0x144>)
 8000224:	1d3c      	adds	r4, r7, #4
 8000226:	461d      	mov	r5, r3
 8000228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f002 fa55 	bl	80026e8 <osThreadCreate>
 800023e:	4603      	mov	r3, r0
 8000240:	4a21      	ldr	r2, [pc, #132]	; (80002c8 <main+0x148>)
 8000242:	6013      	str	r3, [r2, #0]
//  osThreadDef(myTask04, StartTask04, osPriorityBelowNormal, 0, 128);
//  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  myQueue01Handle = xQueueCreate(30,sizeof(f_recei_1));
 8000244:	2200      	movs	r2, #0
 8000246:	2132      	movs	r1, #50	; 0x32
 8000248:	201e      	movs	r0, #30
 800024a:	f002 fc6e 	bl	8002b2a <xQueueGenericCreate>
 800024e:	4603      	mov	r3, r0
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <main+0x14c>)
 8000252:	6013      	str	r3, [r2, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, sizeof(f_recei_1));
 8000254:	2232      	movs	r2, #50	; 0x32
 8000256:	491e      	ldr	r1, [pc, #120]	; (80002d0 <main+0x150>)
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <main+0x154>)
 800025a:	f001 fe90 	bl	8001f7e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800025e:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <main+0x158>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <main+0x158>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f022 0204 	bic.w	r2, r2, #4
 800026c:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, sizeof(f_recei_1));
 800026e:	2232      	movs	r2, #50	; 0x32
 8000270:	491a      	ldr	r1, [pc, #104]	; (80002dc <main+0x15c>)
 8000272:	481b      	ldr	r0, [pc, #108]	; (80002e0 <main+0x160>)
 8000274:	f001 fe83 	bl	8001f7e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <main+0x164>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <main+0x164>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f022 0204 	bic.w	r2, r2, #4
 8000286:	601a      	str	r2, [r3, #0]
  xSemaphoreTake(myBinarySem01Handle,1000);
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <main+0x12c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000290:	4618      	mov	r0, r3
 8000292:	f002 ff13 	bl	80030bc <xQueueSemaphoreTake>
  xSemaphoreTake(myBinarySem02Handle,1000);
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <main+0x130>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 ff0c 	bl	80030bc <xQueueSemaphoreTake>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002a4:	f002 fa19 	bl	80026da <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x128>
 80002aa:	bf00      	nop
 80002ac:	20000520 	.word	0x20000520
 80002b0:	20000524 	.word	0x20000524
 80002b4:	080051ec 	.word	0x080051ec
 80002b8:	20000510 	.word	0x20000510
 80002bc:	08005208 	.word	0x08005208
 80002c0:	20000514 	.word	0x20000514
 80002c4:	08005224 	.word	0x08005224
 80002c8:	20000518 	.word	0x20000518
 80002cc:	2000051c 	.word	0x2000051c
 80002d0:	20000348 	.word	0x20000348
 80002d4:	200003b0 	.word	0x200003b0
 80002d8:	20000488 	.word	0x20000488
 80002dc:	2000037c 	.word	0x2000037c
 80002e0:	200003f8 	.word	0x200003f8
 80002e4:	200004cc 	.word	0x200004cc

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f004 fe94 	bl	8005024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000326:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0318 	add.w	r3, r7, #24
 8000330:	4618      	mov	r0, r3
 8000332:	f001 f941 	bl	80015b8 <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 fa84 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2302      	movs	r3, #2
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2102      	movs	r1, #2
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fbae 	bl	8001abc <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000366:	f000 fa6f 	bl	8000848 <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3740      	adds	r7, #64	; 0x40
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <MX_USART1_UART_Init+0x50>)
 800037c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_USART1_UART_Init+0x4c>)
 80003ac:	f001 fd14 	bl	8001dd8 <HAL_UART_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003b6:	f000 fa47 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	200003b0 	.word	0x200003b0
 80003c4:	40013800 	.word	0x40013800

080003c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <MX_USART2_UART_Init+0x50>)
 80003d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003ee:	220c      	movs	r2, #12
 80003f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART2_UART_Init+0x4c>)
 8000400:	f001 fcea 	bl	8001dd8 <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800040a:	f000 fa1d 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200003f8 	.word	0x200003f8
 8000418:	40004400 	.word	0x40004400

0800041c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000422:	4a12      	ldr	r2, [pc, #72]	; (800046c <MX_USART3_UART_Init+0x50>)
 8000424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1200;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000428:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800042c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000442:	220c      	movs	r2, #12
 8000444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_USART3_UART_Init+0x4c>)
 8000454:	f001 fcc0 	bl	8001dd8 <HAL_UART_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800045e:	f000 f9f3 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000440 	.word	0x20000440
 800046c:	40004800 	.word	0x40004800

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_DMA_Init+0x48>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <MX_DMA_Init+0x48>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <MX_DMA_Init+0x48>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2105      	movs	r1, #5
 8000492:	200f      	movs	r0, #15
 8000494:	f000 fcb5 	bl	8000e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000498:	200f      	movs	r0, #15
 800049a:	f000 fcce 	bl	8000e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2105      	movs	r1, #5
 80004a2:	2010      	movs	r0, #16
 80004a4:	f000 fcad 	bl	8000e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004a8:	2010      	movs	r0, #16
 80004aa:	f000 fcc6 	bl	8000e3a <HAL_NVIC_EnableIRQ>

}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a23      	ldr	r2, [pc, #140]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0310 	and.w	r3, r3, #16
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_GPIO_Init+0xa8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0320 	and.w	r3, r3, #32
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_GPIO_Init+0xa8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MX_GPIO_Init+0xa8>)
 8000506:	f043 0304 	orr.w	r3, r3, #4
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_GPIO_Init+0xa8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0304 	and.w	r3, r3, #4
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_GPIO_Init+0xa8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <MX_GPIO_Init+0xa8>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_GPIO_Init+0xa8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0308 	and.w	r3, r3, #8
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000536:	480c      	ldr	r0, [pc, #48]	; (8000568 <MX_GPIO_Init+0xac>)
 8000538:	f001 f80c 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800053c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2302      	movs	r3, #2
 800054c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4619      	mov	r1, r3
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_GPIO_Init+0xac>)
 8000556:	f000 fe79 	bl	800124c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055a:	bf00      	nop
 800055c:	3720      	adds	r7, #32
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	40011000 	.word	0x40011000

0800056c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	807b      	strh	r3, [r7, #2]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
	if(huart->Instance == USART1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d108      	bne.n	8000598 <HAL_UARTEx_RxEventCallback+0x2c>
		xSemaphoreGiveFromISR(myBinarySem01Handle, &xHigherPriorityTaskWoken);
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f107 020c 	add.w	r2, r7, #12
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fc25 	bl	8002de0 <xQueueGiveFromISR>
 8000596:	e00c      	b.n	80005b2 <HAL_UARTEx_RxEventCallback+0x46>
	else if (huart->Instance == USART2)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_UARTEx_RxEventCallback+0x6c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d107      	bne.n	80005b2 <HAL_UARTEx_RxEventCallback+0x46>
		xSemaphoreGiveFromISR(myBinarySem02Handle, &xHigherPriorityTaskWoken);
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_UARTEx_RxEventCallback+0x70>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f107 020c 	add.w	r2, r7, #12
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fc17 	bl	8002de0 <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d007      	beq.n	80005c8 <HAL_UARTEx_RxEventCallback+0x5c>
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x74>)
 80005ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	f3bf 8f6f 	isb	sy
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40013800 	.word	0x40013800
 80005d4:	20000520 	.word	0x20000520
 80005d8:	40004400 	.word	0x40004400
 80005dc:	20000524 	.word	0x20000524
 80005e0:	e000ed04 	.word	0xe000ed04

080005e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b090      	sub	sp, #64	; 0x40
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint8_t count;
	uint8_t data[50];
  /* Infinite loop */
  for(;;)
  {
		  switch(state)
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <StartDefaultTask+0xfc>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d034      	beq.n	800065e <StartDefaultTask+0x7a>
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	dc5b      	bgt.n	80006b0 <StartDefaultTask+0xcc>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <StartDefaultTask+0x1e>
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d011      	beq.n	8000624 <StartDefaultTask+0x40>
 8000600:	e056      	b.n	80006b0 <StartDefaultTask+0xcc>
		  {
		  case overflow:	//Queue get overflow
			  timeStart = HAL_GetTick();
 8000602:	f000 fb1d 	bl	8000c40 <HAL_GetTick>
 8000606:	63f8      	str	r0, [r7, #60]	; 0x3c
			  vTaskSuspend(myTask02Handle);
 8000608:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <StartDefaultTask+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f981 	bl	8003914 <vTaskSuspend>
			  vTaskSuspend(myTask03Handle);
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <StartDefaultTask+0x104>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f003 f97c 	bl	8003914 <vTaskSuspend>
			  state = wait;
 800061c:	4b30      	ldr	r3, [pc, #192]	; (80006e0 <StartDefaultTask+0xfc>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
			  break;
 8000622:	e045      	b.n	80006b0 <StartDefaultTask+0xcc>
		  case wait:	//wait 20s to send data out
			  if(HAL_GetTick() - timeStart > 1000)
 8000624:	f000 fb0c 	bl	8000c40 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000632:	d93c      	bls.n	80006ae <StartDefaultTask+0xca>
			  {
				  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	482c      	ldr	r0, [pc, #176]	; (80006ec <StartDefaultTask+0x108>)
 800063a:	f000 ffa3 	bl	8001584 <HAL_GPIO_TogglePin>
				  timeStart  = HAL_GetTick();
 800063e:	f000 faff 	bl	8000c40 <HAL_GetTick>
 8000642:	63f8      	str	r0, [r7, #60]	; 0x3c
				  count++;
 8000644:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000648:	3301      	adds	r3, #1
 800064a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				  if(count == 20)
 800064e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000652:	2b14      	cmp	r3, #20
 8000654:	d12b      	bne.n	80006ae <StartDefaultTask+0xca>
					  state = trans;
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <StartDefaultTask+0xfc>)
 8000658:	2202      	movs	r2, #2
 800065a:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800065c:	e027      	b.n	80006ae <StartDefaultTask+0xca>
		  case trans:	// Runing
			  count = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			  vTaskResume(myTask02Handle);
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <StartDefaultTask+0x100>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fa1f 	bl	8003aac <vTaskResume>
			  vTaskResume(myTask03Handle);
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <StartDefaultTask+0x104>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fa1a 	bl	8003aac <vTaskResume>
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, sizeof(f_recei_1));
 8000678:	2232      	movs	r2, #50	; 0x32
 800067a:	491d      	ldr	r1, [pc, #116]	; (80006f0 <StartDefaultTask+0x10c>)
 800067c:	481d      	ldr	r0, [pc, #116]	; (80006f4 <StartDefaultTask+0x110>)
 800067e:	f001 fc7e 	bl	8001f7e <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <StartDefaultTask+0x114>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <StartDefaultTask+0x114>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f022 0204 	bic.w	r2, r2, #4
 8000690:	601a      	str	r2, [r3, #0]

			  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, sizeof(f_recei_1));
 8000692:	2232      	movs	r2, #50	; 0x32
 8000694:	4919      	ldr	r1, [pc, #100]	; (80006fc <StartDefaultTask+0x118>)
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <StartDefaultTask+0x11c>)
 8000698:	f001 fc71 	bl	8001f7e <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <StartDefaultTask+0x120>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <StartDefaultTask+0x120>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f022 0204 	bic.w	r2, r2, #4
 80006aa:	601a      	str	r2, [r3, #0]
			  break;
 80006ac:	e000      	b.n	80006b0 <StartDefaultTask+0xcc>
			  break;
 80006ae:	bf00      	nop
		  }

			if(xQueueReceive(myQueue01Handle, data, 0) == pdTRUE)
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <StartDefaultTask+0x124>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f107 0108 	add.w	r1, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fc1e 	bl	8002efc <xQueueReceive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d107      	bne.n	80006d6 <StartDefaultTask+0xf2>
				HAL_UART_Transmit(&huart3, data, 50, 1000);
 80006c6:	f107 0108 	add.w	r1, r7, #8
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	2232      	movs	r2, #50	; 0x32
 80006d0:	480e      	ldr	r0, [pc, #56]	; (800070c <StartDefaultTask+0x128>)
 80006d2:	f001 fbd1 	bl	8001e78 <HAL_UART_Transmit>




    osDelay(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f002 f852 	bl	8002780 <osDelay>
		  switch(state)
 80006dc:	e786      	b.n	80005ec <StartDefaultTask+0x8>
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000514 	.word	0x20000514
 80006e8:	20000518 	.word	0x20000518
 80006ec:	40011000 	.word	0x40011000
 80006f0:	20000348 	.word	0x20000348
 80006f4:	200003b0 	.word	0x200003b0
 80006f8:	20000488 	.word	0x20000488
 80006fc:	2000037c 	.word	0x2000037c
 8000700:	200003f8 	.word	0x200003f8
 8000704:	200004cc 	.word	0x200004cc
 8000708:	2000051c 	.word	0x2000051c
 800070c:	20000440 	.word	0x20000440

08000710 <Sender1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void Sender1(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem01Handle,2000) == pdTRUE)
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <Sender1+0x84>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fccb 	bl	80030bc <xQueueSemaphoreTake>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d12f      	bne.n	800078c <Sender1+0x7c>
	  {
		  if(uxQueueSpacesAvailable(myQueue01Handle) != 0)
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <Sender1+0x88>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fdcf 	bl	80032d4 <uxQueueSpacesAvailable>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d01c      	beq.n	8000776 <Sender1+0x66>
		  {
			  __HAL_DMA_DISABLE(&hdma_usart1_rx);
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <Sender1+0x8c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <Sender1+0x8c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f022 0201 	bic.w	r2, r2, #1
 800074a:	601a      	str	r2, [r3, #0]
			  xQueueSend(myQueue01Handle,f_recei_1,0);
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <Sender1+0x88>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	2200      	movs	r2, #0
 8000754:	4912      	ldr	r1, [pc, #72]	; (80007a0 <Sender1+0x90>)
 8000756:	f002 fa45 	bl	8002be4 <xQueueGenericSend>
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, f_recei_1, sizeof(f_recei_1));
 800075a:	2232      	movs	r2, #50	; 0x32
 800075c:	4910      	ldr	r1, [pc, #64]	; (80007a0 <Sender1+0x90>)
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <Sender1+0x94>)
 8000760:	f001 fc0d 	bl	8001f7e <HAL_UARTEx_ReceiveToIdle_DMA>
			  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <Sender1+0x8c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <Sender1+0x8c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0204 	bic.w	r2, r2, #4
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	e00a      	b.n	800078c <Sender1+0x7c>
		  }
		  else
		  {
			  __HAL_DMA_DISABLE(&hdma_usart1_rx);
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <Sender1+0x8c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <Sender1+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f022 0201 	bic.w	r2, r2, #1
 8000784:	601a      	str	r2, [r3, #0]
			  state = overflow;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <Sender1+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	  else
	  {

	  }

    osDelay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f001 fff7 	bl	8002780 <osDelay>
	  if(xSemaphoreTake(myBinarySem01Handle,2000) == pdTRUE)
 8000792:	e7c1      	b.n	8000718 <Sender1+0x8>
 8000794:	20000520 	.word	0x20000520
 8000798:	2000051c 	.word	0x2000051c
 800079c:	20000488 	.word	0x20000488
 80007a0:	20000348 	.word	0x20000348
 80007a4:	200003b0 	.word	0x200003b0
 80007a8:	20000000 	.word	0x20000000

080007ac <Sender2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void Sender2(void const * argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem02Handle,2000) == pdTRUE)
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <Sender2+0x84>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fc7d 	bl	80030bc <xQueueSemaphoreTake>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d12f      	bne.n	8000828 <Sender2+0x7c>
	  {
		  if(uxQueueSpacesAvailable(myQueue01Handle) != 0)
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <Sender2+0x88>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fd81 	bl	80032d4 <uxQueueSpacesAvailable>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d01c      	beq.n	8000812 <Sender2+0x66>
		  {
			  __HAL_DMA_DISABLE(&hdma_usart2_rx);
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <Sender2+0x8c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <Sender2+0x8c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f022 0201 	bic.w	r2, r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
			  xQueueSend(myQueue01Handle,f_recei_2,0);
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <Sender2+0x88>)
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	2200      	movs	r2, #0
 80007f0:	4912      	ldr	r1, [pc, #72]	; (800083c <Sender2+0x90>)
 80007f2:	f002 f9f7 	bl	8002be4 <xQueueGenericSend>
			  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, f_recei_2, sizeof(f_recei_1));
 80007f6:	2232      	movs	r2, #50	; 0x32
 80007f8:	4910      	ldr	r1, [pc, #64]	; (800083c <Sender2+0x90>)
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <Sender2+0x94>)
 80007fc:	f001 fbbf 	bl	8001f7e <HAL_UARTEx_ReceiveToIdle_DMA>
		  	  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <Sender2+0x8c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <Sender2+0x8c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f022 0204 	bic.w	r2, r2, #4
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	e00a      	b.n	8000828 <Sender2+0x7c>
		  }
		  else
		  {
			  __HAL_DMA_DISABLE(&hdma_usart2_rx);
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <Sender2+0x8c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <Sender2+0x8c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f022 0201 	bic.w	r2, r2, #1
 8000820:	601a      	str	r2, [r3, #0]
			  state = overflow;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <Sender2+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {

	  }
	  osDelay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f001 ffa9 	bl	8002780 <osDelay>
	  if(xSemaphoreTake(myBinarySem02Handle,2000) == pdTRUE)
 800082e:	e7c1      	b.n	80007b4 <Sender2+0x8>
 8000830:	20000524 	.word	0x20000524
 8000834:	2000051c 	.word	0x2000051c
 8000838:	200004cc 	.word	0x200004cc
 800083c:	2000037c 	.word	0x2000037c
 8000840:	200003f8 	.word	0x200003f8
 8000844:	20000000 	.word	0x20000000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_MspInit+0x4c>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <HAL_MspInit+0x4c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6193      	str	r3, [r2, #24]
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_MspInit+0x4c>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_MspInit+0x4c>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_MspInit+0x4c>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	f06f 0001 	mvn.w	r0, #1
 8000892:	f000 fab6 	bl	8000e02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <HAL_UART_MspInit+0x200>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d158      	bne.n	8000976 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c4:	4b78      	ldr	r3, [pc, #480]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a77      	ldr	r2, [pc, #476]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b75      	ldr	r3, [pc, #468]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d8:	61fb      	str	r3, [r7, #28]
 80008da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b72      	ldr	r3, [pc, #456]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a71      	ldr	r2, [pc, #452]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b6f      	ldr	r3, [pc, #444]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4619      	mov	r1, r3
 8000908:	4868      	ldr	r0, [pc, #416]	; (8000aac <HAL_UART_MspInit+0x208>)
 800090a:	f000 fc9f 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4619      	mov	r1, r3
 8000922:	4862      	ldr	r0, [pc, #392]	; (8000aac <HAL_UART_MspInit+0x208>)
 8000924:	f000 fc92 	bl	800124c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 800092a:	4a62      	ldr	r2, [pc, #392]	; (8000ab4 <HAL_UART_MspInit+0x210>)
 800092c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092e:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000934:	4b5e      	ldr	r3, [pc, #376]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800093a:	4b5d      	ldr	r3, [pc, #372]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000940:	4b5b      	ldr	r3, [pc, #364]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000946:	4b5a      	ldr	r3, [pc, #360]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800094c:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000952:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000958:	4855      	ldr	r0, [pc, #340]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 800095a:	f000 fa89 	bl	8000e70 <HAL_DMA_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000964:	f7ff ff70 	bl	8000848 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 800096c:	63da      	str	r2, [r3, #60]	; 0x3c
 800096e:	4a50      	ldr	r2, [pc, #320]	; (8000ab0 <HAL_UART_MspInit+0x20c>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000974:	e092      	b.n	8000a9c <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <HAL_UART_MspInit+0x214>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d156      	bne.n	8000a2e <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b49      	ldr	r3, [pc, #292]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	4a48      	ldr	r2, [pc, #288]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 8000986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098a:	61d3      	str	r3, [r2, #28]
 800098c:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b43      	ldr	r3, [pc, #268]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a42      	ldr	r2, [pc, #264]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b0:	2304      	movs	r3, #4
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4619      	mov	r1, r3
 80009c2:	483a      	ldr	r0, [pc, #232]	; (8000aac <HAL_UART_MspInit+0x208>)
 80009c4:	f000 fc42 	bl	800124c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009c8:	2308      	movs	r3, #8
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0320 	add.w	r3, r7, #32
 80009d8:	4619      	mov	r1, r3
 80009da:	4834      	ldr	r0, [pc, #208]	; (8000aac <HAL_UART_MspInit+0x208>)
 80009dc:	f000 fc36 	bl	800124c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009e0:	4b36      	ldr	r3, [pc, #216]	; (8000abc <HAL_UART_MspInit+0x218>)
 80009e2:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <HAL_UART_MspInit+0x21c>)
 80009e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e6:	4b35      	ldr	r3, [pc, #212]	; (8000abc <HAL_UART_MspInit+0x218>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ec:	4b33      	ldr	r3, [pc, #204]	; (8000abc <HAL_UART_MspInit+0x218>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f2:	4b32      	ldr	r3, [pc, #200]	; (8000abc <HAL_UART_MspInit+0x218>)
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <HAL_UART_MspInit+0x218>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <HAL_UART_MspInit+0x218>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <HAL_UART_MspInit+0x218>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <HAL_UART_MspInit+0x218>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a10:	482a      	ldr	r0, [pc, #168]	; (8000abc <HAL_UART_MspInit+0x218>)
 8000a12:	f000 fa2d 	bl	8000e70 <HAL_DMA_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8000a1c:	f7ff ff14 	bl	8000848 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a26      	ldr	r2, [pc, #152]	; (8000abc <HAL_UART_MspInit+0x218>)
 8000a24:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <HAL_UART_MspInit+0x218>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a2c:	e036      	b.n	8000a9c <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <HAL_UART_MspInit+0x220>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d131      	bne.n	8000a9c <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 8000a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a42:	61d3      	str	r3, [r2, #28]
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_UART_MspInit+0x204>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <HAL_UART_MspInit+0x224>)
 8000a7e:	f000 fbe5 	bl	800124c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4619      	mov	r1, r3
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <HAL_UART_MspInit+0x224>)
 8000a98:	f000 fbd8 	bl	800124c <HAL_GPIO_Init>
}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	; 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40013800 	.word	0x40013800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	20000488 	.word	0x20000488
 8000ab4:	40020058 	.word	0x40020058
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	200004cc 	.word	0x200004cc
 8000ac0:	4002006c 	.word	0x4002006c
 8000ac4:	40004800 	.word	0x40004800
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afa:	f000 f88f 	bl	8000c1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000afe:	f003 fc4f 	bl	80043a0 <xTaskGetSchedulerState>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d001      	beq.n	8000b0c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b08:	f003 fffe 	bl	8004b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <DMA1_Channel5_IRQHandler+0x10>)
 8000b16:	f000 fa65 	bl	8000fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000488 	.word	0x20000488

08000b24 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <DMA1_Channel6_IRQHandler+0x10>)
 8000b2a:	f000 fa5b 	bl	8000fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200004cc 	.word	0x200004cc

08000b38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <Reset_Handler>:
 8000b44:	f7ff fff8 	bl	8000b38 <SystemInit>
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <LoopFillZerobss+0xe>)
 8000b4a:	490c      	ldr	r1, [pc, #48]	; (8000b7c <LoopFillZerobss+0x12>)
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <LoopFillZerobss+0x16>)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:
 8000b52:	58d4      	ldr	r4, [r2, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:
 8000b58:	18c4      	adds	r4, r0, r3
 8000b5a:	428c      	cmp	r4, r1
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
 8000b5e:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <LoopFillZerobss+0x1a>)
 8000b60:	4c09      	ldr	r4, [pc, #36]	; (8000b88 <LoopFillZerobss+0x1e>)
 8000b62:	2300      	movs	r3, #0
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:
 8000b6a:	42a2      	cmp	r2, r4
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>
 8000b6e:	f004 fa25 	bl	8004fbc <__libc_init_array>
 8000b72:	f7ff fb05 	bl	8000180 <main>
 8000b76:	4770      	bx	lr
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000078 	.word	0x20000078
 8000b80:	080052dc 	.word	0x080052dc
 8000b84:	20000078 	.word	0x20000078
 8000b88:	20001a08 	.word	0x20001a08

08000b8c <ADC1_2_IRQHandler>:
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x28>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x28>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f923 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f000 f808 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fe52 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x54>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x58>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f93b 	bl	8000e56 <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf8:	f000 f903 	bl	8000e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_InitTick+0x5c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000004 	.word	0x20000004
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000008 	.word	0x20000008

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x1c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x20>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <HAL_IncTick+0x20>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	20000528 	.word	0x20000528

08000c40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <HAL_GetTick+0x10>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000528 	.word	0x20000528

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4906      	ldr	r1, [pc, #24]	; (8000cec <__NVIC_EnableIRQ+0x34>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dcc:	f7ff ff90 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff2d 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff42 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff90 	bl	8000d44 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5f 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff35 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffa2 	bl	8000da8 <SysTick_Config>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e043      	b.n	8000f0e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_DMA_Init+0xa8>)
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a22      	ldr	r2, [pc, #136]	; (8000f1c <HAL_DMA_Init+0xac>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	009a      	lsls	r2, r3, #2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_DMA_Init+0xb0>)
 8000ea2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ebe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	bffdfff8 	.word	0xbffdfff8
 8000f1c:	cccccccd 	.word	0xcccccccd
 8000f20:	40020000 	.word	0x40020000

08000f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <HAL_DMA_Start_IT+0x20>
 8000f40:	2302      	movs	r3, #2
 8000f42:	e04b      	b.n	8000fdc <HAL_DMA_Start_IT+0xb8>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d13a      	bne.n	8000fce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2200      	movs	r2, #0
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f937 	bl	80011f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d008      	beq.n	8000f9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 020e 	orr.w	r2, r2, #14
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e00f      	b.n	8000fbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0204 	bic.w	r2, r2, #4
 8000faa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 020a 	orr.w	r2, r2, #10
 8000fba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e005      	b.n	8000fda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	2204      	movs	r2, #4
 8001002:	409a      	lsls	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d04f      	beq.n	80010ac <HAL_DMA_IRQHandler+0xc8>
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	2b00      	cmp	r3, #0
 8001014:	d04a      	beq.n	80010ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	2b00      	cmp	r3, #0
 8001022:	d107      	bne.n	8001034 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0204 	bic.w	r2, r2, #4
 8001032:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a66      	ldr	r2, [pc, #408]	; (80011d4 <HAL_DMA_IRQHandler+0x1f0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d029      	beq.n	8001092 <HAL_DMA_IRQHandler+0xae>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a65      	ldr	r2, [pc, #404]	; (80011d8 <HAL_DMA_IRQHandler+0x1f4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d022      	beq.n	800108e <HAL_DMA_IRQHandler+0xaa>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a63      	ldr	r2, [pc, #396]	; (80011dc <HAL_DMA_IRQHandler+0x1f8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01a      	beq.n	8001088 <HAL_DMA_IRQHandler+0xa4>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a62      	ldr	r2, [pc, #392]	; (80011e0 <HAL_DMA_IRQHandler+0x1fc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d012      	beq.n	8001082 <HAL_DMA_IRQHandler+0x9e>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a60      	ldr	r2, [pc, #384]	; (80011e4 <HAL_DMA_IRQHandler+0x200>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00a      	beq.n	800107c <HAL_DMA_IRQHandler+0x98>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a5f      	ldr	r2, [pc, #380]	; (80011e8 <HAL_DMA_IRQHandler+0x204>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d102      	bne.n	8001076 <HAL_DMA_IRQHandler+0x92>
 8001070:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001074:	e00e      	b.n	8001094 <HAL_DMA_IRQHandler+0xb0>
 8001076:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800107a:	e00b      	b.n	8001094 <HAL_DMA_IRQHandler+0xb0>
 800107c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001080:	e008      	b.n	8001094 <HAL_DMA_IRQHandler+0xb0>
 8001082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001086:	e005      	b.n	8001094 <HAL_DMA_IRQHandler+0xb0>
 8001088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108c:	e002      	b.n	8001094 <HAL_DMA_IRQHandler+0xb0>
 800108e:	2340      	movs	r3, #64	; 0x40
 8001090:	e000      	b.n	8001094 <HAL_DMA_IRQHandler+0xb0>
 8001092:	2304      	movs	r3, #4
 8001094:	4a55      	ldr	r2, [pc, #340]	; (80011ec <HAL_DMA_IRQHandler+0x208>)
 8001096:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 8094 	beq.w	80011ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010aa:	e08e      	b.n	80011ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	2202      	movs	r2, #2
 80010b2:	409a      	lsls	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d056      	beq.n	800116a <HAL_DMA_IRQHandler+0x186>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d051      	beq.n	800116a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10b      	bne.n	80010ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 020a 	bic.w	r2, r2, #10
 80010e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <HAL_DMA_IRQHandler+0x1f0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d029      	beq.n	800114a <HAL_DMA_IRQHandler+0x166>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a37      	ldr	r2, [pc, #220]	; (80011d8 <HAL_DMA_IRQHandler+0x1f4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d022      	beq.n	8001146 <HAL_DMA_IRQHandler+0x162>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a35      	ldr	r2, [pc, #212]	; (80011dc <HAL_DMA_IRQHandler+0x1f8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d01a      	beq.n	8001140 <HAL_DMA_IRQHandler+0x15c>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a34      	ldr	r2, [pc, #208]	; (80011e0 <HAL_DMA_IRQHandler+0x1fc>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d012      	beq.n	800113a <HAL_DMA_IRQHandler+0x156>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <HAL_DMA_IRQHandler+0x200>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00a      	beq.n	8001134 <HAL_DMA_IRQHandler+0x150>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a31      	ldr	r2, [pc, #196]	; (80011e8 <HAL_DMA_IRQHandler+0x204>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d102      	bne.n	800112e <HAL_DMA_IRQHandler+0x14a>
 8001128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800112c:	e00e      	b.n	800114c <HAL_DMA_IRQHandler+0x168>
 800112e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001132:	e00b      	b.n	800114c <HAL_DMA_IRQHandler+0x168>
 8001134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001138:	e008      	b.n	800114c <HAL_DMA_IRQHandler+0x168>
 800113a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113e:	e005      	b.n	800114c <HAL_DMA_IRQHandler+0x168>
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	e002      	b.n	800114c <HAL_DMA_IRQHandler+0x168>
 8001146:	2320      	movs	r3, #32
 8001148:	e000      	b.n	800114c <HAL_DMA_IRQHandler+0x168>
 800114a:	2302      	movs	r3, #2
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_DMA_IRQHandler+0x208>)
 800114e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	2b00      	cmp	r3, #0
 800115e:	d034      	beq.n	80011ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001168:	e02f      	b.n	80011ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2208      	movs	r2, #8
 8001170:	409a      	lsls	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d028      	beq.n	80011cc <HAL_DMA_IRQHandler+0x1e8>
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d023      	beq.n	80011cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 020e 	bic.w	r2, r2, #14
 8001192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800119c:	2101      	movs	r1, #1
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
    }
  }
  return;
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
}
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020008 	.word	0x40020008
 80011d8:	4002001c 	.word	0x4002001c
 80011dc:	40020030 	.word	0x40020030
 80011e0:	40020044 	.word	0x40020044
 80011e4:	40020058 	.word	0x40020058
 80011e8:	4002006c 	.word	0x4002006c
 80011ec:	40020000 	.word	0x40020000

080011f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b10      	cmp	r3, #16
 800121c:	d108      	bne.n	8001230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800122e:	e007      	b.n	8001240 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	60da      	str	r2, [r3, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b08b      	sub	sp, #44	; 0x2c
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e169      	b.n	8001534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001260:	2201      	movs	r2, #1
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	429a      	cmp	r2, r3
 800127a:	f040 8158 	bne.w	800152e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a9a      	ldr	r2, [pc, #616]	; (80014ec <HAL_GPIO_Init+0x2a0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d05e      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 8001288:	4a98      	ldr	r2, [pc, #608]	; (80014ec <HAL_GPIO_Init+0x2a0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d875      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 800128e:	4a98      	ldr	r2, [pc, #608]	; (80014f0 <HAL_GPIO_Init+0x2a4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d058      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 8001294:	4a96      	ldr	r2, [pc, #600]	; (80014f0 <HAL_GPIO_Init+0x2a4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d86f      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 800129a:	4a96      	ldr	r2, [pc, #600]	; (80014f4 <HAL_GPIO_Init+0x2a8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d052      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012a0:	4a94      	ldr	r2, [pc, #592]	; (80014f4 <HAL_GPIO_Init+0x2a8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d869      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012a6:	4a94      	ldr	r2, [pc, #592]	; (80014f8 <HAL_GPIO_Init+0x2ac>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d04c      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012ac:	4a92      	ldr	r2, [pc, #584]	; (80014f8 <HAL_GPIO_Init+0x2ac>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d863      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012b2:	4a92      	ldr	r2, [pc, #584]	; (80014fc <HAL_GPIO_Init+0x2b0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d046      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
 80012b8:	4a90      	ldr	r2, [pc, #576]	; (80014fc <HAL_GPIO_Init+0x2b0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d85d      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012be:	2b12      	cmp	r3, #18
 80012c0:	d82a      	bhi.n	8001318 <HAL_GPIO_Init+0xcc>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d859      	bhi.n	800137a <HAL_GPIO_Init+0x12e>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <HAL_GPIO_Init+0x80>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001321 	.word	0x08001321
 80012d4:	08001333 	.word	0x08001333
 80012d8:	08001375 	.word	0x08001375
 80012dc:	0800137b 	.word	0x0800137b
 80012e0:	0800137b 	.word	0x0800137b
 80012e4:	0800137b 	.word	0x0800137b
 80012e8:	0800137b 	.word	0x0800137b
 80012ec:	0800137b 	.word	0x0800137b
 80012f0:	0800137b 	.word	0x0800137b
 80012f4:	0800137b 	.word	0x0800137b
 80012f8:	0800137b 	.word	0x0800137b
 80012fc:	0800137b 	.word	0x0800137b
 8001300:	0800137b 	.word	0x0800137b
 8001304:	0800137b 	.word	0x0800137b
 8001308:	0800137b 	.word	0x0800137b
 800130c:	0800137b 	.word	0x0800137b
 8001310:	08001329 	.word	0x08001329
 8001314:	0800133d 	.word	0x0800133d
 8001318:	4a79      	ldr	r2, [pc, #484]	; (8001500 <HAL_GPIO_Init+0x2b4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800131e:	e02c      	b.n	800137a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e029      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	3304      	adds	r3, #4
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e024      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	3308      	adds	r3, #8
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e01f      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	330c      	adds	r3, #12
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e01a      	b.n	800137c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134e:	2304      	movs	r3, #4
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e013      	b.n	800137c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d105      	bne.n	8001368 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800135c:	2308      	movs	r3, #8
 800135e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	611a      	str	r2, [r3, #16]
          break;
 8001366:	e009      	b.n	800137c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001368:	2308      	movs	r3, #8
 800136a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	615a      	str	r2, [r3, #20]
          break;
 8001372:	e003      	b.n	800137c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x130>
          break;
 800137a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2bff      	cmp	r3, #255	; 0xff
 8001380:	d801      	bhi.n	8001386 <HAL_GPIO_Init+0x13a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	e001      	b.n	800138a <HAL_GPIO_Init+0x13e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3304      	adds	r3, #4
 800138a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2bff      	cmp	r3, #255	; 0xff
 8001390:	d802      	bhi.n	8001398 <HAL_GPIO_Init+0x14c>
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x152>
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	3b08      	subs	r3, #8
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	210f      	movs	r1, #15
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	6a39      	ldr	r1, [r7, #32]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	431a      	orrs	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80b1 	beq.w	800152e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013cc:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e4:	4a48      	ldr	r2, [pc, #288]	; (8001508 <HAL_GPIO_Init+0x2bc>)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a40      	ldr	r2, [pc, #256]	; (800150c <HAL_GPIO_Init+0x2c0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <HAL_GPIO_Init+0x1ec>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3f      	ldr	r2, [pc, #252]	; (8001510 <HAL_GPIO_Init+0x2c4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00d      	beq.n	8001434 <HAL_GPIO_Init+0x1e8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3e      	ldr	r2, [pc, #248]	; (8001514 <HAL_GPIO_Init+0x2c8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d007      	beq.n	8001430 <HAL_GPIO_Init+0x1e4>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a3d      	ldr	r2, [pc, #244]	; (8001518 <HAL_GPIO_Init+0x2cc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d101      	bne.n	800142c <HAL_GPIO_Init+0x1e0>
 8001428:	2303      	movs	r3, #3
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 800142c:	2304      	movs	r3, #4
 800142e:	e004      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001430:	2302      	movs	r3, #2
 8001432:	e002      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_GPIO_Init+0x1ee>
 8001438:	2300      	movs	r3, #0
 800143a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800144a:	492f      	ldr	r1, [pc, #188]	; (8001508 <HAL_GPIO_Init+0x2bc>)
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_GPIO_Init+0x2d0>)
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	492c      	ldr	r1, [pc, #176]	; (800151c <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_GPIO_Init+0x2d0>)
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	43db      	mvns	r3, r3
 800147a:	4928      	ldr	r1, [pc, #160]	; (800151c <HAL_GPIO_Init+0x2d0>)
 800147c:	4013      	ands	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_GPIO_Init+0x2d0>)
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	4922      	ldr	r1, [pc, #136]	; (800151c <HAL_GPIO_Init+0x2d0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	60cb      	str	r3, [r1, #12]
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_GPIO_Init+0x2d0>)
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	491e      	ldr	r1, [pc, #120]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4918      	ldr	r1, [pc, #96]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4914      	ldr	r1, [pc, #80]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d021      	beq.n	8001520 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	490e      	ldr	r1, [pc, #56]	; (800151c <HAL_GPIO_Init+0x2d0>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
 80014e8:	e021      	b.n	800152e <HAL_GPIO_Init+0x2e2>
 80014ea:	bf00      	nop
 80014ec:	10320000 	.word	0x10320000
 80014f0:	10310000 	.word	0x10310000
 80014f4:	10220000 	.word	0x10220000
 80014f8:	10210000 	.word	0x10210000
 80014fc:	10120000 	.word	0x10120000
 8001500:	10110000 	.word	0x10110000
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	40010800 	.word	0x40010800
 8001510:	40010c00 	.word	0x40010c00
 8001514:	40011000 	.word	0x40011000
 8001518:	40011400 	.word	0x40011400
 800151c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	43db      	mvns	r3, r3
 8001528:	4909      	ldr	r1, [pc, #36]	; (8001550 <HAL_GPIO_Init+0x304>)
 800152a:	4013      	ands	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	3301      	adds	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	fa22 f303 	lsr.w	r3, r2, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	f47f ae8e 	bne.w	8001260 <HAL_GPIO_Init+0x14>
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	372c      	adds	r7, #44	; 0x2c
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001570:	e003      	b.n	800157a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	611a      	str	r2, [r3, #16]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	041a      	lsls	r2, r3, #16
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43d9      	mvns	r1, r3
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	400b      	ands	r3, r1
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e272      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8087 	beq.w	80016e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d8:	4b92      	ldr	r3, [pc, #584]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d00c      	beq.n	80015fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e4:	4b8f      	ldr	r3, [pc, #572]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d112      	bne.n	8001616 <HAL_RCC_OscConfig+0x5e>
 80015f0:	4b8c      	ldr	r3, [pc, #560]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d10b      	bne.n	8001616 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fe:	4b89      	ldr	r3, [pc, #548]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d06c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x12c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d168      	bne.n	80016e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e24c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x76>
 8001620:	4b80      	ldr	r3, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a7f      	ldr	r2, [pc, #508]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e02e      	b.n	800168c <HAL_RCC_OscConfig+0xd4>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x98>
 8001636:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a7a      	ldr	r2, [pc, #488]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b78      	ldr	r3, [pc, #480]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a77      	ldr	r2, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0xd4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0xbc>
 800165a:	4b72      	ldr	r3, [pc, #456]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a71      	ldr	r2, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0xd4>
 8001674:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a6a      	ldr	r2, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a67      	ldr	r2, [pc, #412]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fad4 	bl	8000c40 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fad0 	bl	8000c40 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e200      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0xe4>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fac0 	bl	8000c40 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fabc 	bl	8000c40 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1ec      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x10c>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f2:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00b      	beq.n	8001716 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b08      	cmp	r3, #8
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x18c>
 800170a:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b43      	ldr	r3, [pc, #268]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x176>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1c0      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4939      	ldr	r1, [pc, #228]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e03a      	b.n	80017ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d020      	beq.n	800178e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b36      	ldr	r3, [pc, #216]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff fa75 	bl	8000c40 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fa71 	bl	8000c40 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1a1      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4927      	ldr	r1, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_RCC_OscConfig+0x270>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fa54 	bl	8000c40 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fa50 	bl	8000c40 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e180      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03a      	beq.n	800183c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d019      	beq.n	8001802 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_RCC_OscConfig+0x274>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fa34 	bl	8000c40 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff fa30 	bl	8000c40 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e160      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f000 face 	bl	8001d9c <RCC_Delay>
 8001800:	e01c      	b.n	800183c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_RCC_OscConfig+0x274>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff fa1a 	bl	8000c40 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180e:	e00f      	b.n	8001830 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff fa16 	bl	8000c40 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d908      	bls.n	8001830 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e146      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	42420000 	.word	0x42420000
 800182c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	4b92      	ldr	r3, [pc, #584]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e9      	bne.n	8001810 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a6 	beq.w	8001996 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184e:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10d      	bne.n	8001876 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a87      	ldr	r2, [pc, #540]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b85      	ldr	r3, [pc, #532]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b82      	ldr	r3, [pc, #520]	; (8001a80 <HAL_RCC_OscConfig+0x4c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b7f      	ldr	r3, [pc, #508]	; (8001a80 <HAL_RCC_OscConfig+0x4c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7e      	ldr	r2, [pc, #504]	; (8001a80 <HAL_RCC_OscConfig+0x4c8>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7ff f9d7 	bl	8000c40 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001896:	f7ff f9d3 	bl	8000c40 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e103      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <HAL_RCC_OscConfig+0x4c8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x312>
 80018bc:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6213      	str	r3, [r2, #32]
 80018c8:	e02d      	b.n	8001926 <HAL_RCC_OscConfig+0x36e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x334>
 80018d2:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a69      	ldr	r2, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a66      	ldr	r2, [pc, #408]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	e01c      	b.n	8001926 <HAL_RCC_OscConfig+0x36e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x356>
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a60      	ldr	r2, [pc, #384]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a5d      	ldr	r2, [pc, #372]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	e00b      	b.n	8001926 <HAL_RCC_OscConfig+0x36e>
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a5a      	ldr	r2, [pc, #360]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001920:	f023 0304 	bic.w	r3, r3, #4
 8001924:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d015      	beq.n	800195a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff f987 	bl	8000c40 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7ff f983 	bl	8000c40 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0b1      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ee      	beq.n	8001936 <HAL_RCC_OscConfig+0x37e>
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff f971 	bl	8000c40 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff f96d 	bl	8000c40 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e09b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ee      	bne.n	8001962 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198a:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a3b      	ldr	r2, [pc, #236]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001994:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d061      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d146      	bne.n	8001a42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b4:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff f941 	bl	8000c40 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f93d 	bl	8000c40 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e06d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d108      	bne.n	80019fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4921      	ldr	r1, [pc, #132]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a19      	ldr	r1, [r3, #32]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	491b      	ldr	r1, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_RCC_OscConfig+0x4cc>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f911 	bl	8000c40 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f90d 	bl	8000c40 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e03d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x46a>
 8001a40:	e035      	b.n	8001aae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_RCC_OscConfig+0x4cc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f8fa 	bl	8000c40 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff f8f6 	bl	8000c40 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e026      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x498>
 8001a6e:	e01e      	b.n	8001aae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e019      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
 8001a84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x500>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d106      	bne.n	8001aaa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0d0      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d910      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4965      	ldr	r1, [pc, #404]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d040      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e073      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06b      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4936      	ldr	r1, [pc, #216]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bac:	f7ff f848 	bl	8000c40 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff f844 	bl	8000c40 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e053      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d210      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 0207 	bic.w	r2, r3, #7
 8001bf2:	4922      	ldr	r1, [pc, #136]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1cc>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1d0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe ffa6 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08005248 	.word	0x08005248
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	20000008 	.word	0x20000008

08001c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d002      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8001cbe:	e027      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc2:	613b      	str	r3, [r7, #16]
      break;
 8001cc4:	e027      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	0c9b      	lsrs	r3, r3, #18
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d010      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0c5b      	lsrs	r3, r3, #17
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf2:	fb03 f202 	mul.w	r2, r3, r2
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e004      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	613b      	str	r3, [r7, #16]
      break;
 8001d0e:	e002      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d12:	613b      	str	r3, [r7, #16]
      break;
 8001d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d16:	693b      	ldr	r3, [r7, #16]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	007a1200 	.word	0x007a1200
 8001d2c:	08005260 	.word	0x08005260
 8001d30:	08005270 	.word	0x08005270
 8001d34:	003d0900 	.word	0x003d0900

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d50:	f7ff fff2 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4903      	ldr	r1, [pc, #12]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08005258 	.word	0x08005258

08001d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0adb      	lsrs	r3, r3, #11
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4903      	ldr	r1, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08005258 	.word	0x08005258

08001d9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <RCC_Delay+0x34>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <RCC_Delay+0x38>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db8:	bf00      	nop
  }
  while (Delay --);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	60fa      	str	r2, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f9      	bne.n	8001db8 <RCC_Delay+0x1c>
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e042      	b.n	8001e70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fd50 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fbb7 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d16d      	bne.n	8001f74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <HAL_UART_Transmit+0x2c>
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e066      	b.n	8001f76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2221      	movs	r2, #33	; 0x21
 8001eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fec3 	bl	8000c40 <HAL_GetTick>
 8001eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	d108      	bne.n	8001ee4 <HAL_UART_Transmit+0x6c>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	e003      	b.n	8001eec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001eec:	e02a      	b.n	8001f44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f9b6 	bl	800226a <UART_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e036      	b.n	8001f76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10b      	bne.n	8001f26 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	3302      	adds	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	e007      	b.n	8001f36 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1cf      	bne.n	8001eee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2140      	movs	r1, #64	; 0x40
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f986 	bl	800226a <UART_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e006      	b.n	8001f76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
  }
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b08c      	sub	sp, #48	; 0x30
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d14a      	bne.n	800202e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e043      	b.n	8002030 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f9c4 	bl	8002348 <UART_Start_Receive_DMA>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001fc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d12c      	bne.n	8002028 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d125      	bne.n	8002022 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	e853 3f00 	ldrex	r3, [r3]
 8001ffa:	617b      	str	r3, [r7, #20]
   return(result);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	330c      	adds	r3, #12
 800200a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800200c:	627a      	str	r2, [r7, #36]	; 0x24
 800200e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002010:	6a39      	ldr	r1, [r7, #32]
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	e841 2300 	strex	r3, r2, [r1]
 8002018:	61fb      	str	r3, [r7, #28]
   return(result);
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e5      	bne.n	8001fec <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002020:	e002      	b.n	8002028 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800202c:	e000      	b.n	8002030 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3730      	adds	r7, #48	; 0x30
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b09c      	sub	sp, #112	; 0x70
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d172      	bne.n	8002170 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800208a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208c:	2200      	movs	r2, #0
 800208e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	e853 3f00 	ldrex	r3, [r3]
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80020a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	330c      	adds	r3, #12
 80020ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80020b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020b8:	e841 2300 	strex	r3, r2, [r1]
 80020bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e5      	bne.n	8002090 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3314      	adds	r3, #20
 80020ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ce:	e853 3f00 	ldrex	r3, [r3]
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	667b      	str	r3, [r7, #100]	; 0x64
 80020dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3314      	adds	r3, #20
 80020e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80020e4:	647a      	str	r2, [r7, #68]	; 0x44
 80020e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020ec:	e841 2300 	strex	r3, r2, [r1]
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80020f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e5      	bne.n	80020c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3314      	adds	r3, #20
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	e853 3f00 	ldrex	r3, [r3]
 8002106:	623b      	str	r3, [r7, #32]
   return(result);
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800210e:	663b      	str	r3, [r7, #96]	; 0x60
 8002110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3314      	adds	r3, #20
 8002116:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002118:	633a      	str	r2, [r7, #48]	; 0x30
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800211e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002120:	e841 2300 	strex	r3, r2, [r1]
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e5      	bne.n	80020f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800212c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	2b01      	cmp	r3, #1
 800213a:	d119      	bne.n	8002170 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800213c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	e853 3f00 	ldrex	r3, [r3]
 800214a:	60fb      	str	r3, [r7, #12]
   return(result);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0310 	bic.w	r3, r3, #16
 8002152:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	330c      	adds	r3, #12
 800215a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800215c:	61fa      	str	r2, [r7, #28]
 800215e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	e841 2300 	strex	r3, r2, [r1]
 8002168:	617b      	str	r3, [r7, #20]
   return(result);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e5      	bne.n	800213c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002172:	2200      	movs	r2, #0
 8002174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	2b01      	cmp	r3, #1
 800217c:	d106      	bne.n	800218c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800217e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002182:	4619      	mov	r1, r3
 8002184:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002186:	f7fe f9f1 	bl	800056c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800218a:	e002      	b.n	8002192 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800218c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800218e:	f7ff ff53 	bl	8002038 <HAL_UART_RxCpltCallback>
}
 8002192:	bf00      	nop
 8002194:	3770      	adds	r7, #112	; 0x70
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4619      	mov	r1, r3
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7fe f9d3 	bl	800056c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80021c6:	e002      	b.n	80021ce <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff ff3e 	bl	800204a <HAL_UART_RxHalfCpltCallback>
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b21      	cmp	r3, #33	; 0x21
 8002208:	d108      	bne.n	800221c <UART_DMAError+0x46>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002216:	68b8      	ldr	r0, [r7, #8]
 8002218:	f000 f930 	bl	800247c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b22      	cmp	r3, #34	; 0x22
 800223c:	d108      	bne.n	8002250 <UART_DMAError+0x7a>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800224a:	68b8      	ldr	r0, [r7, #8]
 800224c:	f000 f93d 	bl	80024ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f043 0210 	orr.w	r2, r3, #16
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800225c:	68b8      	ldr	r0, [r7, #8]
 800225e:	f7ff fefd 	bl	800205c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b090      	sub	sp, #64	; 0x40
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227a:	e050      	b.n	800231e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002282:	d04c      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <UART_WaitOnFlagUntilTimeout+0x30>
 800228a:	f7fe fcd9 	bl	8000c40 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002296:	429a      	cmp	r2, r3
 8002298:	d241      	bcs.n	800231e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	330c      	adds	r3, #12
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	e853 3f00 	ldrex	r3, [r3]
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330c      	adds	r3, #12
 80022b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ba:	637a      	str	r2, [r7, #52]	; 0x34
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c2:	e841 2300 	strex	r3, r2, [r1]
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1e5      	bne.n	800229a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3314      	adds	r3, #20
 80022d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	e853 3f00 	ldrex	r3, [r3]
 80022dc:	613b      	str	r3, [r7, #16]
   return(result);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3314      	adds	r3, #20
 80022ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ee:	623a      	str	r2, [r7, #32]
 80022f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f2:	69f9      	ldr	r1, [r7, #28]
 80022f4:	6a3a      	ldr	r2, [r7, #32]
 80022f6:	e841 2300 	strex	r3, r2, [r1]
 80022fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e5      	bne.n	80022ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e00f      	b.n	800233e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4013      	ands	r3, r2
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	429a      	cmp	r2, r3
 800233a:	d09f      	beq.n	800227c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3740      	adds	r7, #64	; 0x40
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b098      	sub	sp, #96	; 0x60
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2222      	movs	r2, #34	; 0x22
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	4a3e      	ldr	r2, [pc, #248]	; (8002470 <UART_Start_Receive_DMA+0x128>)
 8002376:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	4a3d      	ldr	r2, [pc, #244]	; (8002474 <UART_Start_Receive_DMA+0x12c>)
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002384:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <UART_Start_Receive_DMA+0x130>)
 8002386:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	2200      	movs	r2, #0
 800238e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	f7fe fdbc 	bl	8000f24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d4:	e853 3f00 	ldrex	r3, [r3]
 80023d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80023da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023f2:	e841 2300 	strex	r3, r2, [r1]
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80023f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e5      	bne.n	80023ca <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3314      	adds	r3, #20
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	657b      	str	r3, [r7, #84]	; 0x54
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3314      	adds	r3, #20
 800241c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800241e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002422:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002426:	e841 2300 	strex	r3, r2, [r1]
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1e5      	bne.n	80023fe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3314      	adds	r3, #20
 8002438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	617b      	str	r3, [r7, #20]
   return(result);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002448:	653b      	str	r3, [r7, #80]	; 0x50
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002452:	627a      	str	r2, [r7, #36]	; 0x24
 8002454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	6a39      	ldr	r1, [r7, #32]
 8002458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245a:	e841 2300 	strex	r3, r2, [r1]
 800245e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e5      	bne.n	8002432 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3760      	adds	r7, #96	; 0x60
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	0800206f 	.word	0x0800206f
 8002474:	0800219b 	.word	0x0800219b
 8002478:	080021d7 	.word	0x080021d7

0800247c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	e853 3f00 	ldrex	r3, [r3]
 8002492:	60bb      	str	r3, [r7, #8]
   return(result);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	61ba      	str	r2, [r7, #24]
 80024a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a8:	6979      	ldr	r1, [r7, #20]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	e841 2300 	strex	r3, r2, [r1]
 80024b0:	613b      	str	r3, [r7, #16]
   return(result);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e5      	bne.n	8002484 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80024c0:	bf00      	nop
 80024c2:	3724      	adds	r7, #36	; 0x24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b095      	sub	sp, #84	; 0x54
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024f2:	643a      	str	r2, [r7, #64]	; 0x40
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024fa:	e841 2300 	strex	r3, r2, [r1]
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e5      	bne.n	80024d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3314      	adds	r3, #20
 800250c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	e853 3f00 	ldrex	r3, [r3]
 8002514:	61fb      	str	r3, [r7, #28]
   return(result);
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	64bb      	str	r3, [r7, #72]	; 0x48
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3314      	adds	r3, #20
 8002524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252e:	e841 2300 	strex	r3, r2, [r1]
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e5      	bne.n	8002506 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	2b01      	cmp	r3, #1
 8002540:	d119      	bne.n	8002576 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	330c      	adds	r3, #12
 8002548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	60bb      	str	r3, [r7, #8]
   return(result);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f023 0310 	bic.w	r3, r3, #16
 8002558:	647b      	str	r3, [r7, #68]	; 0x44
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002562:	61ba      	str	r2, [r7, #24]
 8002564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	6979      	ldr	r1, [r7, #20]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	613b      	str	r3, [r7, #16]
   return(result);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e5      	bne.n	8002542 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002584:	bf00      	nop
 8002586:	3754      	adds	r7, #84	; 0x54
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
	...

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ca:	f023 030c 	bic.w	r3, r3, #12
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <UART_SetConfig+0x114>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d103      	bne.n	8002600 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f8:	f7ff fbbc 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	e002      	b.n	8002606 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002600:	f7ff fba4 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8002604:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <UART_SetConfig+0x118>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	0119      	lsls	r1, r3, #4
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fbb2 f2f3 	udiv	r2, r2, r3
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <UART_SetConfig+0x118>)
 800263e:	fba3 0302 	umull	r0, r3, r3, r2
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	3332      	adds	r3, #50	; 0x32
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <UART_SetConfig+0x118>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800265c:	4419      	add	r1, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	009a      	lsls	r2, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb2 f2f3 	udiv	r2, r2, r3
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <UART_SetConfig+0x118>)
 8002676:	fba3 0302 	umull	r0, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2064      	movs	r0, #100	; 0x64
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	3332      	adds	r3, #50	; 0x32
 8002688:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <UART_SetConfig+0x118>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	440a      	add	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40013800 	.word	0x40013800
 80026a8:	51eb851f 	.word	0x51eb851f

080026ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026be:	2b84      	cmp	r3, #132	; 0x84
 80026c0:	d005      	beq.n	80026ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	3303      	adds	r3, #3
 80026cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026de:	f001 fa43 	bl	8003b68 <vTaskStartScheduler>
  
  return osOK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af04      	add	r7, sp, #16
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d020      	beq.n	800273c <osThreadCreate+0x54>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01c      	beq.n	800273c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685c      	ldr	r4, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681d      	ldr	r5, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691e      	ldr	r6, [r3, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ffc9 	bl	80026ac <makeFreeRtosPriority>
 800271a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002724:	9202      	str	r2, [sp, #8]
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	9100      	str	r1, [sp, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4632      	mov	r2, r6
 800272e:	4629      	mov	r1, r5
 8002730:	4620      	mov	r0, r4
 8002732:	f000 ff19 	bl	8003568 <xTaskCreateStatic>
 8002736:	4603      	mov	r3, r0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	e01c      	b.n	8002776 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685c      	ldr	r4, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002748:	b29e      	uxth	r6, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ffab 	bl	80026ac <makeFreeRtosPriority>
 8002756:	4602      	mov	r2, r0
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	9200      	str	r2, [sp, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4632      	mov	r2, r6
 8002764:	4629      	mov	r1, r5
 8002766:	4620      	mov	r0, r4
 8002768:	f000 ff5a 	bl	8003620 <xTaskCreate>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002780 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <osDelay+0x16>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	e000      	b.n	8002798 <osDelay+0x18>
 8002796:	2301      	movs	r3, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f001 f887 	bl	80038ac <vTaskDelay>
  
  return osOK;
 800279e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00f      	beq.n	80027da <osSemaphoreCreate+0x32>
    if (count == 1) {
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10a      	bne.n	80027d6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	2001      	movs	r0, #1
 80027ce:	f000 f935 	bl	8002a3c <xQueueGenericCreateStatic>
 80027d2:	4603      	mov	r3, r0
 80027d4:	e016      	b.n	8002804 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e014      	b.n	8002804 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d110      	bne.n	8002802 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80027e0:	2203      	movs	r2, #3
 80027e2:	2100      	movs	r1, #0
 80027e4:	2001      	movs	r0, #1
 80027e6:	f000 f9a0 	bl	8002b2a <xQueueGenericCreate>
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <osSemaphoreCreate+0x56>
 80027f2:	2300      	movs	r3, #0
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f9f3 	bl	8002be4 <xQueueGenericSend>
      return sema;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	e000      	b.n	8002804 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002802:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0208 	add.w	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002824:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f103 0208 	add.w	r2, r3, #8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 0208 	add.w	r2, r3, #8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028be:	d103      	bne.n	80028c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e00c      	b.n	80028e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3308      	adds	r3, #8
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e002      	b.n	80028d6 <vListInsert+0x2e>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d2f6      	bcs.n	80028d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6892      	ldr	r2, [r2, #8]
 800292e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6852      	ldr	r2, [r2, #4]
 8002938:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	d103      	bne.n	800294c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
	...

0800296c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002996:	f002 f839 	bl	8004a0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	441a      	add	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	3b01      	subs	r3, #1
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	441a      	add	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d114      	bne.n	8002a16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01a      	beq.n	8002a2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3310      	adds	r3, #16
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fb0d 	bl	8004018 <xTaskRemoveFromEventList>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d012      	beq.n	8002a2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <xQueueGenericReset+0xcc>)
 8002a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	e009      	b.n	8002a2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3310      	adds	r3, #16
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fef6 	bl	800280c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3324      	adds	r3, #36	; 0x24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fef1 	bl	800280c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a2a:	f002 f81f 	bl	8004a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	e000ed04 	.word	0xe000ed04

08002a3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08e      	sub	sp, #56	; 0x38
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a7e:	bf00      	nop
 8002a80:	e7fe      	b.n	8002a80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <xQueueGenericCreateStatic+0x52>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <xQueueGenericCreateStatic+0x56>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <xQueueGenericCreateStatic+0x58>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	623b      	str	r3, [r7, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <xQueueGenericCreateStatic+0x7e>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <xQueueGenericCreateStatic+0x82>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <xQueueGenericCreateStatic+0x84>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	61fb      	str	r3, [r7, #28]
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ada:	2348      	movs	r3, #72	; 0x48
 8002adc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b48      	cmp	r3, #72	; 0x48
 8002ae2:	d00a      	beq.n	8002afa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	61bb      	str	r3, [r7, #24]
}
 8002af6:	bf00      	nop
 8002af8:	e7fe      	b.n	8002af8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b0c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f843 	bl	8002ba6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3730      	adds	r7, #48	; 0x30
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b08a      	sub	sp, #40	; 0x28
 8002b2e:	af02      	add	r7, sp, #8
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	4613      	mov	r3, r2
 8002b36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	613b      	str	r3, [r7, #16]
}
 8002b50:	bf00      	nop
 8002b52:	e7fe      	b.n	8002b52 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e004      	b.n	8002b6a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3348      	adds	r3, #72	; 0x48
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 f84c 	bl	8004c0c <pvPortMalloc>
 8002b74:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00f      	beq.n	8002b9c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	3348      	adds	r3, #72	; 0x48
 8002b80:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b8a:	79fa      	ldrb	r2, [r7, #7]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f805 	bl	8002ba6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
	}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e002      	b.n	8002bc8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	69b8      	ldr	r0, [r7, #24]
 8002bd8:	f7ff fec8 	bl	800296c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08e      	sub	sp, #56	; 0x38
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <xQueueGenericSend+0x32>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c12:	bf00      	nop
 8002c14:	e7fe      	b.n	8002c14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <xQueueGenericSend+0x40>
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <xQueueGenericSend+0x44>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <xQueueGenericSend+0x46>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <xQueueGenericSend+0x60>
	__asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c40:	bf00      	nop
 8002c42:	e7fe      	b.n	8002c42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d103      	bne.n	8002c52 <xQueueGenericSend+0x6e>
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <xQueueGenericSend+0x72>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <xQueueGenericSend+0x74>
 8002c56:	2300      	movs	r3, #0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	623b      	str	r3, [r7, #32]
}
 8002c6e:	bf00      	nop
 8002c70:	e7fe      	b.n	8002c70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c72:	f001 fb95 	bl	80043a0 <xTaskGetSchedulerState>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <xQueueGenericSend+0x9e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <xQueueGenericSend+0xa2>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueGenericSend+0xa4>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61fb      	str	r3, [r7, #28]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ca2:	f001 feb3 	bl	8004a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <xQueueGenericSend+0xd4>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d129      	bne.n	8002d0c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cbe:	f000 fb43 	bl	8003348 <prvCopyDataToQueue>
 8002cc2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	3324      	adds	r3, #36	; 0x24
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 f9a1 	bl	8004018 <xTaskRemoveFromEventList>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <xQueueGenericSend+0x1f8>)
 8002cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	e00a      	b.n	8002d04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <xQueueGenericSend+0x1f8>)
 8002cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d04:	f001 feb2 	bl	8004a6c <vPortExitCritical>
				return pdPASS;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e063      	b.n	8002dd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d12:	f001 feab 	bl	8004a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e05c      	b.n	8002dd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 f9d9 	bl	80040dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d2e:	f001 fe9d 	bl	8004a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d32:	f000 ff83 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d36:	f001 fe69 	bl	8004a0c <vPortEnterCritical>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d46:	d103      	bne.n	8002d50 <xQueueGenericSend+0x16c>
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5c:	d103      	bne.n	8002d66 <xQueueGenericSend+0x182>
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d66:	f001 fe81 	bl	8004a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d6a:	1d3a      	adds	r2, r7, #4
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 f9c8 	bl	8004108 <xTaskCheckForTimeOut>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d124      	bne.n	8002dc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d80:	f000 fbda 	bl	8003538 <prvIsQueueFull>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	3310      	adds	r3, #16
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f91c 	bl	8003fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d9a:	f000 fb65 	bl	8003468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d9e:	f000 ff5b 	bl	8003c58 <xTaskResumeAll>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f47f af7c 	bne.w	8002ca2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <xQueueGenericSend+0x1f8>)
 8002dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	e772      	b.n	8002ca2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dbe:	f000 fb53 	bl	8003468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dc2:	f000 ff49 	bl	8003c58 <xTaskResumeAll>
 8002dc6:	e76c      	b.n	8002ca2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dca:	f000 fb4d 	bl	8003468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dce:	f000 ff43 	bl	8003c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dd2:	2300      	movs	r3, #0
		}
	}
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3738      	adds	r7, #56	; 0x38
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	623b      	str	r3, [r7, #32]
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	61fb      	str	r3, [r7, #28]
}
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <xQueueGiveFromISR+0x58>
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <xQueueGiveFromISR+0x5c>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <xQueueGiveFromISR+0x5e>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	61bb      	str	r3, [r7, #24]
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e58:	f001 fe9a 	bl	8004b90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e5c:	f3ef 8211 	mrs	r2, BASEPRI
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	617a      	str	r2, [r7, #20]
 8002e72:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e74:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d22b      	bcs.n	8002ee0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea2:	d112      	bne.n	8002eca <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d016      	beq.n	8002eda <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	3324      	adds	r3, #36	; 0x24
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 f8b1 	bl	8004018 <xTaskRemoveFromEventList>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00e      	beq.n	8002eda <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e007      	b.n	8002eda <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ece:	3301      	adds	r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	b25a      	sxtb	r2, r3
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002eda:	2301      	movs	r3, #1
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ede:	e001      	b.n	8002ee4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002eee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3738      	adds	r7, #56	; 0x38
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08c      	sub	sp, #48	; 0x30
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <xQueueReceive+0x30>
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	623b      	str	r3, [r7, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <xQueueReceive+0x3e>
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <xQueueReceive+0x42>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <xQueueReceive+0x44>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <xQueueReceive+0x5e>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	61fb      	str	r3, [r7, #28]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f5a:	f001 fa21 	bl	80043a0 <xTaskGetSchedulerState>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <xQueueReceive+0x6e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xQueueReceive+0x72>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <xQueueReceive+0x74>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <xQueueReceive+0x8e>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	61bb      	str	r3, [r7, #24]
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f8a:	f001 fd3f 	bl	8004a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01f      	beq.n	8002fda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9e:	f000 fa3d 	bl	800341c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00f      	beq.n	8002fd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 f82e 	bl	8004018 <xTaskRemoveFromEventList>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <xQueueReceive+0x1bc>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fd2:	f001 fd4b 	bl	8004a6c <vPortExitCritical>
				return pdPASS;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e069      	b.n	80030ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fe0:	f001 fd44 	bl	8004a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e062      	b.n	80030ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fee:	f107 0310 	add.w	r3, r7, #16
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f872 	bl	80040dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ffc:	f001 fd36 	bl	8004a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003000:	f000 fe1c 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003004:	f001 fd02 	bl	8004a0c <vPortEnterCritical>
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800300e:	b25b      	sxtb	r3, r3
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003014:	d103      	bne.n	800301e <xQueueReceive+0x122>
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003024:	b25b      	sxtb	r3, r3
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302a:	d103      	bne.n	8003034 <xQueueReceive+0x138>
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003034:	f001 fd1a 	bl	8004a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003038:	1d3a      	adds	r2, r7, #4
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f001 f861 	bl	8004108 <xTaskCheckForTimeOut>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d123      	bne.n	8003094 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800304c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304e:	f000 fa5d 	bl	800350c <prvIsQueueEmpty>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d017      	beq.n	8003088 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	3324      	adds	r3, #36	; 0x24
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f000 ffb5 	bl	8003fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003068:	f000 f9fe 	bl	8003468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800306c:	f000 fdf4 	bl	8003c58 <xTaskResumeAll>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d189      	bne.n	8002f8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <xQueueReceive+0x1bc>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	e780      	b.n	8002f8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308a:	f000 f9ed 	bl	8003468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800308e:	f000 fde3 	bl	8003c58 <xTaskResumeAll>
 8003092:	e77a      	b.n	8002f8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003096:	f000 f9e7 	bl	8003468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800309a:	f000 fddd 	bl	8003c58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800309e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a0:	f000 fa34 	bl	800350c <prvIsQueueEmpty>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f43f af6f 	beq.w	8002f8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3730      	adds	r7, #48	; 0x30
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08e      	sub	sp, #56	; 0x38
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	623b      	str	r3, [r7, #32]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <xQueueSemaphoreTake+0x50>
	__asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	61fb      	str	r3, [r7, #28]
}
 8003108:	bf00      	nop
 800310a:	e7fe      	b.n	800310a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800310c:	f001 f948 	bl	80043a0 <xTaskGetSchedulerState>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <xQueueSemaphoreTake+0x60>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <xQueueSemaphoreTake+0x64>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <xQueueSemaphoreTake+0x66>
 8003120:	2300      	movs	r3, #0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	61bb      	str	r3, [r7, #24]
}
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800313c:	f001 fc66 	bl	8004a0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	d024      	beq.n	8003196 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800315c:	f001 faea 	bl	8004734 <pvTaskIncrementMutexHeldCount>
 8003160:	4602      	mov	r2, r0
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00f      	beq.n	800318e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	3310      	adds	r3, #16
 8003172:	4618      	mov	r0, r3
 8003174:	f000 ff50 	bl	8004018 <xTaskRemoveFromEventList>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <xQueueSemaphoreTake+0x214>)
 8003180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800318e:	f001 fc6d 	bl	8004a6c <vPortExitCritical>
				return pdPASS;
 8003192:	2301      	movs	r3, #1
 8003194:	e097      	b.n	80032c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d111      	bne.n	80031c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	617b      	str	r3, [r7, #20]
}
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031b8:	f001 fc58 	bl	8004a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031bc:	2300      	movs	r3, #0
 80031be:	e082      	b.n	80032c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 ff86 	bl	80040dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031d0:	2301      	movs	r3, #1
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031d4:	f001 fc4a 	bl	8004a6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031d8:	f000 fd30 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031dc:	f001 fc16 	bl	8004a0c <vPortEnterCritical>
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ec:	d103      	bne.n	80031f6 <xQueueSemaphoreTake+0x13a>
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003202:	d103      	bne.n	800320c <xQueueSemaphoreTake+0x150>
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800320c:	f001 fc2e 	bl	8004a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003210:	463a      	mov	r2, r7
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f000 ff75 	bl	8004108 <xTaskCheckForTimeOut>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d132      	bne.n	800328a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003226:	f000 f971 	bl	800350c <prvIsQueueEmpty>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d026      	beq.n	800327e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003238:	f001 fbe8 	bl	8004a0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4618      	mov	r0, r3
 8003242:	f001 f8cb 	bl	80043dc <xTaskPriorityInherit>
 8003246:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003248:	f001 fc10 	bl	8004a6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	3324      	adds	r3, #36	; 0x24
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f000 febb 	bl	8003fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800325a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800325c:	f000 f904 	bl	8003468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003260:	f000 fcfa 	bl	8003c58 <xTaskResumeAll>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f af68 	bne.w	800313c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <xQueueSemaphoreTake+0x214>)
 800326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	e75e      	b.n	800313c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800327e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003280:	f000 f8f2 	bl	8003468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003284:	f000 fce8 	bl	8003c58 <xTaskResumeAll>
 8003288:	e758      	b.n	800313c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800328a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800328c:	f000 f8ec 	bl	8003468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003290:	f000 fce2 	bl	8003c58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003296:	f000 f939 	bl	800350c <prvIsQueueEmpty>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f43f af4d 	beq.w	800313c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032a8:	f001 fbb0 	bl	8004a0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032ae:	f000 f834 	bl	800331a <prvGetDisinheritPriorityAfterTimeout>
 80032b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 f99a 	bl	80045f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032c0:	f001 fbd4 	bl	8004a6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3738      	adds	r7, #56	; 0x38
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	e000ed04 	.word	0xe000ed04

080032d4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	60fb      	str	r3, [r7, #12]
}
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80032fc:	f001 fb86 	bl	8004a0c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800330c:	f001 fbae 	bl	8004a6c <vPortExitCritical>

	return uxReturn;
 8003310:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1c3 0307 	rsb	r3, r3, #7
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e001      	b.n	800333c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800333c:	68fb      	ldr	r3, [r7, #12]
	}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d14d      	bne.n	800340a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f001 f8b8 	bl	80044e8 <xTaskPriorityDisinherit>
 8003378:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	e043      	b.n	800340a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d119      	bne.n	80033bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6898      	ldr	r0, [r3, #8]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	461a      	mov	r2, r3
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	f001 fe38 	bl	8005008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	441a      	add	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d32b      	bcc.n	800340a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	e026      	b.n	800340a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68d8      	ldr	r0, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	461a      	mov	r2, r3
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	f001 fe1e 	bl	8005008 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	425b      	negs	r3, r3
 80033d6:	441a      	add	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d207      	bcs.n	80033f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	425b      	negs	r3, r3
 80033f2:	441a      	add	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d105      	bne.n	800340a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3b01      	subs	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003412:	697b      	ldr	r3, [r7, #20]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	d303      	bcc.n	8003450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68d9      	ldr	r1, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	461a      	mov	r2, r3
 800345a:	6838      	ldr	r0, [r7, #0]
 800345c:	f001 fdd4 	bl	8005008 <memcpy>
	}
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003470:	f001 facc 	bl	8004a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800347a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800347c:	e011      	b.n	80034a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3324      	adds	r3, #36	; 0x24
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fdc4 	bl	8004018 <xTaskRemoveFromEventList>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003496:	f000 fe99 	bl	80041cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	3b01      	subs	r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dce9      	bgt.n	800347e <prvUnlockQueue+0x16>
 80034aa:	e000      	b.n	80034ae <prvUnlockQueue+0x46>
					break;
 80034ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	22ff      	movs	r2, #255	; 0xff
 80034b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034b6:	f001 fad9 	bl	8004a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ba:	f001 faa7 	bl	8004a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034c6:	e011      	b.n	80034ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d012      	beq.n	80034f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3310      	adds	r3, #16
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fd9f 	bl	8004018 <xTaskRemoveFromEventList>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034e0:	f000 fe74 	bl	80041cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034e4:	7bbb      	ldrb	r3, [r7, #14]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	dce9      	bgt.n	80034c8 <prvUnlockQueue+0x60>
 80034f4:	e000      	b.n	80034f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003500:	f001 fab4 	bl	8004a6c <vPortExitCritical>
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003514:	f001 fa7a 	bl	8004a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e001      	b.n	800352a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800352a:	f001 fa9f 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003540:	f001 fa64 	bl	8004a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	429a      	cmp	r2, r3
 800354e:	d102      	bne.n	8003556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003550:	2301      	movs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e001      	b.n	800355a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800355a:	f001 fa87 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	; 0x38
 800356c:	af04      	add	r7, sp, #16
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <xTaskCreateStatic+0x2a>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	623b      	str	r3, [r7, #32]
}
 800358e:	bf00      	nop
 8003590:	e7fe      	b.n	8003590 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xTaskCreateStatic+0x46>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	61fb      	str	r3, [r7, #28]
}
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035ae:	23b4      	movs	r3, #180	; 0xb4
 80035b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2bb4      	cmp	r3, #180	; 0xb4
 80035b6:	d00a      	beq.n	80035ce <xTaskCreateStatic+0x66>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61bb      	str	r3, [r7, #24]
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01e      	beq.n	8003612 <xTaskCreateStatic+0xaa>
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01b      	beq.n	8003612 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035ec:	2300      	movs	r3, #0
 80035ee:	9303      	str	r3, [sp, #12]
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	9302      	str	r3, [sp, #8]
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f851 	bl	80036ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800360a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800360c:	f000 f8e4 	bl	80037d8 <prvAddNewTaskToReadyList>
 8003610:	e001      	b.n	8003616 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003616:	697b      	ldr	r3, [r7, #20]
	}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af04      	add	r7, sp, #16
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f001 fae9 	bl	8004c0c <pvPortMalloc>
 800363a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00e      	beq.n	8003660 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003642:	20b4      	movs	r0, #180	; 0xb4
 8003644:	f001 fae2 	bl	8004c0c <pvPortMalloc>
 8003648:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
 8003656:	e005      	b.n	8003664 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003658:	6978      	ldr	r0, [r7, #20]
 800365a:	f001 fb9b 	bl	8004d94 <vPortFree>
 800365e:	e001      	b.n	8003664 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d017      	beq.n	800369a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	2300      	movs	r3, #0
 8003676:	9303      	str	r3, [sp, #12]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f80f 	bl	80036ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800368e:	69f8      	ldr	r0, [r7, #28]
 8003690:	f000 f8a2 	bl	80037d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003694:	2301      	movs	r3, #1
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	e002      	b.n	80036a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800369e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036a0:	69bb      	ldr	r3, [r7, #24]
	}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036c4:	3b01      	subs	r3, #1
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f023 0307 	bic.w	r3, r3, #7
 80036d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	617b      	str	r3, [r7, #20]
}
 80036f0:	bf00      	nop
 80036f2:	e7fe      	b.n	80036f2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e012      	b.n	8003720 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	7819      	ldrb	r1, [r3, #0]
 8003702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	3334      	adds	r3, #52	; 0x34
 800370a:	460a      	mov	r2, r1
 800370c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d006      	beq.n	8003728 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3301      	adds	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	d9e9      	bls.n	80036fa <prvInitialiseNewTask+0x4e>
 8003726:	e000      	b.n	800372a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003728:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	2b06      	cmp	r3, #6
 8003736:	d901      	bls.n	800373c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003738:	2306      	movs	r3, #6
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003746:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	2200      	movs	r2, #0
 800374c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	3304      	adds	r3, #4
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f879 	bl	800284a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	3318      	adds	r3, #24
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff f874 	bl	800284a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003766:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	f1c3 0207 	rsb	r2, r3, #7
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003776:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	2200      	movs	r2, #0
 8003784:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	334c      	adds	r3, #76	; 0x4c
 800378c:	2260      	movs	r2, #96	; 0x60
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f001 fc47 	bl	8005024 <memset>
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	4a0c      	ldr	r2, [pc, #48]	; (80037cc <prvInitialiseNewTask+0x120>)
 800379a:	651a      	str	r2, [r3, #80]	; 0x50
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <prvInitialiseNewTask+0x124>)
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <prvInitialiseNewTask+0x128>)
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	69b8      	ldr	r0, [r7, #24]
 80037ae:	f001 f83b 	bl	8004828 <pxPortInitialiseStack>
 80037b2:	4602      	mov	r2, r0
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80037b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037c4:	bf00      	nop
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	08005294 	.word	0x08005294
 80037d0:	080052b4 	.word	0x080052b4
 80037d4:	08005274 	.word	0x08005274

080037d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037e0:	f001 f914 	bl	8004a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <prvAddNewTaskToReadyList+0xb8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <prvAddNewTaskToReadyList+0xb8>)
 80037ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <prvAddNewTaskToReadyList+0xbc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037f6:	4a27      	ldr	r2, [pc, #156]	; (8003894 <prvAddNewTaskToReadyList+0xbc>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <prvAddNewTaskToReadyList+0xb8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d110      	bne.n	8003826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003804:	f000 fd06 	bl	8004214 <prvInitialiseTaskLists>
 8003808:	e00d      	b.n	8003826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800380a:	4b23      	ldr	r3, [pc, #140]	; (8003898 <prvAddNewTaskToReadyList+0xc0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <prvAddNewTaskToReadyList+0xbc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	429a      	cmp	r2, r3
 800381e:	d802      	bhi.n	8003826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003820:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <prvAddNewTaskToReadyList+0xbc>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <prvAddNewTaskToReadyList+0xc4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	4a1b      	ldr	r2, [pc, #108]	; (800389c <prvAddNewTaskToReadyList+0xc4>)
 800382e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <prvAddNewTaskToReadyList+0xc8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <prvAddNewTaskToReadyList+0xc8>)
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <prvAddNewTaskToReadyList+0xcc>)
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f7ff f802 	bl	8002862 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800385e:	f001 f905 	bl	8004a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <prvAddNewTaskToReadyList+0xc0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <prvAddNewTaskToReadyList+0xbc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	429a      	cmp	r2, r3
 8003876:	d207      	bcs.n	8003888 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <prvAddNewTaskToReadyList+0xd0>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	2000062c 	.word	0x2000062c
 8003894:	2000052c 	.word	0x2000052c
 8003898:	20000638 	.word	0x20000638
 800389c:	20000648 	.word	0x20000648
 80038a0:	20000634 	.word	0x20000634
 80038a4:	20000530 	.word	0x20000530
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038be:	4b13      	ldr	r3, [pc, #76]	; (800390c <vTaskDelay+0x60>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <vTaskDelay+0x30>
	__asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	60bb      	str	r3, [r7, #8]
}
 80038d8:	bf00      	nop
 80038da:	e7fe      	b.n	80038da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038dc:	f000 f9ae 	bl	8003c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038e0:	2100      	movs	r1, #0
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 ff3a 	bl	800475c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038e8:	f000 f9b6 	bl	8003c58 <xTaskResumeAll>
 80038ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <vTaskDelay+0x64>)
 80038f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000654 	.word	0x20000654
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800391c:	f001 f876 	bl	8004a0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <vTaskSuspend+0x18>
 8003926:	4b3c      	ldr	r3, [pc, #240]	; (8003a18 <vTaskSuspend+0x104>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	e000      	b.n	800392e <vTaskSuspend+0x1a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe ffef 	bl	8002918 <uxListRemove>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d115      	bne.n	800396c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	4935      	ldr	r1, [pc, #212]	; (8003a1c <vTaskSuspend+0x108>)
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <vTaskSuspend+0x58>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	2201      	movs	r2, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43da      	mvns	r2, r3
 8003962:	4b2f      	ldr	r3, [pc, #188]	; (8003a20 <vTaskSuspend+0x10c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4013      	ands	r3, r2
 8003968:	4a2d      	ldr	r2, [pc, #180]	; (8003a20 <vTaskSuspend+0x10c>)
 800396a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3318      	adds	r3, #24
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe ffcd 	bl	8002918 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3304      	adds	r3, #4
 8003982:	4619      	mov	r1, r3
 8003984:	4827      	ldr	r0, [pc, #156]	; (8003a24 <vTaskSuspend+0x110>)
 8003986:	f7fe ff6c 	bl	8002862 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d103      	bne.n	800399e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800399e:	f001 f865 	bl	8004a6c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80039a2:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <vTaskSuspend+0x114>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80039aa:	f001 f82f 	bl	8004a0c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80039ae:	f000 fcd3 	bl	8004358 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80039b2:	f001 f85b 	bl	8004a6c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80039b6:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <vTaskSuspend+0x104>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d127      	bne.n	8003a10 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <vTaskSuspend+0x114>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80039c8:	4b18      	ldr	r3, [pc, #96]	; (8003a2c <vTaskSuspend+0x118>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <vTaskSuspend+0xd2>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60bb      	str	r3, [r7, #8]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <vTaskSuspend+0x11c>)
 80039e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039f6:	e00b      	b.n	8003a10 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <vTaskSuspend+0x110>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <vTaskSuspend+0x120>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d103      	bne.n	8003a0c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <vTaskSuspend+0x104>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
	}
 8003a0a:	e001      	b.n	8003a10 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003a0c:	f000 fa7e 	bl	8003f0c <vTaskSwitchContext>
	}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	2000052c 	.word	0x2000052c
 8003a1c:	20000530 	.word	0x20000530
 8003a20:	20000634 	.word	0x20000634
 8003a24:	20000618 	.word	0x20000618
 8003a28:	20000638 	.word	0x20000638
 8003a2c:	20000654 	.word	0x20000654
 8003a30:	e000ed04 	.word	0xe000ed04
 8003a34:	2000062c 	.word	0x2000062c

08003a38 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	60fb      	str	r3, [r7, #12]
}
 8003a60:	bf00      	nop
 8003a62:	e7fe      	b.n	8003a62 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <prvTaskIsTaskSuspended+0x6c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <prvTaskIsTaskSuspended+0x3a>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <prvTaskIsTaskSuspended+0x3c>
 8003a72:	2300      	movs	r3, #0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00f      	beq.n	8003a98 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <prvTaskIsTaskSuspended+0x70>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00a      	beq.n	8003a98 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <prvTaskIsTaskSuspended+0x56>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <prvTaskIsTaskSuspended+0x58>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a98:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	20000618 	.word	0x20000618
 8003aa8:	200005ec 	.word	0x200005ec

08003aac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <vTaskResume+0x28>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	60bb      	str	r3, [r7, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d039      	beq.n	8003b4e <vTaskResume+0xa2>
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <vTaskResume+0xac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d034      	beq.n	8003b4e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003ae4:	f000 ff92 	bl	8004a0c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ffa5 	bl	8003a38 <prvTaskIsTaskSuspended>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d02a      	beq.n	8003b4a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe ff0d 	bl	8002918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2201      	movs	r2, #1
 8003b04:	409a      	lsls	r2, r3
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <vTaskResume+0xb0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <vTaskResume+0xb0>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <vTaskResume+0xb4>)
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7fe fe9b 	bl	8002862 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <vTaskResume+0xac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d307      	bcc.n	8003b4a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <vTaskResume+0xb8>)
 8003b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003b4a:	f000 ff8f 	bl	8004a6c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	2000052c 	.word	0x2000052c
 8003b5c:	20000634 	.word	0x20000634
 8003b60:	20000530 	.word	0x20000530
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b76:	463a      	mov	r2, r7
 8003b78:	1d39      	adds	r1, r7, #4
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fae6 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	9202      	str	r2, [sp, #8]
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	460a      	mov	r2, r1
 8003b96:	4921      	ldr	r1, [pc, #132]	; (8003c1c <vTaskStartScheduler+0xb4>)
 8003b98:	4821      	ldr	r0, [pc, #132]	; (8003c20 <vTaskStartScheduler+0xb8>)
 8003b9a:	f7ff fce5 	bl	8003568 <xTaskCreateStatic>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <vTaskStartScheduler+0xbc>)
 8003ba2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <vTaskStartScheduler+0xbc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e001      	b.n	8003bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d11b      	bne.n	8003bf4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	613b      	str	r3, [r7, #16]
}
 8003bce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bd0:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <vTaskStartScheduler+0xc0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	334c      	adds	r3, #76	; 0x4c
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <vTaskStartScheduler+0xc4>)
 8003bd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <vTaskStartScheduler+0xc8>)
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <vTaskStartScheduler+0xcc>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003be8:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <vTaskStartScheduler+0xd0>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bee:	f000 fe9b 	bl	8004928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bf2:	e00e      	b.n	8003c12 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfa:	d10a      	bne.n	8003c12 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	60fb      	str	r3, [r7, #12]
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <vTaskStartScheduler+0xa8>
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08005240 	.word	0x08005240
 8003c20:	080041e5 	.word	0x080041e5
 8003c24:	20000650 	.word	0x20000650
 8003c28:	2000052c 	.word	0x2000052c
 8003c2c:	20000014 	.word	0x20000014
 8003c30:	2000064c 	.word	0x2000064c
 8003c34:	20000638 	.word	0x20000638
 8003c38:	20000630 	.word	0x20000630

08003c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <vTaskSuspendAll+0x18>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a03      	ldr	r2, [pc, #12]	; (8003c54 <vTaskSuspendAll+0x18>)
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000654 	.word	0x20000654

08003c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <xTaskResumeAll+0x114>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	603b      	str	r3, [r7, #0]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c84:	f000 fec2 	bl	8004a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c88:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <xTaskResumeAll+0x114>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <xTaskResumeAll+0x114>)
 8003c90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c92:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <xTaskResumeAll+0x114>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d161      	bne.n	8003d5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c9a:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <xTaskResumeAll+0x118>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d05d      	beq.n	8003d5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca2:	e02e      	b.n	8003d02 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <xTaskResumeAll+0x11c>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3318      	adds	r3, #24
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fe31 	bl	8002918 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fe2c 	bl	8002918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <xTaskResumeAll+0x120>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <xTaskResumeAll+0x120>)
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4a27      	ldr	r2, [pc, #156]	; (8003d7c <xTaskResumeAll+0x124>)
 8003ce0:	441a      	add	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7fe fdba 	bl	8002862 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <xTaskResumeAll+0x128>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d302      	bcc.n	8003d02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <xTaskResumeAll+0x12c>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <xTaskResumeAll+0x11c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1cc      	bne.n	8003ca4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d10:	f000 fb22 	bl	8004358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d14:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <xTaskResumeAll+0x130>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d010      	beq.n	8003d42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d20:	f000 f836 	bl	8003d90 <xTaskIncrementTick>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d2a:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <xTaskResumeAll+0x12c>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f1      	bne.n	8003d20 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <xTaskResumeAll+0x130>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <xTaskResumeAll+0x12c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <xTaskResumeAll+0x134>)
 8003d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d5e:	f000 fe85 	bl	8004a6c <vPortExitCritical>

	return xAlreadyYielded;
 8003d62:	68bb      	ldr	r3, [r7, #8]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000654 	.word	0x20000654
 8003d70:	2000062c 	.word	0x2000062c
 8003d74:	200005ec 	.word	0x200005ec
 8003d78:	20000634 	.word	0x20000634
 8003d7c:	20000530 	.word	0x20000530
 8003d80:	2000052c 	.word	0x2000052c
 8003d84:	20000640 	.word	0x20000640
 8003d88:	2000063c 	.word	0x2000063c
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d9a:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <xTaskIncrementTick+0x150>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f040 808d 	bne.w	8003ebe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003da4:	4b4f      	ldr	r3, [pc, #316]	; (8003ee4 <xTaskIncrementTick+0x154>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dac:	4a4d      	ldr	r2, [pc, #308]	; (8003ee4 <xTaskIncrementTick+0x154>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d120      	bne.n	8003dfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003db8:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <xTaskIncrementTick+0x158>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	603b      	str	r3, [r7, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <xTaskIncrementTick+0x46>
 8003dd8:	4b43      	ldr	r3, [pc, #268]	; (8003ee8 <xTaskIncrementTick+0x158>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	4b43      	ldr	r3, [pc, #268]	; (8003eec <xTaskIncrementTick+0x15c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <xTaskIncrementTick+0x158>)
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4a41      	ldr	r2, [pc, #260]	; (8003eec <xTaskIncrementTick+0x15c>)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <xTaskIncrementTick+0x160>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	4a3f      	ldr	r2, [pc, #252]	; (8003ef0 <xTaskIncrementTick+0x160>)
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	f000 faaf 	bl	8004358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <xTaskIncrementTick+0x164>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d34d      	bcc.n	8003ea0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e04:	4b38      	ldr	r3, [pc, #224]	; (8003ee8 <xTaskIncrementTick+0x158>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <xTaskIncrementTick+0x82>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <xTaskIncrementTick+0x84>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e18:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <xTaskIncrementTick+0x164>)
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e1e:	601a      	str	r2, [r3, #0]
					break;
 8003e20:	e03e      	b.n	8003ea0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <xTaskIncrementTick+0x158>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d203      	bcs.n	8003e42 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e3a:	4a2e      	ldr	r2, [pc, #184]	; (8003ef4 <xTaskIncrementTick+0x164>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6013      	str	r3, [r2, #0]
						break;
 8003e40:	e02e      	b.n	8003ea0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	3304      	adds	r3, #4
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fd66 	bl	8002918 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	3318      	adds	r3, #24
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fd5d 	bl	8002918 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	2201      	movs	r2, #1
 8003e64:	409a      	lsls	r2, r3
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <xTaskIncrementTick+0x168>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <xTaskIncrementTick+0x168>)
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <xTaskIncrementTick+0x16c>)
 8003e7e:	441a      	add	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f7fe fceb 	bl	8002862 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <xTaskIncrementTick+0x170>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d3b4      	bcc.n	8003e04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e9e:	e7b1      	b.n	8003e04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ea0:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <xTaskIncrementTick+0x170>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4915      	ldr	r1, [pc, #84]	; (8003efc <xTaskIncrementTick+0x16c>)
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d907      	bls.n	8003ec8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e004      	b.n	8003ec8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <xTaskIncrementTick+0x174>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4a0f      	ldr	r2, [pc, #60]	; (8003f04 <xTaskIncrementTick+0x174>)
 8003ec6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <xTaskIncrementTick+0x178>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ed4:	697b      	ldr	r3, [r7, #20]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000654 	.word	0x20000654
 8003ee4:	20000630 	.word	0x20000630
 8003ee8:	200005e4 	.word	0x200005e4
 8003eec:	200005e8 	.word	0x200005e8
 8003ef0:	20000644 	.word	0x20000644
 8003ef4:	2000064c 	.word	0x2000064c
 8003ef8:	20000634 	.word	0x20000634
 8003efc:	20000530 	.word	0x20000530
 8003f00:	2000052c 	.word	0x2000052c
 8003f04:	2000063c 	.word	0x2000063c
 8003f08:	20000640 	.word	0x20000640

08003f0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f12:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <vTaskSwitchContext+0xac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f1a:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <vTaskSwitchContext+0xb0>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f20:	e044      	b.n	8003fac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003f22:	4b26      	ldr	r3, [pc, #152]	; (8003fbc <vTaskSwitchContext+0xb0>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <vTaskSwitchContext+0xb4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f36:	7afb      	ldrb	r3, [r7, #11]
 8003f38:	f1c3 031f 	rsb	r3, r3, #31
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	4921      	ldr	r1, [pc, #132]	; (8003fc4 <vTaskSwitchContext+0xb8>)
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	607b      	str	r3, [r7, #4]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <vTaskSwitchContext+0x5a>
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <vTaskSwitchContext+0xb8>)
 8003f74:	4413      	add	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d104      	bne.n	8003f98 <vTaskSwitchContext+0x8c>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <vTaskSwitchContext+0xbc>)
 8003fa0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <vTaskSwitchContext+0xbc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	334c      	adds	r3, #76	; 0x4c
 8003fa8:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <vTaskSwitchContext+0xc0>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000654 	.word	0x20000654
 8003fbc:	20000640 	.word	0x20000640
 8003fc0:	20000634 	.word	0x20000634
 8003fc4:	20000530 	.word	0x20000530
 8003fc8:	2000052c 	.word	0x2000052c
 8003fcc:	20000014 	.word	0x20000014

08003fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ff6:	4b07      	ldr	r3, [pc, #28]	; (8004014 <vTaskPlaceOnEventList+0x44>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe fc52 	bl	80028a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004004:	2101      	movs	r1, #1
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	f000 fba8 	bl	800475c <prvAddCurrentTaskToDelayedList>
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2000052c 	.word	0x2000052c

08004018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	60fb      	str	r3, [r7, #12]
}
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3318      	adds	r3, #24
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fc65 	bl	8002918 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <xTaskRemoveFromEventList+0xac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d11c      	bne.n	8004090 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3304      	adds	r3, #4
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fc5c 	bl	8002918 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	2201      	movs	r2, #1
 8004066:	409a      	lsls	r2, r3
 8004068:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <xTaskRemoveFromEventList+0xb0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4313      	orrs	r3, r2
 800406e:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <xTaskRemoveFromEventList+0xb0>)
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <xTaskRemoveFromEventList+0xb4>)
 8004080:	441a      	add	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7fe fbea 	bl	8002862 <vListInsertEnd>
 800408e:	e005      	b.n	800409c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	3318      	adds	r3, #24
 8004094:	4619      	mov	r1, r3
 8004096:	480e      	ldr	r0, [pc, #56]	; (80040d0 <xTaskRemoveFromEventList+0xb8>)
 8004098:	f7fe fbe3 	bl	8002862 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <xTaskRemoveFromEventList+0xbc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d905      	bls.n	80040b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040aa:	2301      	movs	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <xTaskRemoveFromEventList+0xc0>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e001      	b.n	80040ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80040ba:	697b      	ldr	r3, [r7, #20]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000654 	.word	0x20000654
 80040c8:	20000634 	.word	0x20000634
 80040cc:	20000530 	.word	0x20000530
 80040d0:	200005ec 	.word	0x200005ec
 80040d4:	2000052c 	.word	0x2000052c
 80040d8:	20000640 	.word	0x20000640

080040dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <vTaskInternalSetTimeOutState+0x24>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <vTaskInternalSetTimeOutState+0x28>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	605a      	str	r2, [r3, #4]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000644 	.word	0x20000644
 8004104:	20000630 	.word	0x20000630

08004108 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	613b      	str	r3, [r7, #16]
}
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	60fb      	str	r3, [r7, #12]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800414a:	f000 fc5f 	bl	8004a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800414e:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <xTaskCheckForTimeOut+0xbc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004166:	d102      	bne.n	800416e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e023      	b.n	80041b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <xTaskCheckForTimeOut+0xc0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d007      	beq.n	800418a <xTaskCheckForTimeOut+0x82>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004184:	2301      	movs	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e015      	b.n	80041b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	429a      	cmp	r2, r3
 8004192:	d20b      	bcs.n	80041ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff9b 	bl	80040dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e004      	b.n	80041b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041b6:	f000 fc59 	bl	8004a6c <vPortExitCritical>

	return xReturn;
 80041ba:	69fb      	ldr	r3, [r7, #28]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000630 	.word	0x20000630
 80041c8:	20000644 	.word	0x20000644

080041cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <vTaskMissedYield+0x14>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000640 	.word	0x20000640

080041e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041ec:	f000 f852 	bl	8004294 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <prvIdleTask+0x28>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d9f9      	bls.n	80041ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <prvIdleTask+0x2c>)
 80041fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004208:	e7f0      	b.n	80041ec <prvIdleTask+0x8>
 800420a:	bf00      	nop
 800420c:	20000530 	.word	0x20000530
 8004210:	e000ed04 	.word	0xe000ed04

08004214 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	e00c      	b.n	800423a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <prvInitialiseTaskLists+0x60>)
 800422c:	4413      	add	r3, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe faec 	bl	800280c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3301      	adds	r3, #1
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b06      	cmp	r3, #6
 800423e:	d9ef      	bls.n	8004220 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004240:	480d      	ldr	r0, [pc, #52]	; (8004278 <prvInitialiseTaskLists+0x64>)
 8004242:	f7fe fae3 	bl	800280c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004246:	480d      	ldr	r0, [pc, #52]	; (800427c <prvInitialiseTaskLists+0x68>)
 8004248:	f7fe fae0 	bl	800280c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800424c:	480c      	ldr	r0, [pc, #48]	; (8004280 <prvInitialiseTaskLists+0x6c>)
 800424e:	f7fe fadd 	bl	800280c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004252:	480c      	ldr	r0, [pc, #48]	; (8004284 <prvInitialiseTaskLists+0x70>)
 8004254:	f7fe fada 	bl	800280c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004258:	480b      	ldr	r0, [pc, #44]	; (8004288 <prvInitialiseTaskLists+0x74>)
 800425a:	f7fe fad7 	bl	800280c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <prvInitialiseTaskLists+0x78>)
 8004260:	4a05      	ldr	r2, [pc, #20]	; (8004278 <prvInitialiseTaskLists+0x64>)
 8004262:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <prvInitialiseTaskLists+0x7c>)
 8004266:	4a05      	ldr	r2, [pc, #20]	; (800427c <prvInitialiseTaskLists+0x68>)
 8004268:	601a      	str	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000530 	.word	0x20000530
 8004278:	200005bc 	.word	0x200005bc
 800427c:	200005d0 	.word	0x200005d0
 8004280:	200005ec 	.word	0x200005ec
 8004284:	20000600 	.word	0x20000600
 8004288:	20000618 	.word	0x20000618
 800428c:	200005e4 	.word	0x200005e4
 8004290:	200005e8 	.word	0x200005e8

08004294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800429a:	e019      	b.n	80042d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800429c:	f000 fbb6 	bl	8004a0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <prvCheckTasksWaitingTermination+0x50>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fe fb33 	bl	8002918 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <prvCheckTasksWaitingTermination+0x54>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <prvCheckTasksWaitingTermination+0x54>)
 80042ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <prvCheckTasksWaitingTermination+0x58>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <prvCheckTasksWaitingTermination+0x58>)
 80042c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042c6:	f000 fbd1 	bl	8004a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f810 	bl	80042f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <prvCheckTasksWaitingTermination+0x58>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e1      	bne.n	800429c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000600 	.word	0x20000600
 80042e8:	2000062c 	.word	0x2000062c
 80042ec:	20000614 	.word	0x20000614

080042f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	334c      	adds	r3, #76	; 0x4c
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fea7 	bl	8005050 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d108      	bne.n	800431e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fd3f 	bl	8004d94 <vPortFree>
				vPortFree( pxTCB );
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fd3c 	bl	8004d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800431c:	e018      	b.n	8004350 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d103      	bne.n	8004330 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fd33 	bl	8004d94 <vPortFree>
	}
 800432e:	e00f      	b.n	8004350 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004336:	2b02      	cmp	r3, #2
 8004338:	d00a      	beq.n	8004350 <prvDeleteTCB+0x60>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	60fb      	str	r3, [r7, #12]
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <prvDeleteTCB+0x5e>
	}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800435e:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <prvResetNextTaskUnblockTime+0x40>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <prvResetNextTaskUnblockTime+0x14>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <prvResetNextTaskUnblockTime+0x16>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvResetNextTaskUnblockTime+0x44>)
 8004374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004378:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800437a:	e008      	b.n	800438e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <prvResetNextTaskUnblockTime+0x40>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4a04      	ldr	r2, [pc, #16]	; (800439c <prvResetNextTaskUnblockTime+0x44>)
 800438c:	6013      	str	r3, [r2, #0]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	200005e4 	.word	0x200005e4
 800439c:	2000064c 	.word	0x2000064c

080043a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <xTaskGetSchedulerState+0x34>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043ae:	2301      	movs	r3, #1
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	e008      	b.n	80043c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <xTaskGetSchedulerState+0x38>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043bc:	2302      	movs	r3, #2
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	e001      	b.n	80043c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043c6:	687b      	ldr	r3, [r7, #4]
	}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000638 	.word	0x20000638
 80043d8:	20000654 	.word	0x20000654

080043dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d06e      	beq.n	80044d0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4b39      	ldr	r3, [pc, #228]	; (80044dc <xTaskPriorityInherit+0x100>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d25e      	bcs.n	80044be <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	db06      	blt.n	8004416 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004408:	4b34      	ldr	r3, [pc, #208]	; (80044dc <xTaskPriorityInherit+0x100>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	f1c3 0207 	rsb	r2, r3, #7
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6959      	ldr	r1, [r3, #20]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a2e      	ldr	r2, [pc, #184]	; (80044e0 <xTaskPriorityInherit+0x104>)
 8004428:	4413      	add	r3, r2
 800442a:	4299      	cmp	r1, r3
 800442c:	d101      	bne.n	8004432 <xTaskPriorityInherit+0x56>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <xTaskPriorityInherit+0x58>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d03a      	beq.n	80044ae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe fa6b 	bl	8002918 <uxListRemove>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d115      	bne.n	8004474 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4924      	ldr	r1, [pc, #144]	; (80044e0 <xTaskPriorityInherit+0x104>)
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <xTaskPriorityInherit+0x98>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	2201      	movs	r2, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43da      	mvns	r2, r3
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <xTaskPriorityInherit+0x108>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4013      	ands	r3, r2
 8004470:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <xTaskPriorityInherit+0x108>)
 8004472:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004474:	4b19      	ldr	r3, [pc, #100]	; (80044dc <xTaskPriorityInherit+0x100>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	2201      	movs	r2, #1
 8004484:	409a      	lsls	r2, r3
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <xTaskPriorityInherit+0x108>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4313      	orrs	r3, r2
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <xTaskPriorityInherit+0x108>)
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <xTaskPriorityInherit+0x104>)
 800449e:	441a      	add	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7fe f9db 	bl	8002862 <vListInsertEnd>
 80044ac:	e004      	b.n	80044b8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <xTaskPriorityInherit+0x100>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e008      	b.n	80044d0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <xTaskPriorityInherit+0x100>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d201      	bcs.n	80044d0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044d0:	68fb      	ldr	r3, [r7, #12]
	}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2000052c 	.word	0x2000052c
 80044e0:	20000530 	.word	0x20000530
 80044e4:	20000634 	.word	0x20000634

080044e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d06e      	beq.n	80045dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044fe:	4b3a      	ldr	r3, [pc, #232]	; (80045e8 <xTaskPriorityDisinherit+0x100>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	429a      	cmp	r2, r3
 8004506:	d00a      	beq.n	800451e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60fb      	str	r3, [r7, #12]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004540:	1e5a      	subs	r2, r3, #1
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	429a      	cmp	r2, r3
 8004550:	d044      	beq.n	80045dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	2b00      	cmp	r3, #0
 8004558:	d140      	bne.n	80045dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	3304      	adds	r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe f9da 	bl	8002918 <uxListRemove>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d115      	bne.n	8004596 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	491f      	ldr	r1, [pc, #124]	; (80045ec <xTaskPriorityDisinherit+0x104>)
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <xTaskPriorityDisinherit+0xae>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	2201      	movs	r2, #1
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43da      	mvns	r2, r3
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <xTaskPriorityDisinherit+0x108>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4013      	ands	r3, r2
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <xTaskPriorityDisinherit+0x108>)
 8004594:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	f1c3 0207 	rsb	r2, r3, #7
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	2201      	movs	r2, #1
 80045b0:	409a      	lsls	r2, r3
 80045b2:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <xTaskPriorityDisinherit+0x108>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <xTaskPriorityDisinherit+0x108>)
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4a08      	ldr	r2, [pc, #32]	; (80045ec <xTaskPriorityDisinherit+0x104>)
 80045ca:	441a      	add	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7fe f945 	bl	8002862 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045d8:	2301      	movs	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045dc:	697b      	ldr	r3, [r7, #20]
	}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	2000052c 	.word	0x2000052c
 80045ec:	20000530 	.word	0x20000530
 80045f0:	20000634 	.word	0x20000634

080045f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004602:	2301      	movs	r3, #1
 8004604:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8088 	beq.w	800471e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60fb      	str	r3, [r7, #12]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d902      	bls.n	800463c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	e002      	b.n	8004642 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	d068      	beq.n	800471e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	429a      	cmp	r2, r3
 8004654:	d163      	bne.n	800471e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004656:	4b34      	ldr	r3, [pc, #208]	; (8004728 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	429a      	cmp	r2, r3
 800465e:	d10a      	bne.n	8004676 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	60bb      	str	r3, [r7, #8]
}
 8004672:	bf00      	nop
 8004674:	e7fe      	b.n	8004674 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db04      	blt.n	8004694 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f1c3 0207 	rsb	r2, r3, #7
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	6959      	ldr	r1, [r3, #20]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4a22      	ldr	r2, [pc, #136]	; (800472c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80046a4:	4413      	add	r3, r2
 80046a6:	4299      	cmp	r1, r3
 80046a8:	d101      	bne.n	80046ae <vTaskPriorityDisinheritAfterTimeout+0xba>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d034      	beq.n	800471e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe f92d 	bl	8002918 <uxListRemove>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d115      	bne.n	80046f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	4918      	ldr	r1, [pc, #96]	; (800472c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	2201      	movs	r2, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43da      	mvns	r2, r3
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4013      	ands	r3, r2
 80046ec:	4a10      	ldr	r2, [pc, #64]	; (8004730 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80046ee:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	2201      	movs	r2, #1
 80046f6:	409a      	lsls	r2, r3
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4a07      	ldr	r2, [pc, #28]	; (800472c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004710:	441a      	add	r2, r3
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7fe f8a2 	bl	8002862 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800471e:	bf00      	nop
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	2000052c 	.word	0x2000052c
 800472c:	20000530 	.word	0x20000530
 8004730:	20000634 	.word	0x20000634

08004734 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <pvTaskIncrementMutexHeldCount+0x24>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <pvTaskIncrementMutexHeldCount+0x24>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004746:	3201      	adds	r2, #1
 8004748:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800474a:	4b03      	ldr	r3, [pc, #12]	; (8004758 <pvTaskIncrementMutexHeldCount+0x24>)
 800474c:	681b      	ldr	r3, [r3, #0]
	}
 800474e:	4618      	mov	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	2000052c 	.word	0x2000052c

0800475c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004766:	4b29      	ldr	r3, [pc, #164]	; (800480c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800476c:	4b28      	ldr	r3, [pc, #160]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3304      	adds	r3, #4
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe f8d0 	bl	8002918 <uxListRemove>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800477e:	4b24      	ldr	r3, [pc, #144]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	2201      	movs	r2, #1
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43da      	mvns	r2, r3
 800478c:	4b21      	ldr	r3, [pc, #132]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4013      	ands	r3, r2
 8004792:	4a20      	ldr	r2, [pc, #128]	; (8004814 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004794:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479c:	d10a      	bne.n	80047b4 <prvAddCurrentTaskToDelayedList+0x58>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a4:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	481a      	ldr	r0, [pc, #104]	; (8004818 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047ae:	f7fe f858 	bl	8002862 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047b2:	e026      	b.n	8004802 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047bc:	4b14      	ldr	r3, [pc, #80]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d209      	bcs.n	80047e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047cc:	4b13      	ldr	r3, [pc, #76]	; (800481c <prvAddCurrentTaskToDelayedList+0xc0>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fe f865 	bl	80028a8 <vListInsert>
}
 80047de:	e010      	b.n	8004802 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <prvAddCurrentTaskToDelayedList+0xc4>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe f85b 	bl	80028a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d202      	bcs.n	8004802 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047fc:	4a09      	ldr	r2, [pc, #36]	; (8004824 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6013      	str	r3, [r2, #0]
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000630 	.word	0x20000630
 8004810:	2000052c 	.word	0x2000052c
 8004814:	20000634 	.word	0x20000634
 8004818:	20000618 	.word	0x20000618
 800481c:	200005e8 	.word	0x200005e8
 8004820:	200005e4 	.word	0x200005e4
 8004824:	2000064c 	.word	0x2000064c

08004828 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3b04      	subs	r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b04      	subs	r3, #4
 8004846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f023 0201 	bic.w	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3b04      	subs	r3, #4
 8004856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004858:	4a08      	ldr	r2, [pc, #32]	; (800487c <pxPortInitialiseStack+0x54>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3b14      	subs	r3, #20
 8004862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3b20      	subs	r3, #32
 800486e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004870:	68fb      	ldr	r3, [r7, #12]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	08004881 	.word	0x08004881

08004880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <prvTaskExitError+0x54>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004892:	d00a      	beq.n	80048aa <prvTaskExitError+0x2a>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	60fb      	str	r3, [r7, #12]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <prvTaskExitError+0x28>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60bb      	str	r3, [r7, #8]
}
 80048bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048be:	bf00      	nop
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0fc      	beq.n	80048c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000010 	.word	0x20000010
	...

080048e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <pxCurrentTCBConst2>)
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	6808      	ldr	r0, [r1, #0]
 80048e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048ea:	f380 8809 	msr	PSP, r0
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8811 	msr	BASEPRI, r0
 80048fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80048fe:	4770      	bx	lr

08004900 <pxCurrentTCBConst2>:
 8004900:	2000052c 	.word	0x2000052c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004908:	4806      	ldr	r0, [pc, #24]	; (8004924 <prvPortStartFirstTask+0x1c>)
 800490a:	6800      	ldr	r0, [r0, #0]
 800490c:	6800      	ldr	r0, [r0, #0]
 800490e:	f380 8808 	msr	MSP, r0
 8004912:	b662      	cpsie	i
 8004914:	b661      	cpsie	f
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	df00      	svc	0
 8004920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004922:	bf00      	nop
 8004924:	e000ed08 	.word	0xe000ed08

08004928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <xPortStartScheduler+0xd0>)
 8004930:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	22ff      	movs	r2, #255	; 0xff
 800493e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <xPortStartScheduler+0xd4>)
 8004954:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004956:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004958:	2207      	movs	r2, #7
 800495a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800495c:	e009      	b.n	8004972 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004966:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d0ef      	beq.n	800495e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <xPortStartScheduler+0xd8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1c3 0307 	rsb	r3, r3, #7
 8004986:	2b04      	cmp	r3, #4
 8004988:	d00a      	beq.n	80049a0 <xPortStartScheduler+0x78>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049b2:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <xPortStartScheduler+0xd8>)
 80049b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a10      	ldr	r2, [pc, #64]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <xPortStartScheduler+0xdc>)
 80049d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049d6:	f000 f8b9 	bl	8004b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <xPortStartScheduler+0xe0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049e0:	f7ff ff92 	bl	8004908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049e4:	f7ff fa92 	bl	8003f0c <vTaskSwitchContext>
	prvTaskExitError();
 80049e8:	f7ff ff4a 	bl	8004880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	e000e400 	.word	0xe000e400
 80049fc:	20000658 	.word	0x20000658
 8004a00:	2000065c 	.word	0x2000065c
 8004a04:	e000ed20 	.word	0xe000ed20
 8004a08:	20000010 	.word	0x20000010

08004a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	607b      	str	r3, [r7, #4]
}
 8004a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <vPortEnterCritical+0x58>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10f      	bne.n	8004a58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <vPortEnterCritical+0x5c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	603b      	str	r3, [r7, #0]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vPortEnterCritical+0x4a>
	}
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000010 	.word	0x20000010
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <vPortExitCritical+0x24>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	607b      	str	r3, [r7, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <vPortExitCritical+0x4c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <vPortExitCritical+0x42>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f383 8811 	msr	BASEPRI, r3
}
 8004aac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	20000010 	.word	0x20000010
 8004abc:	00000000 	.word	0x00000000

08004ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ac0:	f3ef 8009 	mrs	r0, PSP
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <pxCurrentTCBConst>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ad0:	6010      	str	r0, [r2, #0]
 8004ad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ad6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ada:	f380 8811 	msr	BASEPRI, r0
 8004ade:	f7ff fa15 	bl	8003f0c <vTaskSwitchContext>
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8811 	msr	BASEPRI, r0
 8004aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	6808      	ldr	r0, [r1, #0]
 8004af2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004af6:	f380 8809 	msr	PSP, r0
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	4770      	bx	lr

08004b00 <pxCurrentTCBConst>:
 8004b00:	2000052c 	.word	0x2000052c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop

08004b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	607b      	str	r3, [r7, #4]
}
 8004b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b22:	f7ff f935 	bl	8003d90 <xTaskIncrementTick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <xPortSysTickHandler+0x40>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <vPortSetupTimerInterrupt+0x30>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <vPortSetupTimerInterrupt+0x38>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <vPortSetupTimerInterrupt+0x3c>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <vPortSetupTimerInterrupt+0x40>)
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b6e:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <vPortSetupTimerInterrupt+0x30>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e010 	.word	0xe000e010
 8004b80:	e000e018 	.word	0xe000e018
 8004b84:	20000004 	.word	0x20000004
 8004b88:	10624dd3 	.word	0x10624dd3
 8004b8c:	e000e014 	.word	0xe000e014

08004b90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b96:	f3ef 8305 	mrs	r3, IPSR
 8004b9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d914      	bls.n	8004bcc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <vPortValidateInterruptPriority+0x6c>)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <vPortValidateInterruptPriority+0x70>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	7afa      	ldrb	r2, [r7, #11]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d20a      	bcs.n	8004bcc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	607b      	str	r3, [r7, #4]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <vPortValidateInterruptPriority+0x74>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <vPortValidateInterruptPriority+0x78>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d90a      	bls.n	8004bf2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	603b      	str	r3, [r7, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <vPortValidateInterruptPriority+0x60>
	}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	e000e3f0 	.word	0xe000e3f0
 8004c00:	20000658 	.word	0x20000658
 8004c04:	e000ed0c 	.word	0xe000ed0c
 8004c08:	2000065c 	.word	0x2000065c

08004c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c18:	f7ff f810 	bl	8003c3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c1c:	4b58      	ldr	r3, [pc, #352]	; (8004d80 <pvPortMalloc+0x174>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c24:	f000 f910 	bl	8004e48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c28:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <pvPortMalloc+0x178>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f040 808e 	bne.w	8004d52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01d      	beq.n	8004c78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c3c:	2208      	movs	r2, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f023 0307 	bic.w	r3, r3, #7
 8004c54:	3308      	adds	r3, #8
 8004c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <pvPortMalloc+0x6c>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	617b      	str	r3, [r7, #20]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d069      	beq.n	8004d52 <pvPortMalloc+0x146>
 8004c7e:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <pvPortMalloc+0x17c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d864      	bhi.n	8004d52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c88:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <pvPortMalloc+0x180>)
 8004c8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c8c:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <pvPortMalloc+0x180>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c92:	e004      	b.n	8004c9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d903      	bls.n	8004cb0 <pvPortMalloc+0xa4>
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f1      	bne.n	8004c94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cb0:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <pvPortMalloc+0x174>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d04b      	beq.n	8004d52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	4413      	add	r3, r2
 8004cc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d91f      	bls.n	8004d1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <pvPortMalloc+0xf8>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	613b      	str	r3, [r7, #16]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d16:	69b8      	ldr	r0, [r7, #24]
 8004d18:	f000 f8f8 	bl	8004f0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d2a:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <pvPortMalloc+0x184>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d203      	bcs.n	8004d3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <pvPortMalloc+0x17c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <pvPortMalloc+0x184>)
 8004d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <pvPortMalloc+0x178>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d52:	f7fe ff81 	bl	8003c58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <pvPortMalloc+0x16a>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <pvPortMalloc+0x168>
	return pvReturn;
 8004d76:	69fb      	ldr	r3, [r7, #28]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	200019f0 	.word	0x200019f0
 8004d84:	200019fc 	.word	0x200019fc
 8004d88:	200019f4 	.word	0x200019f4
 8004d8c:	200019e8 	.word	0x200019e8
 8004d90:	200019f8 	.word	0x200019f8

08004d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d048      	beq.n	8004e38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004da6:	2308      	movs	r3, #8
 8004da8:	425b      	negs	r3, r3
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <vPortFree+0xac>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <vPortFree+0x44>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60fb      	str	r3, [r7, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <vPortFree+0x62>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60bb      	str	r3, [r7, #8]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <vPortFree+0xac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d019      	beq.n	8004e38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d115      	bne.n	8004e38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <vPortFree+0xac>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	401a      	ands	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e1c:	f7fe ff0e 	bl	8003c3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <vPortFree+0xb0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <vPortFree+0xb0>)
 8004e2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e2e:	6938      	ldr	r0, [r7, #16]
 8004e30:	f000 f86c 	bl	8004f0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e34:	f7fe ff10 	bl	8003c58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	200019fc 	.word	0x200019fc
 8004e44:	200019f4 	.word	0x200019f4

08004e48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <prvHeapInit+0xac>)
 8004e56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3307      	adds	r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0307 	bic.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <prvHeapInit+0xac>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <prvHeapInit+0xb0>)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <prvHeapInit+0xb0>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	4413      	add	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e94:	2208      	movs	r2, #8
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <prvHeapInit+0xb4>)
 8004ea8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004eaa:	4b14      	ldr	r3, [pc, #80]	; (8004efc <prvHeapInit+0xb4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <prvHeapInit+0xb4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	1ad2      	subs	r2, r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <prvHeapInit+0xb4>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <prvHeapInit+0xb8>)
 8004ed6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <prvHeapInit+0xbc>)
 8004ede:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <prvHeapInit+0xc0>)
 8004ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ee6:	601a      	str	r2, [r3, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000660 	.word	0x20000660
 8004ef8:	200019e8 	.word	0x200019e8
 8004efc:	200019f0 	.word	0x200019f0
 8004f00:	200019f8 	.word	0x200019f8
 8004f04:	200019f4 	.word	0x200019f4
 8004f08:	200019fc 	.word	0x200019fc

08004f0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f14:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <prvInsertBlockIntoFreeList+0xa8>)
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e002      	b.n	8004f20 <prvInsertBlockIntoFreeList+0x14>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d8f7      	bhi.n	8004f1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4413      	add	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d108      	bne.n	8004f4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d118      	bne.n	8004f94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvInsertBlockIntoFreeList+0xac>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d00d      	beq.n	8004f8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	441a      	add	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e008      	b.n	8004f9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <prvInsertBlockIntoFreeList+0xac>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e003      	b.n	8004f9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d002      	beq.n	8004faa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	200019e8 	.word	0x200019e8
 8004fb8:	200019f0 	.word	0x200019f0

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	4d0c      	ldr	r5, [pc, #48]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc2:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	f000 f8f0 	bl	80051b0 <_init>
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	4d0a      	ldr	r5, [pc, #40]	; (8004ffc <__libc_init_array+0x40>)
 8004fd4:	4c0a      	ldr	r4, [pc, #40]	; (8005000 <__libc_init_array+0x44>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	080052d4 	.word	0x080052d4
 8004ff8:	080052d4 	.word	0x080052d4
 8004ffc:	080052d4 	.word	0x080052d4
 8005000:	080052d8 	.word	0x080052d8

08005004 <__retarget_lock_acquire_recursive>:
 8005004:	4770      	bx	lr

08005006 <__retarget_lock_release_recursive>:
 8005006:	4770      	bx	lr

08005008 <memcpy>:
 8005008:	440a      	add	r2, r1
 800500a:	4291      	cmp	r1, r2
 800500c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005010:	d100      	bne.n	8005014 <memcpy+0xc>
 8005012:	4770      	bx	lr
 8005014:	b510      	push	{r4, lr}
 8005016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800501a:	4291      	cmp	r1, r2
 800501c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005020:	d1f9      	bne.n	8005016 <memcpy+0xe>
 8005022:	bd10      	pop	{r4, pc}

08005024 <memset>:
 8005024:	4603      	mov	r3, r0
 8005026:	4402      	add	r2, r0
 8005028:	4293      	cmp	r3, r2
 800502a:	d100      	bne.n	800502e <memset+0xa>
 800502c:	4770      	bx	lr
 800502e:	f803 1b01 	strb.w	r1, [r3], #1
 8005032:	e7f9      	b.n	8005028 <memset+0x4>

08005034 <cleanup_glue>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	460c      	mov	r4, r1
 8005038:	6809      	ldr	r1, [r1, #0]
 800503a:	4605      	mov	r5, r0
 800503c:	b109      	cbz	r1, 8005042 <cleanup_glue+0xe>
 800503e:	f7ff fff9 	bl	8005034 <cleanup_glue>
 8005042:	4621      	mov	r1, r4
 8005044:	4628      	mov	r0, r5
 8005046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800504a:	f000 b869 	b.w	8005120 <_free_r>
	...

08005050 <_reclaim_reent>:
 8005050:	4b2c      	ldr	r3, [pc, #176]	; (8005104 <_reclaim_reent+0xb4>)
 8005052:	b570      	push	{r4, r5, r6, lr}
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4604      	mov	r4, r0
 8005058:	4283      	cmp	r3, r0
 800505a:	d051      	beq.n	8005100 <_reclaim_reent+0xb0>
 800505c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800505e:	b143      	cbz	r3, 8005072 <_reclaim_reent+0x22>
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d14a      	bne.n	80050fc <_reclaim_reent+0xac>
 8005066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	b111      	cbz	r1, 8005072 <_reclaim_reent+0x22>
 800506c:	4620      	mov	r0, r4
 800506e:	f000 f857 	bl	8005120 <_free_r>
 8005072:	6961      	ldr	r1, [r4, #20]
 8005074:	b111      	cbz	r1, 800507c <_reclaim_reent+0x2c>
 8005076:	4620      	mov	r0, r4
 8005078:	f000 f852 	bl	8005120 <_free_r>
 800507c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800507e:	b111      	cbz	r1, 8005086 <_reclaim_reent+0x36>
 8005080:	4620      	mov	r0, r4
 8005082:	f000 f84d 	bl	8005120 <_free_r>
 8005086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005088:	b111      	cbz	r1, 8005090 <_reclaim_reent+0x40>
 800508a:	4620      	mov	r0, r4
 800508c:	f000 f848 	bl	8005120 <_free_r>
 8005090:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005092:	b111      	cbz	r1, 800509a <_reclaim_reent+0x4a>
 8005094:	4620      	mov	r0, r4
 8005096:	f000 f843 	bl	8005120 <_free_r>
 800509a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800509c:	b111      	cbz	r1, 80050a4 <_reclaim_reent+0x54>
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 f83e 	bl	8005120 <_free_r>
 80050a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80050a6:	b111      	cbz	r1, 80050ae <_reclaim_reent+0x5e>
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 f839 	bl	8005120 <_free_r>
 80050ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80050b0:	b111      	cbz	r1, 80050b8 <_reclaim_reent+0x68>
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f834 	bl	8005120 <_free_r>
 80050b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ba:	b111      	cbz	r1, 80050c2 <_reclaim_reent+0x72>
 80050bc:	4620      	mov	r0, r4
 80050be:	f000 f82f 	bl	8005120 <_free_r>
 80050c2:	69a3      	ldr	r3, [r4, #24]
 80050c4:	b1e3      	cbz	r3, 8005100 <_reclaim_reent+0xb0>
 80050c6:	4620      	mov	r0, r4
 80050c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050ca:	4798      	blx	r3
 80050cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80050ce:	b1b9      	cbz	r1, 8005100 <_reclaim_reent+0xb0>
 80050d0:	4620      	mov	r0, r4
 80050d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050d6:	f7ff bfad 	b.w	8005034 <cleanup_glue>
 80050da:	5949      	ldr	r1, [r1, r5]
 80050dc:	b941      	cbnz	r1, 80050f0 <_reclaim_reent+0xa0>
 80050de:	3504      	adds	r5, #4
 80050e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e2:	2d80      	cmp	r5, #128	; 0x80
 80050e4:	68d9      	ldr	r1, [r3, #12]
 80050e6:	d1f8      	bne.n	80050da <_reclaim_reent+0x8a>
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 f819 	bl	8005120 <_free_r>
 80050ee:	e7ba      	b.n	8005066 <_reclaim_reent+0x16>
 80050f0:	680e      	ldr	r6, [r1, #0]
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 f814 	bl	8005120 <_free_r>
 80050f8:	4631      	mov	r1, r6
 80050fa:	e7ef      	b.n	80050dc <_reclaim_reent+0x8c>
 80050fc:	2500      	movs	r5, #0
 80050fe:	e7ef      	b.n	80050e0 <_reclaim_reent+0x90>
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	bf00      	nop
 8005104:	20000014 	.word	0x20000014

08005108 <__malloc_lock>:
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <__malloc_lock+0x8>)
 800510a:	f7ff bf7b 	b.w	8005004 <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	20001a00 	.word	0x20001a00

08005114 <__malloc_unlock>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__malloc_unlock+0x8>)
 8005116:	f7ff bf76 	b.w	8005006 <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	20001a00 	.word	0x20001a00

08005120 <_free_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4605      	mov	r5, r0
 8005124:	2900      	cmp	r1, #0
 8005126:	d040      	beq.n	80051aa <_free_r+0x8a>
 8005128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512c:	1f0c      	subs	r4, r1, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	bfb8      	it	lt
 8005132:	18e4      	addlt	r4, r4, r3
 8005134:	f7ff ffe8 	bl	8005108 <__malloc_lock>
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <_free_r+0x8c>)
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	b933      	cbnz	r3, 800514c <_free_r+0x2c>
 800513e:	6063      	str	r3, [r4, #4]
 8005140:	6014      	str	r4, [r2, #0]
 8005142:	4628      	mov	r0, r5
 8005144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005148:	f7ff bfe4 	b.w	8005114 <__malloc_unlock>
 800514c:	42a3      	cmp	r3, r4
 800514e:	d908      	bls.n	8005162 <_free_r+0x42>
 8005150:	6820      	ldr	r0, [r4, #0]
 8005152:	1821      	adds	r1, r4, r0
 8005154:	428b      	cmp	r3, r1
 8005156:	bf01      	itttt	eq
 8005158:	6819      	ldreq	r1, [r3, #0]
 800515a:	685b      	ldreq	r3, [r3, #4]
 800515c:	1809      	addeq	r1, r1, r0
 800515e:	6021      	streq	r1, [r4, #0]
 8005160:	e7ed      	b.n	800513e <_free_r+0x1e>
 8005162:	461a      	mov	r2, r3
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	b10b      	cbz	r3, 800516c <_free_r+0x4c>
 8005168:	42a3      	cmp	r3, r4
 800516a:	d9fa      	bls.n	8005162 <_free_r+0x42>
 800516c:	6811      	ldr	r1, [r2, #0]
 800516e:	1850      	adds	r0, r2, r1
 8005170:	42a0      	cmp	r0, r4
 8005172:	d10b      	bne.n	800518c <_free_r+0x6c>
 8005174:	6820      	ldr	r0, [r4, #0]
 8005176:	4401      	add	r1, r0
 8005178:	1850      	adds	r0, r2, r1
 800517a:	4283      	cmp	r3, r0
 800517c:	6011      	str	r1, [r2, #0]
 800517e:	d1e0      	bne.n	8005142 <_free_r+0x22>
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4401      	add	r1, r0
 8005186:	6011      	str	r1, [r2, #0]
 8005188:	6053      	str	r3, [r2, #4]
 800518a:	e7da      	b.n	8005142 <_free_r+0x22>
 800518c:	d902      	bls.n	8005194 <_free_r+0x74>
 800518e:	230c      	movs	r3, #12
 8005190:	602b      	str	r3, [r5, #0]
 8005192:	e7d6      	b.n	8005142 <_free_r+0x22>
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	1821      	adds	r1, r4, r0
 8005198:	428b      	cmp	r3, r1
 800519a:	bf01      	itttt	eq
 800519c:	6819      	ldreq	r1, [r3, #0]
 800519e:	685b      	ldreq	r3, [r3, #4]
 80051a0:	1809      	addeq	r1, r1, r0
 80051a2:	6021      	streq	r1, [r4, #0]
 80051a4:	6063      	str	r3, [r4, #4]
 80051a6:	6054      	str	r4, [r2, #4]
 80051a8:	e7cb      	b.n	8005142 <_free_r+0x22>
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	20001a04 	.word	0x20001a04

080051b0 <_init>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr

080051bc <_fini>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr
